{
  "entities": {
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client in the consórcio and crédito system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Client entity."
        },
        "name": {
          "type": "string",
          "description": "Full name of the client."
        },
        "phoneNumber": {
          "type": "string",
          "description": "Client's phone number for contact."
        },
        "email": {
          "type": "string",
          "description": "Client's email address.",
          "format": "email"
        },
        "status": {
          "type": "string",
          "description": "Current status of the client (e.g., New, Em análise, Aprovado)."
        },
        "quizId": {
          "type": "string",
          "description": "Reference to the Quiz taken by the client. (Relationship: Client 1:1 Quiz)"
        }
      },
      "required": [
        "id",
        "name",
        "phoneNumber",
        "email",
        "status"
      ]
    },
    "Quiz": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Quiz",
      "type": "object",
      "description": "Represents a quiz taken by a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Quiz entity."
        },
        "questions": {
          "type": "array",
          "description": "List of questions and answers of the Quiz.",
          "items": {
            "type": "string"
          }
        },
        "documentIds": {
          "type": "array",
          "description": "References to Documents uploaded by the client. (Relationship: Quiz 1:N Document)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a document uploaded by a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Document entity."
        },
        "filename": {
          "type": "string",
          "description": "Name of the uploaded document file."
        },
        "fileType": {
          "type": "string",
          "description": "Type of the uploaded document file (e.g., PDF, JPG)."
        },
        "url": {
          "type": "string",
          "description": "URL where the document is stored.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "filename",
        "fileType",
        "url"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a consórcio or crédito product.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "rate": {
          "type": "number",
          "description": "Interest rate associated with the product."
        },
        "term": {
          "type": "number",
          "description": "Term (in months) for the product."
        },
        "minValue": {
          "type": "number",
          "description": "Minimum value for the product."
        },
        "maxValue": {
          "type": "number",
          "description": "Maximum value for the product."
        }
      },
      "required": [
        "id",
        "name",
        "rate",
        "term",
        "minValue",
        "maxValue"
      ]
    },
    "Bank": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bank",
      "type": "object",
      "description": "Represents a financial institution.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Bank entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the financial institution."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sale",
      "type": "object",
      "description": "Represents a sale or proposal.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Sale entity."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to the Client associated with the sale. (Relationship: Client 1:N Sale)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to the Product sold. (Relationship: Product 1:N Sale)"
        },
        "bankId": {
          "type": "string",
          "description": "Reference to the Bank involved in the sale. (Relationship: Bank 1:N Sale)"
        },
        "status": {
          "type": "string",
          "description": "Current status of the sale (e.g., Aberta, Finalizada)."
        },
        "commission": {
          "type": "number",
          "description": "Commission amount for the sale."
        }
      },
      "required": [
        "id",
        "clientId",
        "productId",
        "bankId",
        "status"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the administrative system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "Username for login."
        },
        "role": {
          "type": "string",
          "description": "User's role (e.g., Admin, Gestor)."
        }
      },
      "required": [
        "id",
        "username",
        "role"
      ]
    },
    "Configuration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Configuration",
      "type": "object",
      "description": "Represents application-wide configurations.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Configuration entity."
        },
        "whatsappApiUrl": {
          "type": "string",
          "description": "URL for the WhatsApp API integration."
        },
        "webhookUrl": {
          "type": "string",
          "description": "URL for the document validation webhook."
        },
        "brandLogoUrl": {
          "type": "string",
          "description": "URL for the brand logo.",
          "format": "uri"
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client data. Top-level collection for client records.",
          "params": [
            {
              "name": "clientId",
              "description": "Unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/clients/{clientId}/quizzes/{quizId}",
        "definition": {
          "entityName": "Quiz",
          "schema": {
            "$ref": "#/backend/entities/Quiz"
          },
          "description": "Stores quizzes associated with a client. Includes denormalized 'clientId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "Unique identifier for the client."
            },
            {
              "name": "quizId",
              "description": "Unique identifier for the quiz."
            }
          ]
        }
      },
      {
        "path": "/clients/{clientId}/documents/{documentId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores documents uploaded by a client. Includes denormalized 'clientId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "Unique identifier for the client."
            },
            {
              "name": "documentId",
              "description": "Unique identifier for the document."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product data.",
          "params": [
            {
              "name": "productId",
              "description": "Unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/banks/{bankId}",
        "definition": {
          "entityName": "Bank",
          "schema": {
            "$ref": "#/backend/entities/Bank"
          },
          "description": "Stores bank data.",
          "params": [
            {
              "name": "bankId",
              "description": "Unique identifier for the bank."
            }
          ]
        }
      },
      {
        "path": "/clients/{clientId}/sales/{saleId}",
        "definition": {
          "entityName": "Sale",
          "schema": {
            "$ref": "#/backend/entities/Sale"
          },
          "description": "Stores sales data related to a client. Includes denormalized 'clientId' for authorization independence.",
          "params": [
            {
              "name": "clientId",
              "description": "Unique identifier for the client."
            },
            {
              "name": "saleId",
              "description": "Unique identifier for the sale."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data.",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/configuration/{configurationId}",
        "definition": {
          "entityName": "Configuration",
          "schema": {
            "$ref": "#/backend/entities/Configuration"
          },
          "description": "Stores application configuration data.",
          "params": [
            {
              "name": "configurationId",
              "description": "Unique identifier for the configuration."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "If the user exists in this collection, then the user is an admin",
          "params": [
            {
              "name": "userId",
              "description": "Unique identifier for the user."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to support the ConsorciaTech application, focusing on security, scalability, and maintainability. It adheres to the core design principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters).\n\n**Authorization Independence:**\n\n*   The design avoids hierarchical authorization dependencies (`get()` calls in security rules) by denormalizing authorization data. For instance, if access to a `Quiz` or `Document` needs to be restricted to the `Client` who owns it, the `clientId` is explicitly stored within the `Quiz` and `Document` documents. This allows security rules to validate ownership without needing to fetch the `Client` document.\n*   The `User` roles are determined by the document that exists in `/roles_admin/{userId}`.\n\n**Structural Segregation:**\n\n*   Data with different access requirements are stored in separate collections. For example, client-specific data (Quizzes, Documents, Sales) are stored within `/clients/{clientId}/...` subcollections, ensuring that access rules for this data are distinct from global data like `/products` or `/banks`.\n\n**Access Modeling:**\n\n*   Path-based ownership is heavily utilized for private data. The `/clients/{clientId}/quizzes/{quizId}` and `/clients/{clientId}/documents/{documentId}` structures enforce that only the authenticated user matching the `clientId` can access those resources.\n*   The landing page form submissions are stored at the top level, separate from the client records, to allow write access for unauthenticated users.\n\n**QAPs (Rules are not Filters):**\n\n*   The structure supports secure `list` operations. For example, listing quizzes for a specific client only requires querying `/clients/{clientId}/quizzes`, which can be secured by checking `request.auth.uid == clientId`.\n\n**Invariants:**\n\n*   The structure supports the integrity of ownership by explicitly storing the `clientId` in child collections like `quizzes` and `documents`.\n\nThis design promotes robust security rules that are easy to understand and debug, facilitating a scalable and maintainable application."
  }
}