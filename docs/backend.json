{
  "entities": {
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client in the consórcio and credit system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Client entity."
        },
        "firstName": {
          "type": "string",
          "description": "Client's first name."
        },
        "lastName": {
          "type": "string",
          "description": "Client's last name."
        },
        "email": {
          "type": "string",
          "description": "Client's email address.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Client's phone number."
        },
        "quizId": {
          "type": "string",
          "description": "Reference to Quiz. (Relationship: Client 1:1 Quiz)"
        },
        "status": {
          "type": "string",
          "description": "Client's status (New, In Analysis, Pending, Approved, Rejected)."
        },
        "documentIds": {
          "type": "array",
          "description": "References to Documents uploaded by the client. (Relationship: Client 1:N Document)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone"
      ]
    },
    "Quiz": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Quiz",
      "type": "object",
      "description": "Represents a quiz or questionnaire for gathering client information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Quiz entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the quiz."
        },
        "description": {
          "type": "string",
          "description": "Description of the quiz."
        },
        "questionIds": {
          "type": "array",
          "description": "References to Questions in the quiz. (Relationship: Quiz 1:N Question)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title"
      ]
    },
    "Question": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Question",
      "type": "object",
      "description": "Represents a question in a quiz.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Question entity."
        },
        "text": {
          "type": "string",
          "description": "Text of the question."
        },
        "type": {
          "type": "string",
          "description": "Type of question (multiple choice, text, upload)."
        },
        "options": {
          "type": "array",
          "description": "Possible options for multiple choice questions.",
          "items": {
            "type": "string"
          }
        },
        "required": {
          "type": "boolean",
          "description": "Indicates if the question is required."
        }
      },
      "required": [
        "id",
        "text",
        "type"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a consórcio or credit product.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Product entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "type": {
          "type": "string",
          "description": "Type of product (consórcio, credit)."
        },
        "rate": {
          "type": "number",
          "description": "Interest rate for the product."
        },
        "termMin": {
          "type": "number",
          "description": "Minimum term for the product."
        },
        "termMax": {
          "type": "number",
          "description": "Maximum term for the product."
        },
        "valueMin": {
          "type": "number",
          "description": "Minimum value for the product."
        },
        "valueMax": {
          "type": "number",
          "description": "Maximum value for the product."
        }
      },
      "required": [
        "id",
        "name",
        "type"
      ]
    },
    "Bank": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bank",
      "type": "object",
      "description": "Represents a financial institution or partner bank.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Bank entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the bank."
        },
        "commissionRate": {
          "type": "number",
          "description": "Commission rate for the bank."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Sale",
      "type": "object",
      "description": "Represents a sale or proposal.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Sale entity."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Sale)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N Sale)"
        },
        "bankId": {
          "type": "string",
          "description": "Reference to Bank. (Relationship: Bank 1:N Sale)"
        },
        "status": {
          "type": "string",
          "description": "Status of the sale (Open, In Negotiation, Finalized, Cancelled)."
        },
        "proposalDocumentId": {
          "type": "string",
          "description": "Reference to a Document representing the proposal. (Relationship: Sale 1:1 Document)"
        }
      },
      "required": [
        "id",
        "clientId",
        "productId",
        "bankId",
        "status"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "Username of the user."
        },
        "role": {
          "type": "string",
          "description": "Role of the user (Admin, Gestor, Atendente, Financeiro)."
        }
      },
      "required": [
        "id",
        "username",
        "role"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a document uploaded by a client or generated by the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Document entity."
        },
        "filename": {
          "type": "string",
          "description": "Name of the file."
        },
        "url": {
          "type": "string",
          "description": "URL of the document.",
          "format": "uri"
        },
        "type": {
          "type": "string",
          "description": "Type of document (RG, CNH, proof of income, proof of residence, proposal)."
        }
      },
      "required": [
        "id",
        "filename",
        "url"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client data. Uses path-based ownership for security. Includes fields for personal information, quiz reference, document references, and client status.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/quizzes/{quizId}",
        "definition": {
          "entityName": "Quiz",
          "schema": {
            "$ref": "#/backend/entities/Quiz"
          },
          "description": "Stores quiz data. Contains quiz title, description, and question references.",
          "params": [
            {
              "name": "quizId",
              "description": "The unique identifier for the quiz."
            }
          ]
        }
      },
      {
        "path": "/questions/{questionId}",
        "definition": {
          "entityName": "Question",
          "schema": {
            "$ref": "#/backend/entities/Question"
          },
          "description": "Stores question data. Includes question text, type, options, and required status.",
          "params": [
            {
              "name": "questionId",
              "description": "The unique identifier for the question."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product data. Includes product name, type, rate, and term/value ranges.",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier for the product."
            }
          ]
        }
      },
      {
        "path": "/banks/{bankId}",
        "definition": {
          "entityName": "Bank",
          "schema": {
            "$ref": "#/backend/entities/Bank"
          },
          "description": "Stores bank data. Includes bank name and commission rate.",
          "params": [
            {
              "name": "bankId",
              "description": "The unique identifier for the bank."
            }
          ]
        }
      },
      {
        "path": "/sales/{saleId}",
        "definition": {
          "entityName": "Sale",
          "schema": {
            "$ref": "#/backend/entities/Sale"
          },
          "description": "Stores sales data. Includes references to Client, Product, and Bank, as well as sale status and proposal document reference.",
          "params": [
            {
              "name": "saleId",
              "description": "The unique identifier for the sale."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data. Includes username and role.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/documents/{documentId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores document data. Includes filename, URL, and type.",
          "params": [
            {
              "name": "documentId",
              "description": "The unique identifier for the document."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Documents in this collection grant admin privileges to the specified user. Existence of a document grants the role.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/roles_gestor/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Documents in this collection grant gestor privileges to the specified user. Existence of a document grants the role.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/roles_atendente/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Documents in this collection grant atendente privileges to the specified user. Existence of a document grants the role.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/roles_financeiro/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Documents in this collection grant financeiro privileges to the specified user. Existence of a document grants the role.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support a consórcio and credit system, focusing on clients, products, sales, and related data.  Authorization Independence is achieved through denormalization, especially for client-owned data.  For example, Client documents, stored under `/clients/{clientId}`, include all necessary data for authorization without needing to `get()` data from other collections.  This denormalization avoids hierarchical authorization dependencies and allows atomic operations.\n\nQAPs are supported by segregating data based on access requirements and utilizing path-based ownership for client-related data. Specific features supported by the data structure include:\n\n*   **Client Management:**  Client data is stored in `/clients/{clientId}`.  Document `id`s are used as references.  This supports listing all clients securely.\n*   **Quiz Management:** Quizzes and Questions are stored in their respective collections, allowing for separate management and listing.\n*   **Product and Bank Management:** Products and Banks are stored in their own top-level collections for easy access and management.\n*   **Sales/Proposals:**  Sales data is stored in `/sales/{saleId}` and includes denormalized information as needed. Sales are linked to Clients, Products and Banks using their respective IDs.\n*   **User Roles:** Users and their roles (Admin, Gestor, etc.) are stored in the `/users/{userId}` collection. Existence checks on documents in the `/roles_{role}/{userId}` collections are used to control access to sensitive operations.\n\nThis structure promotes clear authorization rules, simplifies queries, and maintains data integrity."
  }
}