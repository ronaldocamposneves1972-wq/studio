/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * and allows public read access for product catalogs and other non-sensitive data.
 * Data denormalization is used to improve security and performance.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /roles_admin/{userId}: Document existence determines admin role, accessible only by admins.
 * - /clients/{clientId}: Stores client information, generally accessible.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only by the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institutions, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium products, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit products, publicly readable.
 * - /product_combos/{productComboId}: Stores product combos, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals, access controlled by denormalized clientId.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to product catalogs and financial institutions.
 * - Data required for authorization is denormalized to avoid costly `get()` calls.
 * - The rules prioritize security over complex data validation in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - SalesProposals: The `clientId` is denormalized into the document to allow for
 *   direct authorization without additional reads.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /users/{userId} collection to leverage
 *   path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Utility function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Utility function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

     /**
      * @description Grants access to roles_admin documents based on user id.
      * @path /roles_admin/{userId}
      * @allow (create) User with ID 'user123' can create their own admin role.
      * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own admin role.
      * @deny (create) User with ID 'user456' cannot create a admin role for 'user123'.
      * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the admin role of 'user123'.
      * @principle Enforces document ownership for admin profiles.
      */
     match /roles_admin/{userId} {
       // Utility function to check if the user is signed in.
       function isSignedIn() {
         return request.auth != null;
       }

       // Utility function to check if the requesting user is the owner of the document.
       function isOwner(userId) {
         return request.auth.uid == userId;
       }

       allow get: if isSignedIn() && isOwner(userId);
       allow list: if false; // User listing is disallowed.
       allow create: if isSignedIn() && isOwner(userId);
       allow update: if isSignedIn() && isOwner(userId);
       allow delete: if isSignedIn() && isOwner(userId);
     }

    /**
     * @description Grants read access to all clients.
     * @path /clients/{clientId}
     * @allow (get, list) Any user can retrieve client information.
     * @deny (create, update, delete) Only authenticated users can manage client information.
     * @principle Allows public read access to client data, restricts writes.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to client documents based on client ownership.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) User with ID 'client123' can create a document for their profile.
     * @allow (get, update, delete) User with ID 'client123' can read, update, and delete their own document.
     * @deny (create) User with ID 'client456' cannot create a document for 'client123'.
     * @deny (get, update, delete) User with ID 'client456' cannot read, update, or delete the document of 'client123'.
     * @principle Enforces document ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
        // Utility function to check if the user is signed in.
        function isSignedIn() {
          return request.auth != null;
        }

        // Utility function to check if the requesting user is the owner of the document.
        function isOwner(clientId) {
          return request.auth.uid == clientId;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == clientId;
        allow update: if isSignedIn() && request.auth.uid == clientId;
        allow delete: if isSignedIn() && request.auth.uid == clientId;
    }

    /**
     * @description Grants read access to all financial institutions.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Any user can retrieve financial institution information.
     * @deny (create, update, delete) Only authenticated users can manage financial institution information.
     * @principle Allows public read access to financial institution data, restricts writes.
     */
    match /financial_institutions/{financialInstitutionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read access to all consortium products.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Any user can retrieve consortium product information.
     * @deny (create, update, delete) Only authenticated users can manage consortium product information.
     * @principle Allows public read access to consortium product data, restricts writes.
     */
    match /consortiums/{consortiumId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read access to all credit products.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Any user can retrieve credit product information.
     * @deny (create, update, delete) Only authenticated users can manage credit product information.
     * @principle Allows public read access to credit product data, restricts writes.
     */
    match /credit_products/{creditProductId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants read access to all product combos.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Any user can retrieve product combo information.
     * @deny (create, update, delete) Only authenticated users can manage product combo information.
     * @principle Allows public read access to product combo data, restricts writes.
     */
    match /product_combos/{productComboId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to sales proposals based on client ownership.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get) Any user can retrieve sales proposal information.
     * @deny (create, update, delete) Only the linked client can manage sales proposal information.
     * @principle Enforces client-based ownership for sales proposals.
     */
    match /sales_proposals/{salesProposalId} {
       // Utility function to check if the user is signed in.
       function isSignedIn() {
         return request.auth != null;
       }

       // Utility function to check if the requesting user is the owner of the document.
       function isOwner(clientId) {
           return get(/databases/$(database)/documents/clients/$(clientId)).data.uid == request.auth.uid;
       }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.clientId);
      allow delete: if isSignedIn() && isOwner(resource.data.clientId);
    }

    /**
     * @description Grants access to commission documents.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
        // Utility function to check if the user is signed in.
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to quiz documents.
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
        // Utility function to check if the user is signed in.
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Grants access to question documents.
     * @path /questions/{questionId}
     */
    match /questions/{questionId} {
        // Utility function to check if the user is signed in.
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}