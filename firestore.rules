rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'admin123' can be granted admin role.
     * @deny (create) User with ID 'user123' cannot grant themself admin role.
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(userId)).data.admin == true;
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == userId;
        allow update: if false;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(userId)).data.admin == true;
    }

    /**
     * @description Manages client data.
     * @path /clients/{clientId}
     * @allow (create) Authenticated user can create client data.
     * @deny (update) Non-authenticated user cannot update client data.
     * @principle Requires authentication for all operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Manages client documents with path-based ownership.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) Client with ID 'client123' can upload a document.
     * @deny (delete) Client with ID 'client123' cannot delete another client's document.
     * @principle Enforces client-based ownership for documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isClient(clientId) {
        return request.auth.uid == clientId;
      }

       function isExistingClient(clientId) {
        return isClient(clientId) && resource != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == clientId;
      allow update: if isSignedIn() && request.auth.uid == clientId;
      allow delete: if isSignedIn() && request.auth.uid == clientId;
    }

    /**
     * @description Manages financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) Authenticated user can create financial institution data.
     * @deny (update) Non-authenticated user cannot update financial institution data.
     * @principle Requires authentication for all operations.
     */
    match /financial_institutions/{financialInstitutionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Allows public read access to consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get) Anyone can read consortium data.
     * @deny (create) Non-authenticated user cannot create consortium data.
     * @principle Provides public read access with authentication required for writes.
     */
    match /consortiums/{consortiumId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Allows public read access to credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get) Anyone can read credit product data.
     * @deny (create) Non-authenticated user cannot create credit product data.
     * @principle Provides public read access with authentication required for writes.
     */
    match /credit_products/{creditProductId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Allows public read access to product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get) Anyone can read product combo data.
     * @deny (create) Non-authenticated user cannot create product combo data.
     * @principle Provides public read access with authentication required for writes.
     */
    match /product_combos/{productComboId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Allows access to sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get) Anyone can read sales proposal data.
     * @deny (create) Non-authenticated user cannot create sales proposal data.
     * @principle Provides public read access with authentication required for writes.
     */
    match /sales_proposals/{salesProposalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Manages commission data.
     * @path /commissions/{commissionId}
     * @allow (create) Authenticated user can create commission data.
     * @deny (update) Non-authenticated user cannot update commission data.
     * @principle Requires authentication for all operations.
     */
    match /commissions/{commissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Manages quiz data.
     * @path /quizzes/{quizId}
     * @allow (create) Authenticated user can create quiz data.
     * @deny (update) Non-authenticated user cannot update quiz data.
     * @principle Requires authentication for all operations.
     */
    match /quizzes/{quizId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }

    /**
     * @description Manages question data.
     * @path /questions/{questionId}
     * @allow (create) Authenticated user can create question data.
     * @deny (update) Non-authenticated user cannot update question data.
     * @principle Requires authentication for all operations.
     */
    match /questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.admin == true;
    }
  }
}