/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on path-based ownership and denormalized data, 
 * while remaining flexible on data shapes for rapid prototyping.  It emphasizes preventing unauthorized
 * data access while enabling quick iteration on the application's data model.
 *
 * Data Structure:
 * - User data is stored under `/users/{userId}`, enforcing user-ownership.
 * - Client-related data is stored under `/clients/{clientId}`, with subcollections like `/clients/{clientId}/documents/{documentId}`.
 * - Product information is split into `/consortiums/{consortiumId}` and `/credit_products/{creditProductId}`.
 * - Sales proposals are stored under `/sales_proposals/{salesProposalId}`, with denormalized `clientId` for efficient authorization.
 * - General data like `financial_institutions`, `product_combos`, `commissions`, `quizzes`, `questions`, `suppliers`, `cost_centers`, `expense_categories`, and `whatsapp_templates` are stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Data required for authorization is denormalized onto the documents being secured to avoid costly `get()` calls.
 * - The rules are written to be auditable and maintainable, with complex logic abstracted into helper functions.
 * - The rules DO NOT perform extensive data validation, focusing instead on authorization and relational integrity.
 * - Read access to any collection is denied by default unless explicitly allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user IDs match and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own document.
     * @allow (get, update, delete) - Authenticated user accesses their own document.
     * @deny (create) - Unauthorized user attempts to create a document for another user.
     * @deny (get, update, delete) - Unauthorized user attempts to access another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) - Only an admin can create an admin role document.
     * @allow (get) - Anyone can check if a user is an admin.
     * @allow (update, delete) - Only an admin can update or delete an admin role document.
     * @deny (create, update, delete) - Non-admins are denied access.
     * @principle Restricts admin role management to authorized users.
     */
    match /roles_admin/{userId} {
        allow get: if true;
        allow list: if false;
        allow create: if false; // TODO: Implement admin check
        allow update: if false; // TODO: Implement admin check
        allow delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}
     * @allow (create, get, update, delete) - Any authenticated user can manage clients.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for client management.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, get, update, delete) - Any authenticated user can manage clients documents.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for client management.
     */
     match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create, get, update, delete) - Any authenticated user can manage financial institutions.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for financial institution management.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for consortium documents.
     * @path /consortiums/{consortiumId}
     * @allow (create, get, update, delete) - Any authenticated user can manage consortiums.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for consortium management.
     */
    match /consortiums/{consortiumId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (create, get, update, delete) - Any authenticated user can manage credit products.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for credit product management.
     */
    match /credit_products/{creditProductId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (create, get, update, delete) - Any authenticated user can manage product combos.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for product combo management.
     */
    match /product_combos/{productComboId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create, get, update, delete) - Any authenticated user can manage sales proposals.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for sales proposal management.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

     /**
     * @description Rules for sales order documents.
     * @path /sales_orders/{salesOrderId}
     * @allow (create, get, update, delete) - Any authenticated user can manage sales orders.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for commission documents.
     * @path /commissions/{commissionId}
     * @allow (create, get, update, delete) - Any authenticated user can manage commissions.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for commission management.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (create, get, update, delete) - Any authenticated user can manage quizzes.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for quiz management.
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for question documents.
     * @path /questions/{questionId}
     * @allow (create, get, update, delete) - Any authenticated user can manage questions.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for question management.
     */
    match /questions/{questionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (create, get, update, delete) - Any authenticated user can manage suppliers.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for supplier management.
     */
    match /suppliers/{supplierId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for cost center documents.
     * @path /cost_centers/{costCenterId}
     * @allow (create, get, update, delete) - Any authenticated user can manage cost centers.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for cost center management.
     */
    match /cost_centers/{costCenterId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for expense category documents.
     * @path /expense_categories/{categoryId}
     * @allow (create, get, update, delete) - Any authenticated user can manage expense categories.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for expense category management.
     */
    match /expense_categories/{categoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for WhatsApp message template documents.
     * @path /whatsapp_templates/{templateId}
     * @allow (create, get, update, delete) - Any authenticated user can manage WhatsApp message templates.
     * @deny (create, get, update, delete) - Unauthenticated users are denied access.
     * @principle Requires authentication for WhatsApp message template management.
     */
    match /whatsapp_templates/{templateId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}