/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture with flexible data shapes to support rapid prototyping.
 * It enforces strict ownership and role-based access control for data managed within Firestore.
 * Data denormalization is strategically employed to avoid costly `get()` operations in rules, enhancing performance and security.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the authenticated user.
 * - /roles_admin/{userId}: Used to define admin roles based on document existence.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, accessible only to the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores combinations of products.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, denormalized with `clientId` for direct client access control.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to prevent information leakage.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 * - Data validation is minimized in this prototyping phase, focusing on relational integrity and ownership.
 * - Ownership checks are enforced using the `isOwner(userId)` helper function, ensuring that users can only access their own data.
 * - Admin roles are determined by the existence of a document in `/roles_admin/{userId}`, allowing for simple role-based authorization.
 * - The rules prioritize preventing "Missing or insufficient permissions" errors by structuring data with clear ownership and access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages user profiles, ensuring only the authenticated user can access their own data.
     * @path: /users/{userId}
     * @allow: (create) - Authenticated user with request.auth.uid == userId.
     * @allow: (get, update, delete, list) - Authenticated user with request.auth.uid == userId.
     * @deny: (create, get, update, delete, list) - Any other user.
     * @principle: Enforces strict user ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Defines admin roles based on document existence in /roles_admin/{userId}.
     * @path: /roles_admin/{userId}
     * @allow: (create) - Only allow server to create
     * @allow: (get, list, update, delete) - User is an admin.
     * @deny: (create, get, update, delete, list) - Any other user.
     * @principle: Implements role-based access control using document existence.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isAdmin(userId);
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin(userId);
      allow delete: if isAdmin(userId);
    }

    /**
     * @description: Manages client information.
     * @path: /clients/{clientId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages documents uploaded by clients, ensuring only the associated client can access them.
     * @path: /clients/{clientId}/documents/{documentId}
     * @allow: (get, list) - Only the client can read their documents.
     * @allow: (create) - Only the client can upload documents.
     * @allow: (update, delete) - Only the client can modify or delete their documents.
     * @deny: (create, get, update, delete, list) - Any other user.
     * @principle: Enforces client-specific ownership for document access and management.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isClient(clientId) {
          return isSignedIn() && request.auth.uid == clientId;
      }

      function isExistingClient(clientId) {
          return isClient(clientId) && resource.data != null;
      }

      allow get: if isClient(clientId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == clientId;
      allow update: if isClient(clientId);
      allow delete: if isClient(clientId);
    }

    /**
     * @description: Manages financial institution data.
     * @path: /financial_institutions/{financialInstitutionId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /financial_institutions/{financialInstitutionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages consortium product data.
     * @path: /consortiums/{consortiumId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /consortiums/{consortiumId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages credit product data.
     * @path: /credit_products/{creditProductId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /credit_products/{creditProductId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages product combo data.
     * @path: /product_combos/{productComboId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /product_combos/{productComboId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages sales proposal data, denormalized with `clientId` for direct client access control.
     * @path: /sales_proposals/{salesProposalId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /sales_proposals/{salesProposalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages commission data.
     * @path: /commissions/{commissionId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /commissions/{commissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages quiz data.
     * @path: /quizzes/{quizId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /quizzes/{quizId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Manages question data.
     * @path: /questions/{questionId}
     * @allow: (get, list) - Public read access.
     * @allow: (create, update, delete) - Only authenticated users can perform write operations.
     * @deny: (create, update, delete) - Unauthorized access.
     * @principle: Authenticated users can perform CRUD operations.
     */
    match /questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}