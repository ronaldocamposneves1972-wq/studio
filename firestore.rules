/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows controlled access to client data and related entities.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Client profiles are stored under `/clients/{clientId}`.
 * - Client documents are stored under `/clients/{clientId}/documents/{documentId}`.
 * - Client quiz answers are stored under `/clients/{clientId}/quizAnswers/{quizAnswerId}`.
 * - Product information is stored under `/products/{productId}`.
 * - Bank information is stored under `/banks/{bankId}`.
 * - Sales information is stored under `/sales/{saleId}`.
 * - Quiz questions are stored under `/quizQuestions/{quizQuestionId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Access to client data is not explicitly restricted in this version.
 * - Public read access is enabled for products, banks, sales, and quiz questions.
 * - Data shape validation is relaxed to allow rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `clientId` field is denormalized into the `Document` and `QuizAnswer` entities
 *   to allow authorization rules to directly check the client's ID without requiring additional reads.
 *
 * Structural Segregation:
 * - User profiles and client data are stored in separate collections to maintain distinct security contexts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) Authenticated user can only access their own profile data.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (get, list, update, delete) Authenticated user cannot access another user's profile data.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to client profile data.
     * @path /clients/{clientId}
     * @allow (get, list, create, update, delete) In this prototyping mode, all authenticated users can manage client data.  More restrictive roles should be applied later.
     * @deny None.
     * @principle Allows any signed in user to create, read, update or delete Clients in prototyping mode.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list, create, update, delete) In this prototyping mode, all authenticated users can manage client documents. More restrictive roles should be applied later.
     * @deny None.
     * @principle Allows any signed in user to create, read, update or delete Client Documents in prototyping mode.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to quiz answers provided by clients.
     * @path /clients/{clientId}/quizAnswers/{quizAnswerId}
     * @allow (get, list, create, update, delete) In this prototyping mode, all authenticated users can manage client quiz answers. More restrictive roles should be applied later.
     * @deny None.
     * @principle Allows any signed in user to create, read, update or delete Client Quiz Answers in prototyping mode.
     */
    match /clients/{clientId}/quizAnswers/{quizAnswerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get, list) Allows any user to read product information.
     * @allow (create, update, delete) In this prototyping mode, all authenticated users can manage product data. More restrictive roles should be applied later.
     * @deny None.
     * @principle Allows public read access for product information and authenticated write access in prototyping mode.
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to bank information.
     * @path /banks/{bankId}
     * @allow (get, list) Allows any user to read bank information.
     * @allow (create, update, delete) In this prototyping mode, all authenticated users can manage bank data. More restrictive roles should be applied later.
     * @deny None.
     * @principle Allows public read access for bank information and authenticated write access in prototyping mode.
     */
    match /banks/{bankId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to sales information.
     * @path /sales/{saleId}
     * @allow (get, list) Allows any user to read sales information.
     * @allow (create, update, delete) In this prototyping mode, all authenticated users can manage sales data. More restrictive roles should be applied later.
     * @deny None.
     * @principle Allows public read access for sales information and authenticated write access in prototyping mode.
     */
    match /sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to quiz questions.
     * @path /quizQuestions/{quizQuestionId}
     * @allow (get, list) Allows any user to read quiz questions.
     * @allow (create, update, delete) In this prototyping mode, all authenticated users can manage quiz question data. More restrictive roles should be applied later.
     * @deny None.
     * @principle Allows public read access for quiz questions and authenticated write access in prototyping mode.
     */
    match /quizQuestions/{quizQuestionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}