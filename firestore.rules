/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user and client data,
 * leveraging Firebase Authentication to control access.  It also implements
 * role-based access for admin users.  Data denormalization is employed in
 * `sales_proposals` for efficient authorization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only by the user.
 * - /roles_admin/{userId}: Document existence confers admin role.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Client-uploaded documents.
 * - /financial_institutions/{financialInstitutionId}: Financial institutions.
 * - /consortiums/{consortiumId}: Consortium products.
 * - /credit_products/{creditProductId}: Credit products.
 * - /product_combos/{productComboId}: Combinations of products.
 * - /sales_proposals/{salesProposalId}: Sales proposals, with denormalized clientId.
 * - /commissions/{commissionId}: Commissions data.
 * - /quizzes/{quizId}: Quizzes data.
 * - /questions/{questionId}: Questions data.
 *
 * Key Security Decisions:
 * - User data is strictly private and accessible only to the authenticated user.
 * - Admin role is determined by the existence of a document in /roles_admin/{userId}.
 * - Listing of user documents is denied for security.
 * - Sales Proposals include the client ID to avoid extra reads for authorization.
 * - Public read access is allowed for product and financial institution data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the admin role.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own user document.
     * @allow (get, update, delete) - Authenticated user accesses their own user document.
     * @deny (create) - User attempts to create a document with an ID different from their own.
     * @deny (get, update, delete) - User attempts to access another user's document.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rule for /roles_admin/{userId} documents.
      * @path /roles_admin/{userId}
      * @allow (create, get, update, delete) - Only an admin can manage admin roles.
      * @principle Restricts role management to admins.
      */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Rule for /clients/{clientId} documents.
     * @path /clients/{clientId}
     * @allow (get, list) - Anyone can read the client data.
     * @allow (create, update, delete) - Only an admin can manage clients.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for /clients/{clientId}/documents/{documentId} documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Authenticated user creates a document for their own client profile.
     * @allow (get, update, delete) - Only the client owner or an admin can access/modify the documents.
     * @deny (create) - User attempts to create a document for a client profile that isn't theirs.
     * @deny (get, update, delete) - User attempts to access another client's document.
     * @principle Enforces client-document ownership for writes; restricts access to a client's own documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isOwner(clientId) || isAdmin();
      allow list: if isOwner(clientId) || isAdmin();
      allow create: if isSignedIn() && request.resource.data.clientId == clientId;
      allow update: if (isExistingOwner(clientId) && request.resource.data.clientId == resource.data.clientId) || isAdmin();
      allow delete: if isExistingOwner(clientId) || isAdmin();
    }

    /**
     * @description Rule for /financial_institutions/{financialInstitutionId} documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Anyone can read financial institution data.
     * @allow (create, update, delete) - Only an admin can manage financial institutions.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for /consortiums/{consortiumId} documents.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Anyone can read consortium data.
     * @allow (create, update, delete) - Only an admin can manage consortiums.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for /credit_products/{creditProductId} documents.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Anyone can read credit product data.
     * @allow (create, update, delete) - Only an admin can manage credit products.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for /product_combos/{productComboId} documents.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Anyone can read product combo data.
     * @allow (create, update, delete) - Only an admin can manage product combos.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for /sales_proposals/{salesProposalId} documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Anyone can read sales proposal data.
     * @allow (create, update, delete) - Only an admin or the client can manage their sales proposals.
     * @principle Allows public read access, restricts writes to admins and proposal owner.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create: if isAdmin(); // TODO: Add client ownership validation once the schema is updated with an ownership field.
      allow update: if isAdmin(); // TODO: Add client ownership validation once the schema is updated with an ownership field.
      allow delete: if isAdmin(); // TODO: Add client ownership validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule for /commissions/{commissionId} documents.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Anyone can read commission data.
     * @allow (create, update, delete) - Only an admin can manage commissions.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for /quizzes/{quizId} documents.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Anyone can read quiz data.
     * @allow (create, update, delete) - Only an admin can manage quizzes.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for /questions/{questionId} documents.
     * @path /questions/{questionId}
     * @allow (get, list) - Anyone can read question data.
     * @allow (create, update, delete) - Only an admin can manage questions.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}