/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It leverages path-based authorization and denormalization to minimize reads and maximize performance.
 *
 * Data Structure:
 * - Users: /users/{userId} (owner-only access)
 * - Admins: /roles_admin/{userId} (existence determines admin role)
 * - Clients: /clients/{clientId} (general client data)
 * - Client Documents: /clients/{clientId}/documents/{documentId} (client-owned subcollection)
 * - Financial Institutions: /financial_institutions/{financialInstitutionId} (general data)
 * - Consortiums: /consortiums/{consortiumId} (product data)
 * - Credit Products: /credit_products/{creditProductId} (product data)
 * - Product Combos: /product_combos/{productComboId} (product data)
 * - Sales Proposals: /sales_proposals/{salesProposalId} (includes denormalized clientId)
 * - Commissions: /commissions/{commissionId} (commission data)
 * - Quizzes: /quizzes/{quizId} (quiz data)
 * - Questions: /questions/{questionId} (question data)
 * - Settings: /settings (public read, owner-only write)
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Admin role is determined by the existence of a document in /roles_admin/{userId}.
 * - Listing of user documents is allowed only for the owner.
 * - The `settings` collection defaults to public read.
 *
 * Denormalization for Authorization:
 * - `sales_proposals` includes `clientId` to avoid needing to fetch client data for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile: request.auth.uid == 'user123'
     * @deny (create) User 'user123' cannot create a profile for 'user456': request.auth.uid != 'user456'
     * @allow (get, list, update, delete) User with ID 'user123' can read, update, and delete their own profile: request.auth.uid == 'user123'
     * @deny (get, list, update, delete) User 'user123' cannot read, update, and delete the profile of 'user456': request.auth.uid != 'user456'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Determines admin role based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'user123' can be granted admin role: request.auth.uid == 'user123'
     * @deny (create) User 'user123' cannot grant admin role to 'user456': request.auth.uid != 'user456'
     * @allow (get, list, update, delete) User with ID 'user123' with admin role can read, update, and delete their own role document: request.auth.uid == 'user123' && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @deny (get, list, update, delete) User 'user123' without admin role cannot access role information: request.auth.uid == 'user123' && !exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))
     * @principle Uses document existence to manage roles.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Manages client information with no specific access control.
     * @path /clients/{clientId}
     * @allow (get, list) Any authenticated user can view client information.
     * @allow (create, update, delete) Only admins can create, update, and delete client information.
     * @principle Allows public read access, restricts writes to admins.
     */
    match /clients/{clientId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages client documents under the client's path.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) Only the client can access their own documents.
     * @allow (create) Only the client can create documents in their own path.
     * @allow (update, delete) Only the client or an admin can update and delete their documents.
     * @principle Enforces path-based ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }
        function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId) && request.resource.data.clientId == clientId;
      allow update: if isExistingOwner(clientId) || isAdmin();
      allow delete: if isExistingOwner(clientId) || isAdmin();
    }

    /**
     * @description Manages financial institution data with admin access.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Any authenticated user can view financial institutions.
     * @allow (create, update, delete) Only admins can create, update, and delete financial institution data.
     * @principle Restricts write access to admins.
     */
    match /financial_institutions/{financialInstitutionId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages consortium product data with admin access.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Any authenticated user can view consortium product data.
     * @allow (create, update, delete) Only admins can create, update, and delete consortium product data.
     * @principle Restricts write access to admins.
     */
    match /consortiums/{consortiumId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages credit product data with admin access.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Any authenticated user can view credit product data.
     * @allow (create, update, delete) Only admins can create, update, and delete credit product data.
     * @principle Restricts write access to admins.
     */
    match /credit_products/{creditProductId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages product combo data with admin access.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Any authenticated user can view product combo data.
     * @allow (create, update, delete) Only admins can create, update, and delete product combo data.
     * @principle Restricts write access to admins.
     */
    match /product_combos/{productComboId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages sales proposal data with client-based access and admin override.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) Only the client associated with the sales proposal or an admin can access it.
     * @allow (create) Only authenticated users can create sales proposals, must specify `clientId` on creation.
     * @allow (update, delete) Only the client associated with the sales proposal or an admin can update and delete it.
     * @principle Enforces client-based access using denormalized data; admins can override.
     */
    match /sales_proposals/{salesProposalId} {
      function isClient(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }

      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      function isExistingClientOrAdmin(clientId) {
           return (isClient(clientId) || isAdmin()) && resource != null;
      }
      allow get: if isClient(resource.data.clientId) || isAdmin();
      allow list: if isClient(resource.data.clientId) || isAdmin();
      allow create: if request.auth != null && request.resource.data.clientId != null;
      allow update: if isExistingClientOrAdmin(resource.data.clientId);
      allow delete: if isExistingClientOrAdmin(resource.data.clientId);
    }

    /**
     * @description Manages commission data with admin access.
     * @path /commissions/{commissionId}
     * @allow (get, list) Any authenticated user can view commission data.
     * @allow (create, update, delete) Only admins can create, update, and delete commission data.
     * @principle Restricts write access to admins.
     */
    match /commissions/{commissionId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages quiz data with admin access.
     * @path /quizzes/{quizId}
     * @allow (get, list) Any authenticated user can view quiz data.
     * @allow (create, update, delete) Only admins can create, update, and delete quiz data.
     * @principle Restricts write access to admins.
     */
    match /quizzes/{quizId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages question data with admin access.
     * @path /questions/{questionId}
     * @allow (get, list) Any authenticated user can view question data.
     * @allow (create, update, delete) Only admins can create, update, and delete question data.
     * @principle Restricts write access to admins.
     */
    match /questions/{questionId} {
      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Public read, admin-only write for settings.
     * @path /settings
     * @allow (get, list) Any user can read settings.
     * @allow (create, update, delete) Only admins can modify settings.
     * @principle Public read, restricted write access.
     */
     match /settings {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}