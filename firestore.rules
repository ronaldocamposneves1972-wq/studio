/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * User data is strictly controlled by the owning user. Publicly accessible data
 * (e.g., products) allows public read access but restricts modifications to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user.
 * - /roles_admin/{userId}: Document existence confers admin privileges to the user.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Client-owned documents.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data (public read).
 * - /consortiums/{consortiumId}: Stores consortium product data (public read).
 * - /credit_products/{creditProductId}: Stores credit product data (public read).
 * - /product_combos/{productComboId}: Stores product combos (public read).
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data. Includes denormalized 'clientId' for authorization.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - Strict user ownership for /users/{userId} and /clients/{clientId}/documents/{documentId}.
 * - Public read access for product catalogs (/consortiums, /credit_products, /product_combos, /financial_institutions).
 * - Authorization Independence: Key authorization data (clientId in sales_proposals) is denormalized to avoid costly `get()` calls in rules.
 * - Admin role is determined by the existence of a document in /roles_admin/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of a resource.
     * @details Combines ownership check with resource existence check for safer updates/deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Allows anyone to read. Only allows authorized users to write.
     */
    function isPublicReadOnly() {
        return true;
    }

    /**
     * @description Defines a user document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @allow (get) User with ID 'user123' can read their profile.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @allow (update) User with ID 'user123' can update their profile.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines a role_admin document.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'user123' can create their role_admin.
     * @deny (create) User with ID 'user456' cannot create a role_admin for 'user123'.
     * @allow (get) User with ID 'user123' can read their role_admin.
     * @deny (get) User with ID 'user456' cannot read the role_admin of 'user123'.
     * @allow (update) User with ID 'user123' can update their role_admin.
     * @deny (update) User with ID 'user456' cannot update the role_admin of 'user123'.
     * @allow (delete) User with ID 'user123' can delete their role_admin.
     * @deny (delete) User with ID 'user456' cannot delete the role_admin of 'user123'.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Defines a client document.
     * @path /clients/{clientId}
     * @allow (create) Any signed-in user can create a client.
     * @deny (create) If the client id doesn't match the document ID
     * @allow (get) Any signed-in user can get a client.
     * @deny (get) N/A
     * @allow (update) Any signed-in user can update a client.
     * @deny (update) If the client tries to change the id of the client
     * @allow (delete) Any signed-in user can delete a client.
     * @deny (delete) N/A
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines a document under a client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) A client can create a document in their documents subcollection.
     * @deny (create) A client cannot create a document under another client's documents subcollection.
     * @allow (get) A client can get a document in their documents subcollection.
     * @deny (get) A client cannot get a document under another client's documents subcollection.
     * @allow (update) A client can update a document in their documents subcollection.
     * @deny (update) A client cannot update a document under another client's documents subcollection.
     * @allow (delete) A client can delete a document in their documents subcollection.
     * @deny (delete) A client cannot delete a document under another client's documents subcollection.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isOwner(clientId);
      allow list: if false;
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Defines a financial institution document.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) N/A
     * @deny (create) N/A
     * @allow (get) Anyone can get a financial institution.
     * @deny (get) N/A
     * @allow (update) N/A
     * @deny (update) N/A
     * @allow (delete) N/A
     * @deny (delete) N/A
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if isPublicReadOnly();
      allow list: if isPublicReadOnly();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines a consortium product document.
     * @path /consortiums/{consortiumId}
     */
    match /consortiums/{consortiumId} {
      allow get: if isPublicReadOnly();
      allow list: if isPublicReadOnly();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines a credit product document.
     * @path /credit_products/{creditProductId}
     */
    match /credit_products/{creditProductId} {
      allow get: if isPublicReadOnly();
      allow list: if isPublicReadOnly();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines a product combo document.
     * @path /product_combos/{productComboId}
     */
    match /product_combos/{productComboId} {
      allow get: if isPublicReadOnly();
      allow list: if isPublicReadOnly();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines a sales proposal document.
     * @path /sales_proposals/{salesProposalId}
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines a commission document.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines a quiz document.
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines a question document.
     * @path /questions/{questionId}
     */
    match /questions/{questionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Defines products document.
      * @path /products
      */
    match /products/{productId}{
        allow get: if isPublicReadOnly();
        allow list: if isPublicReadOnly();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}