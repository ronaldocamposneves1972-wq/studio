/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset prioritizes security through strict path-based ownership and authorization independence.
 * It denormalizes data (e.g., client IDs in sales proposals) to avoid costly and complex `get()` operations in rules.
 *
 * Data Structure:
 * The data is organized into top-level collections like `users`, `clients`, `financial_institutions`, `consortiums`,
 * `credit_products`, `product_combos`, `sales_proposals`, `commissions`, `quizzes`, `questions`, `suppliers`, `cost_centers`, `expense_categories`, and `whatsapp_templates`.
 * User-specific data is stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - Listing all users is disallowed.
 * - Public read access is not granted to any collections containing private user data.
 * - All write operations are protected by authorization checks.
 * - The `roles_admin` collection determines admin status based on document existence.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection includes the `clientId` field to enable direct authorization checks
 *   without needing to `get()` the associated client document.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while potentially public data resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Fundamental check for authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces path-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces path-based ownership and resource existence for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows a user to only create their own user document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates document /users/user123
     * @deny (create) - User with UID 'user123' attempts to create document /users/user456
     * @principle Enforces path-based ownership for user creation.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Admin role based on document existence in /roles_admin/{userId}.
     * @path /roles_admin/{userId}
     * @allow (create) - User with UID 'admin123' creates document /roles_admin/admin123
     * @deny (create) - User with UID 'user123' attempts to create document /roles_admin/admin123
     * @principle Admin role is determined by the existence of a document with their UID.
     */
    match /roles_admin/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages client data.
     * @path /clients/{clientId}
     * @allow (create) - Any authenticated user can create a client profile.
     * @deny (update) - Unauthenticated user attempts to update a client profile.
     * @principle Requires authentication for all operations.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages documents uploaded by clients, enforcing ownership.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - User with UID 'user123' creates document /clients/client456/documents/doc789
     * @deny (update) - User with UID 'user123' attempts to update document /clients/client456/documents/doc789
     * @principle Enforces client-based ownership for document management.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) - Any authenticated user can create a financial institution.
     * @deny (update) - Unauthenticated user attempts to update a financial institution.
     * @principle Requires authentication for all operations.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (create) - Any authenticated user can create a consortium product.
     * @deny (update) - Unauthenticated user attempts to update a consortium product.
     * @principle Requires authentication for all operations.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (create) - Any authenticated user can create a credit product.
     * @deny (update) - Unauthenticated user attempts to update a credit product.
     * @principle Requires authentication for all operations.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages product combo data.
     * @path /product_combos/{productComboId}
     * @allow (create) - Any authenticated user can create a product combo.
     * @deny (update) - Unauthenticated user attempts to update a product combo.
     * @principle Requires authentication for all operations.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages sales proposal data, enforcing client-based authorization.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) - User creates a sales proposal with their UID matching the 'clientId'.
     * @deny (update) - User attempts to update a sales proposal where their UID doesn't match the 'clientId'.
     * @principle Enforces client-based ownership using the denormalized 'clientId' field.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (create) - Any authenticated user can create a sales order.
     * @deny (update) - Unauthenticated user attempts to update a sales order.
     * @principle Requires authentication for all operations.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages commission data.
     * @path /commissions/{commissionId}
     * @allow (create) - Any authenticated user can create a commission.
     * @deny (update) - Unauthenticated user attempts to update a commission.
     * @principle Requires authentication for all operations.
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages quiz data.
     * @path /quizzes/{quizId}
     * @allow (create) - Any authenticated user can create a quiz.
     * @deny (update) - Unauthenticated user attempts to update a quiz.
     * @principle Requires authentication for all operations.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages question data.
     * @path /questions/{questionId}
     * @allow (create) - Any authenticated user can create a question.
     * @deny (update) - Unauthenticated user attempts to update a question.
     * @principle Requires authentication for all operations.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages supplier data.
     * @path /suppliers/{supplierId}
     * @allow (create) - Any authenticated user can create a supplier.
     * @deny (update) - Unauthenticated user attempts to update a supplier.
     * @principle Requires authentication for all operations.
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

     /**
      * @description Manages cost center data.
      * @path /cost_centers/{costCenterId}
      * @allow (create) - Any authenticated user can create a cost center.
      * @deny (update) - Unauthenticated user attempts to update a cost center.
      * @principle Requires authentication for all operations.
      */
    match /cost_centers/{costCenterId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Manages expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (create) - Any authenticated user can create an expense category.
     * @deny (update) - Unauthenticated user attempts to update an expense category.
     * @principle Requires authentication for all operations.
     */
    match /expense_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }
    /**
     * @description Manages WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (create) - Any authenticated user can create a WhatsApp message template.
     * @deny (update) - Unauthenticated user attempts to update a WhatsApp message template.
     * @principle Requires authentication for all operations.
     */
    match /whatsapp_templates/{templateId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }
  }
}