/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of role-based and ownership-based access control.
 * Admins have broad access, while regular users primarily interact with data they own or are explicitly granted access to.
 * Authorization Independence is a key principle, achieved through data denormalization to avoid costly `get()` calls.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible to the user themselves and admins.
 * - /roles_admin/{userId}: Document existence grants admin role.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, accessible to the client and admins.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data.  Includes clientId to authorize based on client.
 * - /sales_orders/{salesOrderId}: Stores sales order data.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /suppliers/{supplierId}: Stores supplier data.
 * - /cost_centers/{costCenterId}: Stores cost center data.
 * - /expense_categories/{categoryId}: Stores expense category data.
 *
 * Key Security Decisions:
 * - Admin Role: Document existence in /roles_admin/{userId} grants admin privileges.
 * - Ownership: Path-based ownership is enforced for user data and client documents.
 * - Authorization Independence: Data is denormalized (e.g., clientId in sales_proposals) to avoid costly `get()` calls in rules.
 * - No User Listing: Listing all users is not permitted for security reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write, list) if isOwner(userId) - Allows the user to read and write their own profile.
     * @allow (read, write, list) if isAdmin() - Allows admins to read and write any user profile.
     * @deny (create, update, delete) if !isOwner(userId) && !isAdmin() - Denies non-owners and non-admins from creating, updating, or deleting user profiles.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow list: if isAdmin();
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow create: if isAdmin() - Allows admins to grant admin roles.
     * @allow get, delete: if isAdmin() - Allows admins to check and revoke admin roles.
     * @deny read, write, list, update: if true - Denies all other operations.
     * @principle Existence of document grants admin role; managed by admins.
     */
    match /roles_admin/{userId} {
      allow get, delete: if isAdmin();
      allow create: if isAdmin();
      allow list, update: if false;
    }

    /**
     * @description Controls access to client documents.
     * @path /clients/{clientId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read client data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete client data.
     * @principle Restricts write access to admins.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to client documents (files).
     * @path /clients/{clientId}/documents/{documentId}
     * @allow get, list: if isAdmin() - Allows admin to view all documents.
     * @allow create: if isAdmin()
     * @allow update: if isAdmin()
     * @allow delete: if isAdmin()
     * @principle Restricts access to a client's own documents and admin override.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read financial institution data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete financial institution data.
     * @principle Restricts write access to admins.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to consortium product documents.
     * @path /consortiums/{consortiumId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read consortium product data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete consortium product data.
     * @principle Restricts write access to admins.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read credit product data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete credit product data.
     * @principle Restricts write access to admins.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to product combo documents.
     * @path /product_combos/{productComboId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read product combo data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete product combo data.
     * @principle Restricts write access to admins.
     */
    match /product_combos/{productComboId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read sales proposal data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete sales proposal data.
     * @principle Restricts write access to admins.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to sales order documents.
     * @path /sales_orders/{salesOrderId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read sales order data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete sales order data.
     * @principle Restricts write access to admins.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to commission documents.
     * @path /commissions/{commissionId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read commission data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete commission data.
     * @principle Restricts write access to admins.
     */
    match /commissions/{commissionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to quiz documents.
     * @path /quizzes/{quizId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read quiz data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete quiz data.
     * @principle Restricts write access to admins.
     */
    match /quizzes/{quizId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to question documents.
     * @path /questions/{questionId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read question data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete question data.
     * @principle Restricts write access to admins.
     */
    match /questions/{questionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    /**
     * @description Controls access to supplier documents.
     * @path /suppliers/{supplierId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read supplier data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete supplier data.
     * @principle Restricts write access to admins.
     */
     match /suppliers/{supplierId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
     /**
     * @description Controls access to cost center documents.
     * @path /cost_centers/{costCenterId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read cost center data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete cost center data.
     * @principle Restricts write access to admins.
     */
    match /cost_centers/{costCenterId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
     /**
     * @description Controls access to expense category documents.
     * @path /expense_categories/{categoryId}
     * @allow get, list: if isSignedIn() - Allows any authenticated user to read expense category data.
     * @allow create, update, delete: if isAdmin() - Only admins can create, update, or delete expense category data.
     * @principle Restricts write access to admins.
     */
    match /expense_categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
  }
}