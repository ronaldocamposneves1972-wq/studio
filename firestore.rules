/**
 * @file Firestore Security Rules for ConsorciaTech Application
 * @core_philosophy This ruleset prioritizes security by enforcing a strict authorization model.
 *   Admin users have full access, while other users are restricted to data they own or have been explicitly granted access to.
 *   Data validation is kept minimal for rapid prototyping but focuses on authorization-critical fields.
 * @data_structure The database is organized into top-level collections for entities like users, clients, products, and financial institutions.
 *   User-specific data is stored under `/users/{userId}`. Relational data is linked via IDs and, where necessary, denormalized for simpler rules.
 * @key_security_decisions
 *   - Admin users bypass all other security checks.
 *   - `list` operations are generally restricted to owners of user-scoped data or denied. Public listing is not used for private user data.
 *   - Data validation is limited to ownership and relational integrity to allow for flexible data shapes during prototyping.
 *   - All write operations require explicit authorization checks to prevent unauthorized data modification.
 *   - Read operations are generally open unless user is not admin
 * @denormalization_for_authorization
 *   - The `sales_proposals` collection includes a denormalized `clientId` field to enable client-specific access control without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an admin user.
     * @returns {bool} True if the user has admin role, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {bool} True if the user IDs match, false otherwise.
     * @example isOwner('user123') returns true if request.auth.uid is 'user123'.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines security rules for user documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own document if the userId matches their auth ID.
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A user cannot create a document with a mismatched userId.
     * @deny (update) - A non-admin user cannot update another user's document.
     * @deny (delete) - A non-admin user cannot delete another user's document.
     * @principle Enforces document ownership for writes, restricts reads to admins.
     */
    match /users/{userId} {
      allow get, list: if isAdmin();
      allow create: if isOwner(userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) - An admin user can create a role document.
     * @allow (get) - An admin user can get a role document.
     * @allow (list) - Only admin can list
     * @allow (update) - An admin user can update a role document.
     * @allow (delete) - An admin user can delete a role document.
     * @deny (create) - A non-admin user cannot create a role document.
     * @deny (update) - A non-admin user cannot update a role document.
     * @deny (delete) - A non-admin user cannot delete a role document.
     * @principle Restricts role management to admin users.
     */
    match /roles_admin/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for client documents.
     * @path /clients/{clientId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A non-admin user cannot create a client document.
     * @deny (update) - A non-admin user cannot update a client document.
     * @deny (delete) - A non-admin user cannot delete a client document.
     */
    match /clients/{clientId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A non-admin user cannot create a document for another client.
     * @deny (update) - A non-admin user cannot update a document for another client.
     * @deny (delete) - A non-admin user cannot delete a document for another client.
     * @principle Enforces path-based ownership under client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A non-admin user cannot create a financial institution document.
     * @deny (update) - A non-admin user cannot update a financial institution document.
     * @deny (delete) - A non-admin user cannot delete a financial institution document.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for consortium product documents.
     * @path /consortiums/{consortiumId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A non-admin user cannot create a consortium product document.
     * @deny (update) - A non-admin user cannot update a consortium product document.
     * @deny (delete) - A non-admin user cannot delete a consortium product document.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A non-admin user cannot create a credit product document.
     * @deny (update) - A non-admin user cannot update a credit product document.
     * @deny (delete) - A non-admin user cannot delete a credit product document.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A non-admin user cannot create a product combo document.
     * @deny (update) - A non-admin user cannot update a product combo document.
     * @deny (delete) - A non-admin user cannot delete a product combo document.
     */
    match /product_combos/{productComboId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     * @deny (create) - A non-admin user cannot create a sales proposal document.
     * @deny (update) - A non-admin user cannot update a sales proposal document.
     * @deny (delete) - A non-admin user cannot delete a sales proposal document.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for sales order documents.
     * @path /sales_orders/{salesOrderId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for commission documents.
     * @path /commissions/{commissionId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     */
    match /commissions/{commissionId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     */
    match /quizzes/{quizId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for question documents.
     * @path /questions/{questionId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     */
    match /questions/{questionId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     */
    match /suppliers/{supplierId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for cost center documents.
     * @path /cost_centers/{costCenterId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     */
    match /cost_centers/{costCenterId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines security rules for expense category documents.
     * @path /expense_categories/{categoryId}
     * @allow (get) - Admin users can read all
     * @allow (list) - Admin users can read all
     * @allow (create) - Admin users can create all
     * @allow (update) - Admin users can update all
     * @allow (delete) - Admin users can delete all
     */
    match /expense_categories/{categoryId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}