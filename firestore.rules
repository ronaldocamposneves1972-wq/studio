/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence, leveraging path-based ownership and data denormalization.
 * It enforces strict access control based on user identity and role, minimizing the need for complex queries or external data lookups.
 *
 * Data Structure:
 * The Firestore database is structured into several top-level collections:
 * - /users/{userId}: Stores user profile data, accessible only to the owning user.
 * - /roles_admin/{userId}: Used for role-based access control, where document existence grants admin privileges.
 * - /clients/{clientId}: Stores client information, publicly readable.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, accessible only to the specific client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, with denormalized clientId for access control.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - Public Read Access: Collections like `clients`, `financial_institutions`, `consortiums`, `credit_products`, and `product_combos` are publicly readable to facilitate open access to product and partner information.
 * - Ownership Enforcement: User-specific data under `/users/{userId}` and `/clients/{clientId}/documents/{documentId}` is strictly controlled by the owning user/client.
 * - Role-Based Access: The `/roles_admin/{userId}` collection grants admin privileges based on document existence.
 * - Denormalization: The `sales_proposals` collection denormalizes the `clientId` to enable efficient, secure access control without additional database reads.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection includes a denormalized `clientId` field to authorize access based on client ownership, avoiding costly `get()` operations.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, separate from public collections like `clients`, ensuring clear access boundaries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the authenticated user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth.uid can create their document.
     * @allow (get, update, delete) Authenticated user with ID matching the document ID can perform these operations.
     * @deny (create) User tries to create a document with an ID that doesn't match their auth.uid.
     * @deny (get, update, delete) User tries to access another user's document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows checking if a user has admin roles. Document existence determines admin role.
     * @path /roles_admin/{userId}
     * @allow (get) Any authenticated user can check for the existence of an admin role.
     * @allow (create) Only a server can create admin roles (protect this endpoint in backend).
     * @deny (create, update, delete) No client-side creation, update, or deletion of admin roles.
     * @principle Enforces role-based access control using document existence.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; // Only allow create in backend
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read client information, but restricts creation, updates, and deletes.
     * @path /clients/{clientId}
     * @allow (get, list) Anyone can read client information.
     * @deny (create, update, delete) No client-side creation, update, or deletion of client data.
     * @principle Allows public read access while restricting write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a client to read and write their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) Authenticated user can create a document if the clientId matches the path.
     * @allow (get, update, delete) Authenticated user can access documents with matching client ID.
     * @deny (create) User tries to create a document with a clientId that doesn't match their auth.uid.
     * @deny (get, update, delete) User tries to access another client's documents.
     * @principle Enforces document ownership for client-uploaded documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
          return isOwner(clientId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Allows anyone to read financial institution information, but restricts creation, updates, and deletes.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Anyone can read financial institution information.
     * @deny (create, update, delete) No client-side creation, update, or deletion of financial institution data.
     * @principle Allows public read access while restricting write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read consortium product information, but restricts creation, updates, and deletes.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Anyone can read consortium product information.
     * @deny (create, update, delete) No client-side creation, update, or deletion of consortium product data.
     * @principle Allows public read access while restricting write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read credit product information, but restricts creation, updates, and deletes.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Anyone can read credit product information.
     * @deny (create, update, delete) No client-side creation, update, or deletion of credit product data.
     * @principle Allows public read access while restricting write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read product combo information, but restricts creation, updates, and deletes.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Anyone can read product combo information.
     * @deny (create, update, delete) No client-side creation, update, or deletion of product combo data.
     * @principle Allows public read access while restricting write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows only the client associated with the SalesProposal to read and write it.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) Authenticated user can create a SalesProposal if they are the client.
     * @allow (get, update, delete) Authenticated user can access SalesProposals with matching client ID.
     * @deny (create) User tries to create a SalesProposal for another client.
     * @deny (get, update, delete) User tries to access another client's SalesProposals.
     * @principle Enforces ownership based on the denormalized clientId field.
     */
    match /sales_proposals/{salesProposalId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
      function isExistingOwner() {
          return isSignedIn() && resource.data.clientId == request.auth.uid;
      }

      allow get: if isSignedIn() && resource.data.clientId == request.auth.uid;
      allow list: if false; // Listing all SalesProposals not permitted
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows access to commission data.
     * @path /commissions/{commissionId}
     * @allow (get) Any authenticated user can read commission information.
     * @deny (create, update, delete) No client-side creation, update, or deletion of commission data.
     * @principle Restricts write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /commissions/{commissionId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows access to quiz data.
     * @path /quizzes/{quizId}
     * @allow (get) Any authenticated user can read quiz data.
     * @deny (create, update, delete) No client-side creation, update, or deletion of quiz data.
     * @principle Restricts write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /quizzes/{quizId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows access to question data.
     * @path /questions/{questionId}
     * @allow (get) Any authenticated user can read question data.
     * @deny (create, update, delete) No client-side creation, update, or deletion of question data.
     * @principle Restricts write access to authorized users (e.g., admins - implement role checks in backend).
     */
    match /questions/{questionId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}