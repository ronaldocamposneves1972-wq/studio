/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict, path-based ownership model for client data,
 * with public read access for product and bank information. User roles are
 * determined by presence in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - Clients: /clients/{clientId}
 * - Quizzes (under Client): /clients/{clientId}/quizzes/{quizId}
 * - Documents (under Client): /clients/{clientId}/documents/{documentId}
 * - Products: /products/{productId}
 * - Banks: /banks/{bankId}
 * - Sales (under Client): /clients/{clientId}/sales/{saleId}
 * - Users: /users/{userId} - used for profile data; writeable only by the user.
 * - Configuration: /configuration/{configurationId} - intended for admin-level control of settings.
 * - Admin Roles: /roles_admin/{userId} - presence indicates admin status.
 *
 * Key Security Decisions:
 * - Clients can only access their own quizzes, documents, and sales records.
 * - Product and bank data is publicly readable.
 * - Only authenticated users can manage their own user profile.
 * - Listing quizzes, documents, and sales is restricted to the owner.
 * - Admin status is determined by presence in the `/roles_admin/{userId}` collection.
 * - No schema validation is performed beyond authorization and relational integrity checks.
 *
 * Denormalization for Authorization:
 * - The `clientId` is denormalized into the `quizzes`, `documents`, and `sales` collections
 *   to enable authorization checks without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @example isSignedIn() == true if request.auth != null
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @example isOwner('user123') == (request.auth.uid == 'user123')
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId - The user ID to compare against.
     * @example isExistingOwner('user123') == (request.auth.uid == 'user123' && resource != null)
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && getSelf().data.id != null;
    }

    /**
    * @description Checks if the authenticated user has admin rights by verifying the existence of a document
    *              in the `roles_admin` collection corresponding to the user's UID.
    * @example isAdmin() == (get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.role == 'admin')
    */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) - User with UID 'user123' can create a client document if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete the client document if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a client document with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      allow get: if isOwner(clientId);
      allow list: if false; // Listing clients is not allowed

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isOwner(clientId) && isSignedIn();
      allow delete: if isOwner(clientId) && isSignedIn();
    }

    /**
     * @description Rules for the /clients/{clientId}/quizzes/{quizId} collection.
     * @path /clients/{clientId}/quizzes/{quizId}
     * @allow (create) - User with UID 'user123' can create a quiz under their client document if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete the quiz under their client document if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a quiz under client 'user123'.
     * @principle Enforces document ownership for writes within a subcollection.
     */
    match /clients/{clientId}/quizzes/{quizId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isOwner(clientId) && isSignedIn();
      allow delete: if isOwner(clientId) && isSignedIn();
    }

    /**
     * @description Rules for the /clients/{clientId}/documents/{documentId} collection.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - User with UID 'user123' can create a document under their client document if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete the document under their client document if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a document under client 'user123'.
     * @principle Enforces document ownership for writes within a subcollection.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isOwner(clientId) && isSignedIn();
      allow delete: if isOwner(clientId) && isSignedIn();
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product data.
     * @deny (create, update, delete) - No user can create, update, or delete product data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin(); // Only admin can manage the products
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /banks/{bankId} collection.
     * @path /banks/{bankId}
     * @allow (get, list) - Any user can read bank data.
     * @deny (create, update, delete) - No user can create, update, or delete bank data without specific authorization.
     * @principle Public read access with restricted writes.
     */
    match /banks/{bankId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin(); // Only admin can manage the banks
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /clients/{clientId}/sales/{saleId} collection.
     * @path /clients/{clientId}/sales/{saleId}
     * @allow (create) - User with UID 'user123' can create a sale under their client document if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete the sale under their client document if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a sale under client 'user123'.
     * @principle Enforces document ownership for writes within a subcollection.
     */
    match /clients/{clientId}/sales/{saleId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);

      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isOwner(clientId) && isSignedIn();
      allow delete: if isOwner(clientId) && isSignedIn();
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own user document if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their own user document if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a user document with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId) && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn();
    }

    /**
     * @description Rules for the /configuration/{configurationId} collection.
     * @path /configuration/{configurationId}
     * @deny (get, list, create, update, delete) - No user can access configuration data without specific authorization.
     * @allow (get, list, create, update and delete) - Admins can get, list, create, update and delete configuration data.
     * @principle Restricts access to configuration data.
     */
    match /configuration/{configurationId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     *              The existence of a document here indicates the user is an administrator.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(userId));
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin(); // Only another admin can create a new admin
      allow update: if false; // Not allowed to update
      allow delete: if isSignedIn() && isAdmin(); // Only another admin can remove admin access
    }

    /**
     * @description Rules for the /quizzes collection.
     * @path /quizzes
     * @deny (get, list, create, update, delete) - No user can access configuration data without specific authorization.
     * @allow (get, list, create, update and delete) - Admins can get, list, create, update and delete configuration data.
     * @principle Restricts access to configuration data.
     */
    match /quizzes/{quizId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

  }
}