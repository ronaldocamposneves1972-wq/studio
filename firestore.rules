/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User data is strictly controlled via path-based ownership.
 * Other collections like products, financial institutions, and sales proposals leverage public read access with
 * owner-only write access. Authorization independence is achieved through strategic data denormalization.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only to the authenticated user.
 * - /roles_admin/{userId}: Document existence determines admin role, not content.
 * - /clients/{clientId}: Stores client data, publicly readable.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only via client ownership.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, publicly readable, with client-only writes (based on clientId).
 * - /sales_orders/{salesOrderId}: Stores sales order data, publicly readable.
 * - /commissions/{commissionId}: Stores commission data, publicly readable.
 * - /quizzes/{quizId}: Stores quiz data, publicly readable.
 * - /questions/{questionId}: Stores question data, publicly readable.
 * - /suppliers/{supplierId}: Stores supplier data, publicly readable.
 * - /cost_centers/{costCenterId}: Stores cost center data, publicly readable.
 * - /expense_categories/{categoryId}: Stores expense category data, publicly readable.
 *
 * Key Security Decisions:
 * - No user listing is allowed to prevent information disclosure.
 * - Data denormalization is used to improve authorization efficiency and prevent rule failures due to missing data.
 * - Strict ownership checks are enforced for all write operations in user-specific data trees.
 * - Public read access is granted to several top-level collections to simplify data retrieval.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow easy client-based access control. This avoids the need for costly `get()` calls to the `clients` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the admin role based on document existence in /roles_admin/{userId}.
     * @returns {boolean} True if the document exists, indicating admin role.
     */
     function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Rules for user-specific data.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own document (user ID in path matches auth UID).
     * @allow (get, list, update, delete) Signed-in user accesses their own document.
     * @deny (create) Signed-in user attempts to create a document with a mismatched user ID.
     * @deny (get, list, update, delete) Non-signed-in user attempts to access any user document.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for defining admin roles based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can grant admin roles.
     * @allow (get) Only admins can check for admin roles.
     * @allow (delete) Only admins can revoke admin roles.
     * @deny (create, get, delete) Non-admins attempt to manage admin roles.
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client data.
     * @path /clients/{clientId}
     * @allow (get, list) Public read access for all clients.
     * @allow (create, update, delete) Only admins can manage client data.
     * @deny (create, update, delete) Non-admins attempt to modify client data.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for client documents stored under a specific client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) Only the client can read their own documents.
     * @allow (create) Only the client can create documents under their ID.
     * @allow (update, delete) Only the client can update/delete their own documents.
     * @deny (create, update, delete) Other users cannot create/modify documents under another client's ID.
     * @principle Enforces strict ownership of documents within a client's data tree.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rules for financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Public read access to financial institutions.
     * @allow (create, update, delete) Only admins can manage financial institution data.
     * @deny (create, update, delete) Non-admins attempt to modify financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Public read access to consortium products.
     * @allow (create, update, delete) Only admins can manage consortium product data.
     * @deny (create, update, delete) Non-admins attempt to modify consortium product data.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Public read access to credit products.
     * @allow (create, update, delete) Only admins can manage credit product data.
     * @deny (create, update, delete) Non-admins attempt to modify credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Public read access to product combos.
     * @allow (create, update, delete) Only admins can manage product combo data.
     * @deny (create, update, delete) Non-admins attempt to modify product combo data.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) Public read access to sales proposals.
     * @allow (create) Only authenticated users can create sales proposals. Must match clientId
     * @allow (update, delete) Only admins can update or delete sales proposals.
     * @deny (create) Authenticated users cannot create sales proposals with mismatched clientId
     * @deny (update, delete) Non-admins attempt to modify sales proposal data.
     * @principle Data denormalization allows for client-based access control.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) Public read access to sales orders.
     * @allow (create, update, delete) Only admins can manage sales order data.
     * @deny (create, update, delete) Non-admins attempt to modify sales order data.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) Public read access to commission data.
     * @allow (create, update, delete) Only admins can manage commission data.
     * @deny (create, update, delete) Non-admins attempt to modify commission data.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) Public read access to quiz data.
     * @allow (create, update, delete) Only admins can manage quiz data.
     * @deny (create, update, delete) Non-admins attempt to modify quiz data.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for question data.
     * @path /questions/{questionId}
     * @allow (get, list) Public read access to question data.
     * @allow (create, update, delete) Only admins can manage question data.
     * @deny (create, update, delete) Non-admins attempt to modify question data.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Rules for supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Public read access to supplier data.
     * @allow (create, update, delete) Only admins can manage supplier data.
     * @deny (create, update, delete) Non-admins attempt to modify supplier data.
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Rules for cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) Public read access to cost center data.
     * @allow (create, update, delete) Only admins can manage cost center data.
     * @deny (create, update, delete) Non-admins attempt to modify cost center data.
     */
    match /cost_centers/{costCenterId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    /**
     * @description Rules for expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) Public read access to expense category data.
     * @allow (create, update, delete) Only admins can manage expense category data.
     * @deny (create, update, delete) Non-admins attempt to modify expense category data.
     */
    match /expense_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}