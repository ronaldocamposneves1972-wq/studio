/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-centric model.
 * Users can only manage their own data, unless explicitly granted admin privileges.
 * Data is denormalized to avoid costly `get()` operations in rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only by the user themselves and admins.
 * - /roles_admin/{userId}: Document existence grants admin privileges to the user.
 * - /clients/{clientId}: Stores client data; access is not restricted by ownership.
 * - /clients/{clientId}/documents/{documentId}: Client-owned documents.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data; publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium data; publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data; publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data; publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data; publicly readable.
 * - /sales_orders/{salesOrderId}: Stores sales order data; publicly readable.
 * - /commissions/{commissionId}: Stores commission data; publicly readable.
 * - /quizzes/{quizId}: Stores quiz data; publicly readable.
 * - /questions/{questionId}: Stores question data; publicly readable.
 * - /suppliers/{supplierId}: Stores supplier data; publicly readable.
 * - /cost_centers/{costCenterId}: Stores cost center data; publicly readable.
 * - /expense_categories/{categoryId}: Stores expense category data; publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to most top-level collections to facilitate data discovery.
 * - Strict ownership is enforced for user-specific data trees and subcollections.
 *
 * Denormalization for Authorization:
 * - `sales_proposals` include the `clientId` to authorize client-specific access without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by checking document existence in `/roles_admin/{userId}`.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access/modify their own profile.
     * @deny (create) - If the user tries to create a profile for another user.
     * @deny (get, update, delete) - If the user tries to access/modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles. Document existence grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) - Any authenticated user can be made admin.
     * @allow (get) - Anyone can check if a user is an admin.
     * @allow (update, delete) - Admins can manage other admins.
     * @deny (create, update, delete) - Non-admins cannot create/modify admin roles.
     * @principle Uses document existence for authorization.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}
     * @allow (get, list) - Anyone can read client information.
     * @allow (create, update, delete) - Only admins can manage client information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Only the owner client can create the document.
     * @allow (get, list) - Only the owner client can read the document.
     * @allow (update, delete) - Only the owner client can update/delete the document.
     * @principle Enforces document ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Anyone can read financial institution information.
     * @allow (create, update, delete) - Only admins can manage financial institution information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for consortium documents.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Anyone can read consortium product information.
     * @allow (create, update, delete) - Only admins can manage consortium product information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Anyone can read credit product information.
     * @allow (create, update, delete) - Only admins can manage credit product information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Anyone can read product combo information.
     * @allow (create, update, delete) - Only admins can manage product combo information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Anyone can read sales proposal information.
     * @allow (create, update, delete) - Only admins can manage sales proposal information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

   /**
     * @description Rules for sales order documents.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) - Anyone can read sales order information.
     * @allow (create, update, delete) - Only admins can manage sales order information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for commission documents.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Anyone can read commission information.
     * @allow (create, update, delete) - Only admins can manage commission information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Anyone can read quiz information.
     * @allow (create, update, delete) - Only admins can manage quiz information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for question documents.
     * @path /questions/{questionId}
     * @allow (get, list) - Anyone can read question information.
     * @allow (create, update, delete) - Only admins can manage question information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Rules for supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Anyone can read supplier information.
     * @allow (create, update, delete) - Only admins can manage supplier information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Rules for cost center documents.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) - Anyone can read cost center information.
     * @allow (create, update, delete) - Only admins can manage cost center information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /cost_centers/{costCenterId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Rules for expense category documents.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) - Anyone can read expense category information.
     * @allow (create, update, delete) - Only admins can manage expense category information.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /expense_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}