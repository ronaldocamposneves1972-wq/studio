/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * combined with public read access for certain collections and role-based access
 * for administrative functions. Data denormalization is employed to avoid complex
 * queries and maintain efficient security rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user data, accessible only by the user.
 * - /roles_admin/{userId}: Document existence determines admin role.
 * - /clients/{clientId}: Stores client data, accessible by authorized users (e.g., sales reps).
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only by the associated client and authorized users.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals, accessible by the associated client.
 * - /sales_orders/{salesOrderId}: Stores sales order data, accessible by authorized users.
 * - /commissions/{commissionId}: Stores commission data, accessible by authorized users.
 * - /quizzes/{quizId}: Stores quiz data, publicly readable.
 * - /questions/{questionId}: Stores question data, publicly readable.
 * - /suppliers/{supplierId}: Stores supplier data, publicly readable.
 * - /cost_centers/{costCenterId}: Stores cost center data, publicly readable.
 * - /expense_categories/{categoryId}: Stores expense category data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for the /users collection to protect user privacy.
 * - Public read access is granted to product catalogs (consortiums, credit_products, product_combos), financial institutions, quizzes and questions, suppliers, cost centers, and expense categories for wider accessibility.
 * - Ownership is enforced using the `userId` parameter in paths like `/users/{userId}` and `/clients/{clientId}/documents/{documentId}`.
 * - The security posture defaults to strict authorization, requiring explicit rules to allow access.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow direct authorization based on client ownership, avoiding complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the document's owner ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by verifying the existence of a document in /roles_admin/{userId}.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Restricts access to user data based on ownership.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @deny (create) User with UID 'user123' cannot create a user document for 'user456'.
     * @allow (get) User with UID 'user123' can read their own user document.
     * @deny (get) User with UID 'user123' cannot read the user document of 'user456'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows admins to manage role assignments by creating and deleting documents.
     * @path /roles_admin/{userId}
     * @allow (create) Admin can create a role assignment for any user.
     * @deny (create) Non-admin cannot create a role assignment.
     * @principle Uses document existence to define admin roles, providing an auditable and maintainable approach to role management.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to client documents and restricts write access.
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to client documents based on client ownership.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) User with UID 'user123' can create a document for client 'client456' if they are the owner.
     * @deny (create) User with UID 'user123' cannot create a document for client 'client789' if they are not the owner.
     * @allow (get) User with UID 'user123' can read a document for client 'client456' if they are the owner.
     * @deny (get) User with UID 'user123' cannot read a document for client 'client789' if they are not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get) Any user can read financial institution data.
     * @principle Grants public read access to publicly available financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get) Any user can read consortium product data.
     * @principle Grants public read access to publicly available product catalog data.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get) Any user can read credit product data.
     * @principle Grants public read access to publicly available product catalog data.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get) Any user can read product combo data.
     * @principle Grants public read access to publicly available product catalog data.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts write access to sales proposals and allows read access.
     * @path /sales_proposals/{salesProposalId}
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to sales orders.
     * @path /sales_orders/{salesOrderId}
     */
    match /sales_orders/{salesOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to commissions.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to quiz data.
     * @path /quizzes/{quizId}
     * @allow (get) Any user can read quiz data.
     * @principle Grants public read access to publicly available quiz data.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to question data.
     * @path /questions/{questionId}
     * @allow (get) Any user can read question data.
     * @principle Grants public read access to publicly available question data.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Allows public read access to supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get) Any user can read supplier data.
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Allows public read access to cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (get) Any user can read cost center data.
     */
    match /cost_centers/{costCenterId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Allows public read access to expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (get) Any user can read expense category data.
     */
    match /expense_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}