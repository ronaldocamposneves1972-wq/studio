rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) - User 'abc' can create/update/delete their own profile at /users/abc with correct auth.
     * @deny (create, update, delete) - User 'abc' cannot create/update/delete profile 'xyz' at /users/xyz.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Determines admin role based on document existence.
     * @path /roles_admin/{userId}
     * @allow create - User 'abc' can create a document at /roles_admin/abc if they are authenticated. This grants them admin role.
     * @deny create - An unauthenticated user cannot create a document at /roles_admin/abc.
     * @allow get - Any authenticated user can check if a user is an admin.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin(userId) {
        return exists(/databases/$(database)/documents/roles_admin/$(userId));
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to client data. All clients are publicly readable.
     * @path /clients/{clientId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access with owner-only writes (not implemented here).
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to client documents. Only the client can read/write their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, update, delete) - Client 'abc' can create/update/delete their own document at /clients/abc/documents/doc1 with correct auth.
     * @deny (create, update, delete) - Client 'abc' cannot create/update/delete document 'doc2' for client 'xyz' at /clients/xyz/documents/doc2.
     * @principle Enforces document ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isOwner(clientId) && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isOwner(clientId) && isExistingOwner(clientId);
    }

    /**
     * @description Controls access to financial institution data. All financial institutions are publicly readable.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to consortium product data. All consortium products are publicly readable.
     * @path /consortiums/{consortiumId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to credit product data. All credit products are publicly readable.
     * @path /credit_products/{creditProductId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to product combo data. All product combos are publicly readable.
     * @path /product_combos/{productComboId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sales proposal data. All sales proposals are publicly readable.
     * @path /sales_proposals/{salesProposalId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to commission data. All commissions are publicly readable.
     * @path /commissions/{commissionId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to quiz data. All quizzes are publicly readable.
     * @path /quizzes/{quizId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to question data. All questions are publicly readable.
     * @path /questions/{questionId}
     * @allow get, list: Public read access.
     * @deny create, update, delete: No direct writes allowed.
     * @principle Public read access.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}