rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @example isSignedIn() returns true if request.auth != null
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is signed in and the user IDs match.
     * @example isOwner('user123') returns true if request.auth.uid == 'user123'
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is signed in, the user IDs match, and the resource exists.
     * @example isExistingOwner('user123') returns true if request.auth.uid == 'user123' and resource exists
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Rules for the /quizzes collection.
     * @path /quizzes/{quizId}
     * @allow (create) Signed-in user can create a quiz.
     * @deny (create) Anonymous user cannot create a quiz.
     * @allow (update) Signed-in user can update a quiz.
     * @deny (update) Anonymous user cannot update a quiz.
     * @allow (delete) Signed-in user can delete a quiz.
     * @deny (delete) Anonymous user cannot delete a quiz.
     * @principle Enforces authentication for quiz creation, updates, and deletion.
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /clients collection.
     * @path /clients/{clientId}
     * @allow (create) Anyone can create a client (submit a quiz response).
     * @deny (create) No conditions.
     * @allow (update) Signed-in user can update a client.
     * @deny (update) Anonymous user cannot update a client.
     * @allow (delete) Signed-in user can delete a client.
     * @deny (delete) Anonymous user cannot delete a client.
     * @principle Allows anonymous quiz submissions while restricting other operations to authenticated users.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if true;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}