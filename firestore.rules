/**
 * @file Firestore Security Rules for ConsorciaTech
 * @core_philosophy This ruleset enforces a strict ownership model for user data and client-related data,
 *                  and applies public read access where appropriate (e.g., product catalogs). Data
 *                  denormalization is used to avoid costly `get()` calls in security rules. Authorization
 *                  Independence is achieved by denormalizing the 'clientId' into `sales_proposals` to grant
 *                  access for the specific client.
 * @data_structure The database is structured into top-level collections for `users`, `clients`,
 *                 `financial_institutions`, `consortiums`, `credit_products`, `product_combos`,
 *                 `sales_proposals`, `commissions`, `quizzes`, and `questions`. Client-specific
 *                 data (e.g., documents) is nested under the `/clients/{clientId}` path.
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - Public read access is granted for product catalogs (`consortiums`, `credit_products`, `product_combos`).
 *   - Financial Institutions, Sales Proposals, and Commissions are readable by anyone.
 *   - All write operations are protected by authorization checks based on ownership or role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for authenticating users
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     * @deny (create) User with ID 'user123' cannot create a document with a different ID ('user456').
     * @principle Enforces user-ownership for user profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule to verify user is admin.
     * @path /roles_admin/{userId}
     * @allow (create) Only users can create their own admin role document.
     * @deny (create) User with ID 'user123' cannot create a document with a different ID ('user456').
     * @principle Enforces user-ownership for user profile data.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule to manage client information.
     * @path /clients/{clientId}
     * @allow (create) Any authenticated user can create a client document.
     * @deny (update) Only the authenticated user who created the client document can update it.
     * @principle Enforces document creation by any authenticated user and update/delete by the owner.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for managing client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) A client can create documents under their own ID.
     * @deny (update) A client cannot modify documents created by another client.
     * @principle Enforces client-ownership for documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if false;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rule for managing financial institutions.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Any user can read financial institution data.
     * @deny (create, update, delete) No one can create, update, or delete financial institution data.
     * @principle Grants public read access but restricts write access.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for managing consortium products.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Any user can read consortium product data.
     * @deny (create, update, delete) Only authenticated user with Admin role can create, update, or delete consortium product data.
     * @principle Grants public read access but restricts write access to admins.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for managing credit products.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Any user can read credit product data.
     * @deny (create, update, delete) Only authenticated user with Admin role can create, update, or delete credit product data.
     * @principle Grants public read access but restricts write access to admins.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for managing product combos.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Any user can read product combo data.
     * @deny (create, update, delete) Only authenticated user with Admin role can create, update, or delete product combo data.
     * @principle Grants public read access but restricts write access to admins.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for managing sales proposals.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) Any user can read sales proposal data.
     * @deny (create, update, delete) No one can create, update, or delete sales proposal data.
     * @principle Grants public read access but restricts write access.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for managing commissions.
     * @path /commissions/{commissionId}
     * @allow (get, list) Any user can read commission data.
     * @deny (create, update, delete) No one can create, update, or delete commission data.
     * @principle Grants public read access but restricts write access.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for managing quizzes.
     * @path /quizzes/{quizId}
     * @allow (create) Any authenticated user can create a quiz.
     * @deny (update) No one can update or delete a quiz.
     * @principle Allows creation, restricts updates and deletes.
     */
    match /quizzes/{quizId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for managing questions.
     * @path /questions/{questionId}
     * @allow (create) Any authenticated user can create a question.
     * @deny (update) No one can update or delete a question.
     * @principle Allows creation, restricts updates and deletes.
     */
    match /questions/{questionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}