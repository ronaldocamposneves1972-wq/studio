/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It assumes a zero-trust posture, explicitly denying access unless specifically granted.
 *
 * Data Structure:
 * The Firestore database is structured into several top-level collections:
 * - /users/{userId}: Stores user profiles; access is restricted to the owner.
 * - /roles_admin/{userId}: Document existence grants admin privileges to the user.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, with client-based ownership.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data; publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium product data; publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data; publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data; publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals, with a denormalized 'clientId' for access control.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to prevent information harvesting.
 * - Public read access is granted to product catalogs (financial_institutions, consortiums, credit_products, product_combos).
 * - The `roles_admin` collection grants admin privileges based on document existence.
 * - Data denormalization (e.g., 'clientId' in 'sales_proposals') is used to avoid costly `get()` calls and enforce authorization independence.
 *
 * Denormalization for Authorization:
 * - SalesProposals contain a `clientId` field. This allows rules on `/sales_proposals/{salesProposalId}` to directly check if the requesting user is the related client, without needing to perform a separate `get()` request to the `/clients/{clientId}` document.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public product information is stored in top-level collections. This segregation enables different access control policies for each type of data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID of the supposed owner.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource.
     * @param {string} userId - The user ID of the supposed owner.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @return {boolean} True if the user has an admin role, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a document with ID 'user123'.
     * @deny (create) - User with UID 'user123' cannot create a document with ID 'user456'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete the document with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user123' cannot get, update, or delete the document with ID 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId; // Self-creation only. Require correct ID on create.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Ownership and immutability of the ID.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin role assignment. Document existence determines admin role.
     * @path /roles_admin/{userId}
     * @allow (create) - User with UID 'admin123' can create a document with ID 'admin123' to grant themselves admin.
     * @deny (create) - User with UID 'user123' cannot create a document with ID 'admin456' to grant admin to another user.
     * @allow (get, delete) - Admin with UID 'admin123' can get and delete the document with ID 'admin123'.
     * @deny (get, delete) - User with UID 'user123' cannot get or delete the document with ID 'admin456'.
     * @principle Existence over content for authorization.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Admin role listing is not permitted

      allow create: if isSignedIn() && request.auth.uid == userId; // Self-assignment only.
      allow update: if false; // No updates allowed.
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}
     * @allow (create, get, list, update, delete) - Admin users can manage client documents.
     * @deny (create, get, list, update, delete) - Non-admin users cannot manage client documents.
     * @principle Admin-only access to client data.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Admin users can create documents under clients.
     * @deny (create) - Non-admin users cannot create documents under clients.
     * @allow (get, list, update, delete) - Admin users can manage documents for all clients.
     * @principle Path-based ownership under client, admin-only access.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - All users can read financial institution data.
     * @allow (create, update, delete) - Only admin users can modify financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for consortium product documents.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - All users can read consortium product data.
     * @allow (create, update, delete) - Only admin users can modify consortium product data.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - All users can read credit product data.
     * @allow (create, update, delete) - Only admin users can modify credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - All users can read product combo data.
     * @allow (create, update, delete) - Only admin users can modify product combo data.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Admins can read all sales proposals. Clients can read their own sales proposals.
     * @allow (create, update, delete) - Only admin users can modify sales proposal data.
     * @principle Authorization independence using denormalized clientId.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.clientId);
      allow list: if isAdmin(); // Listing only by admins for now

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for commission documents.
     * @path /commissions/{commissionId}
     * @allow (get, list, create, update, delete) - Only admin users can manage commission data.
     */
    match /commissions/{commissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get, list, create, update, delete) - Only admin users can manage quiz data.
     */
    match /quizzes/{quizId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for question documents.
     * @path /questions/{questionId}
     * @allow (get, list, create, update, delete) - Only admin users can manage question data.
     */
    match /questions/{questionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Rules for the products collection.  Fixes the "Missing or insufficient permissions" error.
      * @path /products
      * @allow (get, list) - All users can read product data.
      * @deny (create, update, delete) - No one can write to the products collection.
      */
    match /products {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}