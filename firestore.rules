/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset employs a strict data ownership model where users primarily have access only to their own data or data explicitly shared with them.
 * Authorization is enforced through a combination of path-based rules and denormalized fields within documents, avoiding costly `get()` operations.
 *
 * Data Structure:
 * - Users: `/users/{userId}` - Stores user profiles; access is limited to the authenticated user.
 * - Admins: `/roles_admin/{userId}` - Document existence grants admin privileges.
 * - Clients: `/clients/{clientId}` - Stores client profiles; potentially accessible to authorized personnel.
 * - Client Documents: `/clients/{clientId}/documents/{documentId}` - Documents associated with a specific client.
 * - Products: `/consortiums/{consortiumId}`, `/credit_products/{creditProductId}` - Publicly readable product catalogs.
 * - Product Combos: `/product_combos/{productComboId}` - Publicly readable product combinations.
 * - Sales Proposals: `/sales_proposals/{salesProposalId}` - Proposals linked to a specific client, with denormalized `clientId` for access control.
 * - Commissions: `/commissions/{commissionId}` - Commission records.
 * - Quizzes: `/quizzes/{quizId}` - Quiz data.
 * - Questions: `/questions/{questionId}` - Question data.
 *
 * Key Security Decisions:
 * - **No User Listing**: Listing all users is explicitly denied to prevent information harvesting.
 * - **Admin Role**: Admin privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 * - **Product Catalogs (Consortiums, Credit Products, Product Combos)**: Publicly readable but only modifiable by authorized personnel (TODO: Define authorized personnel).
 * - **Ambiguous Relationships**: In cases where the relationship between entities is not explicitly defined, the most secure interpretation (owner-only access) is applied.
 *
 * Denormalization for Authorization:
 * - `sales_proposals` include a `clientId` field to avoid needing to perform a `get()` operation on the `/clients/{clientId}` document to verify access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (create) Unauthorized user attempts to create a profile for another user.
     * @deny (list) Listing all users is prohibited.
     * @principle Enforces strict user-ownership: users can only manage their own data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin role based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) Any authenticated user can request admin role.
     * @allow (get, update, delete) Only the user themselves can manage their admin role request.
     * @deny (create) Unauthorized user attempts to create admin role for another user.
     * @deny (list) Listing all admin roles is prohibited.
     * @principle Existence of document grants admin access; enforces role-based access control.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to client data.
     * @path /clients/{clientId}
     * @allow (get, list) Allow anyone to view clients data.
     * @deny (create, update, delete) Only allow server to manage client.
     * @principle Limits client management to authorized sources.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) Clients can access their own documents
     * @deny (create, update, delete) Only owner client can manage their documents
     * @principle Enforces document ownership under a client's data tree.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }
      allow get, list: if request.auth.uid == clientId;
      allow create: if request.auth.uid == clientId && request.resource.data.clientId == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.clientId == resource.data.clientId;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Controls access to financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Allow anyone to view financial institutions data.
     * @deny (create, update, delete) Only allow server to manage financial institutions.
     * @principle Limits financial institution management to authorized sources.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Allow anyone to view consortiums data.
     * @deny (create, update, delete) Only allow server to manage consortiums.
     * @principle Limits consortiums management to authorized sources.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Allow anyone to view credit products data.
     * @deny (create, update, delete) Only allow server to manage credit products.
     * @principle Limits credit products management to authorized sources.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Allow anyone to view product combos data.
     * @deny (create, update, delete) Only allow server to manage product combos.
     * @principle Limits product combos management to authorized sources.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get) Anyone can get sales proposals data.
     * @allow (create, update, delete) Only owner client can manage their sales proposals.
     * @principle Enforces ownership and allows public read access.
     */
    match /sales_proposals/{salesProposalId} {
        function isOwner(clientId) {
            return request.auth.uid == clientId;
        }

        function isExistingOwner(clientId) {
            return isOwner(clientId) && resource != null;
        }

        allow get: if true;
        allow list: if false;
        allow create: if request.resource.data.clientId == request.auth.uid;
        allow update: if resource.data.clientId == request.auth.uid;
        allow delete: if resource.data.clientId == request.auth.uid;
    }

    /**
     * @description Controls access to commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) Allow anyone to view commissions data.
     * @deny (create, update, delete) Only allow server to manage commissions.
     * @principle Limits commissions management to authorized sources.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) Allow anyone to view quizzes data.
     * @deny (create, update, delete) Only allow server to manage quizzes.
     * @principle Limits quizzes management to authorized sources.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to question data.
     * @path /questions/{questionId}
     * @allow (get, list) Allow anyone to view questions data.
     * @deny (create, update, delete) Only allow server to manage questions.
     * @principle Limits questions management to authorized sources.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}