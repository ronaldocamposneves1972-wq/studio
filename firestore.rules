/**
 * @file Overview
 * This ruleset enforces a security model that prioritizes secure data access based on
 * authentication and role-based authorization. It allows authenticated users to list documents
 * from the system's collections without compromising security.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /roles_admin/{userId}: Indicates admin privileges; presence grants admin access.
 * - /clients/{clientId}: Stores client information; publicly listable by authenticated users.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only to the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data; publicly listable by authenticated users.
 * - /consortiums/{consortiumId}: Stores consortium product data; publicly listable by authenticated users.
 * - /credit_products/{creditProductId}: Stores credit product data; publicly listable by authenticated users.
 * - /product_combos/{productComboId}: Stores product combo data; publicly listable by authenticated users.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data; publicly listable by authenticated users.
 * - /commissions/{commissionId}: Stores commission data; publicly listable by authenticated users.
 * - /quizzes/{quizId}: Stores quiz data; publicly listable by authenticated users.
 * - /questions/{questionId}: Stores question data; publicly listable by authenticated users.
 *
 * Key Security Decisions:
 * - Authenticated users can list documents from all top-level collections.
 * - User-specific data is stored under `/users/{userId}` and is only accessible to that user.
 * - Admin privileges are determined by the existence of a document in `/roles_admin/{userId}`.
 * - Data is denormalized where necessary to avoid complex queries in security rules.
 *
 * Error Explanation:
 * The "Missing or insufficient permissions" error occurs when the security rules block a user's
 * request due to insufficient permissions.
 *
 * Possible Causes:
 * 1. The user is not authenticated.
 * 2. The user does not have the necessary role to access the data.
 * 3. The security rules are incorrectly configured, blocking legitimate requests.
 *
 * Step-by-step guide to fix the error:
 * 1. Ensure that the user is authenticated.
 * 2. Check the security rules to see if they are blocking the user's request.
 * 3. Modify the security rules to grant the user the necessary permissions.
 *
 * To allow authenticated users to list documents from all collections, we need to modify the
 * security rules to allow read access to all collections for authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the user themselves can read and write their profile.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and the request targets their own user ID (isOwner(userId)).
     * @deny (read, write) if the user is not signed in or the request targets a different user ID.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && (request.resource.data.id == resource.data.id);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Determines admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (read, write) if the user exists in the collection, granting admin access.
     * @deny (read, write) if the user does not exist, denying admin access.
     * @principle Existence over content - admin status based on document presence.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages client data.
     * @path /clients/{clientId}
     * @allow (read) to all authenticated users, allowing them to list and get client data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to client-uploaded documents. Only the associated client can read and write their documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (read, write) if the user is signed in and the request targets a document under their client ID (isOwner(clientId)).
     * @deny (read, write) if the user is not signed in or the request targets a different client ID.
     * @principle Enforces strict ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId) && (request.resource.data.clientId == clientId);
      allow update: if isOwner(clientId) && resource != null;
      allow delete: if isOwner(clientId) && resource != null;
    }

    /**
     * @description Manages financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (read) to all authenticated users, allowing them to list and get financial institution data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (read) to all authenticated users, allowing them to list and get consortium product data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /consortiums/{consortiumId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (read) to all authenticated users, allowing them to list and get credit product data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /credit_products/{creditProductId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages product combo data.
     * @path /product_combos/{productComboId}
     * @allow (read) to all authenticated users, allowing them to list and get product combo data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /product_combos/{productComboId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (read) to all authenticated users, allowing them to list and get sales proposal data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages commission data.
     * @path /commissions/{commissionId}
     * @allow (read) to all authenticated users, allowing them to list and get commission data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages quiz data.
     * @path /quizzes/{quizId}
     * @allow (read) to all authenticated users, allowing them to list and get quiz data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages question data.
     * @path /questions/{questionId}
     * @allow (read) to all authenticated users, allowing them to list and get question data.
     * @allow (create, update, delete) to no one, restricting modifications.
     * @principle Provides public read access but restricts writes.
     */
    match /questions/{questionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}