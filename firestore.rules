/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence by denormalizing data and using path-based ownership where feasible.
 * It enforces strict access control based on user authentication and roles.
 *
 * Data Structure:
 * The Firestore database is organized into collections for users, clients, financial institutions, products (consortiums and credit products),
 * product combos, sales proposals, commissions, quizzes, and questions.
 * User-specific data is stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 * - Data required for authorization is denormalized onto the secured documents.
 * - `list` operations are secured to prevent unauthorized data exposure.
 *
 * Authorization Independence:
 * The ruleset avoids using `get()` calls within security rules by denormalizing data. For instance, the `sales_proposals` collection includes a `clientId` field to enable authorization based on client ownership without additional reads.
 *
 * Segregation and Path-based Ownership:
 * The structure employs segregation and path-based ownership to ensure secure access to user-specific data. For example, user documents are stored under `/users/{userId}`, enabling rules that restrict access to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents based on path-based ownership.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own document with matching userId.
     * @allow (get, list, update, delete) - Authenticated user with matching userId can access their own document.
     * @deny (create) - Authenticated user tries to create a document with a different userId.
     * @deny (update, delete) - Authenticated user tries to modify/delete a document with a different userId or a non-existent document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //  Users collection: owner-only access
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId && resource != null;
    }

    /**
     * @description Allows access to admin role documents. Existence over Content. Authorization using /roles_admin/{uid}.
     * @path /roles_admin/{userId}
     * @allow (create) - Only an existing admin can create a new admin role document.
     * @allow (get, list, update, delete) - Only the user with the specified userId can access their own admin role document if it exists.
     * @deny (create) - Non-admins are denied the ability to create admin roles.
     * @deny (update, delete) - Authenticated user tries to modify/delete a different userId or a non-existent document.
     * @principle Restricts admin role creation and access to authorized users only.
     */
    match /roles_admin/{userId} {
      // Roles_admin collection: owner-only access
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
       allow get: if isSignedIn() && isOwner(userId);
       allow list: if false;
       allow create: if isSignedIn(); // Assuming any signed-in user can create.  Adjust this logic as needed.
       allow update: if false; // No updates allowed.
       allow delete: if isSignedIn() && isOwner(userId) && resource != null; // Deletion only by the owner
    }

    /**
     * @description Allows access to client documents. All authenticated users can list clients.
     * @path /clients/{clientId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage clients.
     */
    match /clients/{clientId} {
      // Clients collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage client documents.
     */
     match /clients/{clientId}/documents/{documentId} {
      // Documents collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }


    /**
     * @description Allows access to financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage financial institutions.
     */
    match /financial_institutions/{financialInstitutionId} {
      // Financial Institutions collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to consortium documents.
     * @path /consortiums/{consortiumId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage consortiums.
     */
    match /consortiums/{consortiumId} {
      // Consortiums collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage credit products.
     */
    match /credit_products/{creditProductId} {
      // Credit Products collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage product combos.
     */
    match /product_combos/{productComboId} {
      // Product Combos collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage sales proposals.
     */
    match /sales_proposals/{salesProposalId} {
      // Sales Proposals collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to commission documents.
     * @path /commissions/{commissionId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage commissions.
     */
    match /commissions/{commissionId} {
      // Commissions collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to quiz documents.
     * @path /quizzes/{quizId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage quizzes.
     */
    match /quizzes/{quizId} {
      // Quizzes collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to question documents.
     * @path /questions/{questionId}
     * @allow (create, get, list, update, delete) - Authenticated user can perform all operations.
     * @principle Allows authenticated users to manage questions.
     */
    match /questions/{questionId} {
      // Questions collection: Allow all authenticated users
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}