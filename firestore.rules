/**
 * @description This ruleset enforces a strict user-ownership model for client-related data,
 *              while allowing broader access to public product and bank information.
 *              Administrative privileges are determined by membership in the `/roles_admin` collection.
 * @dataStructure
 *              - /clients/{clientId}: Client profiles, accessible only by the client or admins.
 *              - /clients/{clientId}/quizzes/{quizId}: Quizzes owned by a specific client, accessible only by the client or admins.
 *              - /clients/{clientId}/documents/{documentId}: Documents owned by a specific client, accessible only by the client or admins.
 *              - /products/{productId}: Publicly readable product information, writeable only by admins.
 *              - /banks/{bankId}: Publicly readable bank information, writeable only by admins.
 *              - /clients/{clientId}/sales/{saleId}: Sales related to a client, accessible only by the client or admins.
 *              - /users/{userId}: User profiles, accessible only by the user themselves or admins.
 *              - /configuration/{configurationId}: Application-wide configurations, writeable only by admins.
 *              - /roles_admin/{userId}: Collection to store admin users.
 * @keySecurityDecisions
 *              - User listing is disabled.
 *              - Read-only collections (products, banks) are publicly readable but admin-writeable.
 *              - Data consistency between path and document fields is enforced for ownership.
 *              - Default security posture is strict: any ambiguous relationship defaults to owner-only access.
 * @denormalizationForAuthorization
 *              - The `clientId` is denormalized into the `quizzes` and `documents` subcollections to
 *                allow direct authorization checks without needing to fetch the parent `client` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages client profiles. Only the client themselves or an admin can read/write.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user creates their own client profile.
     * @allow (get, update, delete) - Authenticated user is the owner (clientId matches auth.uid).
     * @deny (create) - Unauthenticated user attempts to create a client profile.
     * @deny (update, delete) - Authenticated user attempts to modify a client profile they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow list: if false; // No listing of all clients.
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Manages quizzes associated with a client. Only the client themselves or an admin can read/write.
     * @path /clients/{clientId}/quizzes/{quizId}
     * @allow (create) - Authenticated user creates a quiz for their client profile.
     * @allow (get, update, delete) - Authenticated user is the owner (clientId matches auth.uid).
     * @deny (create) - Unauthenticated user attempts to create a quiz.
     * @deny (update, delete) - Authenticated user attempts to modify a quiz they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /clients/{clientId}/quizzes/{quizId} {
      allow get: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Manages documents uploaded by a client. Only the client themselves or an admin can read/write.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Authenticated user creates a document for their client profile.
     * @allow (get, update, delete) - Authenticated user is the owner (clientId matches auth.uid).
     * @deny (create) - Unauthenticated user attempts to create a document.
     * @deny (update, delete) - Authenticated user attempts to modify a document they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Manages product data. Publicly readable, but only admins can write.
     * @path /products/{productId}
     * @allow (get, list) - Anyone can read product data.
     * @allow (create, update, delete) - Only admins can modify product data.
     * @deny (create, update, delete) - Non-admins cannot modify product data.
     * @principle Public read access with admin-only writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages bank data. Publicly readable, but only admins can write.
     * @path /banks/{bankId}
     * @allow (get, list) - Anyone can read bank data.
     * @allow (create, update, delete) - Only admins can modify bank data.
     * @deny (create, update, delete) - Non-admins cannot modify bank data.
     * @principle Public read access with admin-only writes.
     */
    match /banks/{bankId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages sales data related to a client. Only the client themselves or an admin can read/write.
     * @path /clients/{clientId}/sales/{saleId}
     * @allow (create) - Authenticated user creates a sale for their client profile.
     * @allow (get, update, delete) - Authenticated user is the owner (clientId matches auth.uid).
     * @deny (create) - Unauthenticated user attempts to create a sale.
     * @deny (update, delete) - Authenticated user attempts to modify a sale they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /clients/{clientId}/sales/{saleId} {
      allow get: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow list: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Manages user profiles. Only the user themselves or an admin can read/write.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own user profile.
     * @allow (get, update, delete) - Authenticated user is the owner (userId matches auth.uid).
     * @deny (create) - Unauthenticated user attempts to create a user profile.
     * @deny (update, delete) - Authenticated user attempts to modify a user profile they don't own.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // No listing of all users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages application configuration data. Only admins can read/write.
     * @path /configuration/{configurationId}
     * @allow (get, list) - Only admins can read configuration data.
     * @allow (create, update, delete) - Only admins can modify configuration data.
     * @deny (create, update, delete) - Non-admins cannot modify configuration data.
     * @principle Admin-only access for configuration management.
     */
    match /configuration/{configurationId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

     /**
      * @description Only admin can read or write admin role
      * @path /roles_admin/{userId}
      * @allow (get) if the user is an admin
      * @allow (create) if the user is an admin
      */
    match /roles_admin/{userId} {
        allow get: if isSignedIn() && isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if false;
        allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the user is an admin.
      */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}