/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User-owned data (under /users/{userId}) is strictly controlled, while
 * other collections like /clients, /financial_institutions, and /products have more open access policies.
 *
 * Data Structure:
 * - /users/{userId}: Stores user-specific data. Only the user can read/write their own data.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}:  Stores client documents. Only the client can read/write their own documents.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data.
 * - /sales_orders/{salesOrderId}: Stores sales order data.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /suppliers/{supplierId}: Stores supplier data.
 * - /cost_centers/{costCenterId}: Stores cost center data.
 * - /expense_categories/{categoryId}: Stores expense category data.
 * - /whatsapp_templates/{templateId}: Stores WhatsApp message templates.
 * - /roles_admin/{userId}: if document exists it confers admin roles to the user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The /roles_admin collection grants admin privileges based on document existence.
 * - Read access to product and financial institution data is generally open.
 * - Path-based ownership is enforced for user data and client documents.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to avoid needing `get()` calls to the `clients` collection during authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of a document.
     * Useful for update and delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying their ID exists in the /roles_admin collection.
     */
     function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
     }

    /**
     * @description Rule for documents in the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @deny (create) User with ID 'user123' tries to create profile for 'user456'.
     * @allow (get) User with ID 'user123' retrieves their own profile.
     * @deny (get) User with ID 'user123' tries to retrieve profile for 'user456'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for documents in the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'admin123' is granted admin role.
     * @deny (create) Anonymous user tries to become admin.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (get) Any user can retrieve client data.
     * @deny (create) Anonymous user attempts to create a client profile.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Rule for documents in the /clients/{clientId}/documents/{documentId} collection.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) User with ID 'client123' creates a document under their client profile.
     * @deny (create) User with ID 'client123' tries to create a document under 'client456'.
     * @allow (get) User with ID 'client123' retrieves a document from their client profile.
     * @deny (get) User with ID 'client123' tries to retrieve a document from 'client456'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rule for documents in the /financial_institutions/{financialInstitutionId} collection.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get) Any user can retrieve financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /consortiums/{consortiumId} collection.
     * @path /consortiums/{consortiumId}
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /credit_products/{creditProductId} collection.
     * @path /credit_products/{creditProductId}
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /product_combos/{productComboId} collection.
     * @path /product_combos/{productComboId}
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /sales_proposals/{salesProposalId} collection.
     * @path /sales_proposals/{salesProposalId}
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Rule for documents in the /sales_orders/{salesOrderId} collection.
     * @path /sales_orders/{salesOrderId}
     */
    match /sales_orders/{salesOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /commissions/{commissionId} collection.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /quizzes/{quizId} collection.
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents in the /questions/{questionId} collection.
     * @path /questions/{questionId}
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Rule for documents in the /suppliers/{supplierId} collection.
      * @path /suppliers/{supplierId}
      */
     match /suppliers/{supplierId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }

     /**
      * @description Rule for documents in the /cost_centers/{costCenterId} collection.
      * @path /cost_centers/{costCenterId}
      */
     match /cost_centers/{costCenterId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }

     /**
      * @description Rule for documents in the /expense_categories/{categoryId} collection.
      * @path /expense_categories/{categoryId}
      */
     match /expense_categories/{categoryId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }

     /**
      * @description Rule for documents in the /whatsapp_templates/{templateId} collection.
      * @path /whatsapp_templates/{templateId}
      */
     match /whatsapp_templates/{templateId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }
  }
}