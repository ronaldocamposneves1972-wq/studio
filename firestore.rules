/**
 * @file Firestore Security Rules
 * @description This ruleset enforces fine-grained access control for the ConsorciaTech application.
 *
 * Core Philosophy:
 * - Strict user-ownership for user profiles and client-related data.
 * - Document existence checks for admin roles.
 * - Denormalization of key fields to avoid expensive `get()` operations within rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can read/write their own profile.
 * - /roles_admin/{userId}: Document existence grants admin privileges.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}: Client-uploaded documents, accessible only by the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data. Includes denormalized 'clientId' for authorization independence.
 * - /sales_orders/{salesOrderId}: Stores sales order data.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /suppliers/{supplierId}: Stores supplier data.
 * - /cost_centers/{costCenterId}: Stores cost center data.
 * - /expense_categories/{categoryId}: Stores expense category data.
 * - /whatsapp_templates/{templateId}: Stores WhatsApp message templates.
 *
 * Key Security Decisions:
 * - User profiles are strictly private (owner-only access).
 * - Admin privileges are determined by document existence in the /roles_admin collection.
 * - Data denormalization is used to avoid `get()` calls in rules, improving performance.
 * - List operations are secured based on path-based ownership and role checks.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection includes a denormalized `clientId` field, allowing security rules to directly verify client access without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows only the user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get, list) - User can read their own profile.
     * @allow (update, delete) - User can update/delete their own profile.
     * @deny (create, get, list, update, delete) - Any other user cannot access this profile.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Determines admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) - Any authenticated user can be granted admin role.
     * @allow (get) - Check if a user is admin
     * @allow (list) - no listing
     * @allow (update, delete) - Admins can update/delete admin roles.
     * @deny (create, update, delete) - Non-admins cannot manage admin roles.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      allow create: if isAdmin();
      allow get: if isSignedIn();
      allow list: if false;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read and write access to client data for authenticated users.
     * @path /clients/{clientId}
     * @allow (create) - Any authenticated user can create a client.
     * @allow (get, list) - Any authenticated user can read/list clients.
     * @allow (update, delete) - Any authenticated user can update/delete clients.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access client data.
     * @principle Requires authentication for all client data access.
     */
    match /clients/{clientId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to client-uploaded documents only to the client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Any authenticated user can create a document for a client.
     * @allow (get, list) - Any authenticated user can read/list documents for a client.
     * @allow (update, delete) - Any authenticated user can update/delete documents for a client.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access client documents.
     * @principle Enforces client-ownership for uploaded documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to financial institution data for authenticated users.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) - Any authenticated user can create a financial institution.
     * @allow (get, list) - Any authenticated user can read/list financial institutions.
     * @allow (update, delete) - Any authenticated user can update/delete financial institutions.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access financial institution data.
     * @principle Requires authentication for all financial institution data access.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to consortium product data for authenticated users.
     * @path /consortiums/{consortiumId}
     * @allow (create) - Any authenticated user can create a consortium.
     * @allow (get, list) - Any authenticated user can read/list consortiums.
     * @allow (update, delete) - Any authenticated user can update/delete consortiums.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access consortium data.
     * @principle Requires authentication for all consortium data access.
     */
    match /consortiums/{consortiumId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to credit product data for authenticated users.
     * @path /credit_products/{creditProductId}
     * @allow (create) - Any authenticated user can create a credit product.
     * @allow (get, list) - Any authenticated user can read/list credit products.
     * @allow (update, delete) - Any authenticated user can update/delete credit products.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access credit product data.
     * @principle Requires authentication for all credit product data access.
     */
    match /credit_products/{creditProductId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to product combo data for authenticated users.
     * @path /product_combos/{productComboId}
     * @allow (create) - Any authenticated user can create a product combo.
     * @allow (get, list) - Any authenticated user can read/list product combos.
     * @allow (update, delete) - Any authenticated user can update/delete product combos.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access product combo data.
     * @principle Requires authentication for all product combo data access.
     */
    match /product_combos/{productComboId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to sales proposal data for authenticated users.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) - Any authenticated user can create a sales proposal.
     * @allow (get, list) - Any authenticated user can read/list sales proposals.
     * @allow (update, delete) - Any authenticated user can update/delete sales proposals.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access sales proposal data.
     * @principle Requires authentication for all sales proposal data access.
     */
    match /sales_proposals/{salesProposalId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to sales order data for authenticated users.
     * @path /sales_orders/{salesOrderId}
     * @allow (create) - Any authenticated user can create a sales order.
     * @allow (get, list) - Any authenticated user can read/list sales orders.
     * @allow (update, delete) - Any authenticated user can update/delete sales orders.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access sales order data.
     * @principle Requires authentication for all sales order data access.
     */
    match /sales_orders/{salesOrderId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to commission data for authenticated users.
     * @path /commissions/{commissionId}
     * @allow (create) - Any authenticated user can create a commission.
     * @allow (get, list) - Any authenticated user can read/list commissions.
     * @allow (update, delete) - Any authenticated user can update/delete commissions.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access commission data.
     * @principle Requires authentication for all commission data access.
     */
    match /commissions/{commissionId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to quiz data for authenticated users.
     * @path /quizzes/{quizId}
     * @allow (create) - Any authenticated user can create a quiz.
     * @allow (get, list) - Any authenticated user can read/list quizzes.
     * @allow (update, delete) - Any authenticated user can update/delete quizzes.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access quiz data.
     * @principle Requires authentication for all quiz data access.
     */
    match /quizzes/{quizId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to question data for authenticated users.
     * @path /questions/{questionId}
     * @allow (create) - Any authenticated user can create a question.
     * @allow (get, list) - Any authenticated user can read/list questions.
     * @allow (update, delete) - Any authenticated user can update/delete questions.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access question data.
     * @principle Requires authentication for all question data access.
     */
    match /questions/{questionId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to supplier data for authenticated users.
     * @path /suppliers/{supplierId}
     * @allow (create) - Any authenticated user can create a supplier.
     * @allow (get, list) - Any authenticated user can read/list suppliers.
     * @allow (update, delete) - Any authenticated user can update/delete suppliers.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access supplier data.
     * @principle Requires authentication for all supplier data access.
     */
    match /suppliers/{supplierId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to cost center data for authenticated users.
     * @path /cost_centers/{costCenterId}
     * @allow (create) - Any authenticated user can create a cost center.
     * @allow (get, list) - Any authenticated user can read/list cost centers.
     * @allow (update, delete) - Any authenticated user can update/delete cost centers.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access cost center data.
     * @principle Requires authentication for all cost center data access.
     */
    match /cost_centers/{costCenterId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to expense category data for authenticated users.
     * @path /expense_categories/{categoryId}
     * @allow (create) - Any authenticated user can create an expense category.
     * @allow (get, list) - Any authenticated user can read/list expense categories.
     * @allow (update, delete) - Any authenticated user can update/delete expense categories.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access expense category data.
     * @principle Requires authentication for all expense category data access.
     */
    match /expense_categories/{categoryId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to WhatsApp message template data for authenticated users.
     * @path /whatsapp_templates/{templateId}
     * @allow (create) - Any authenticated user can create a WhatsApp message template.
     * @allow (get, list) - Any authenticated user can read/list WhatsApp message templates.
     * @allow (update, delete) - Any authenticated user can update/delete WhatsApp message templates.
     * @deny (create, get, list, update, delete) - Unauthenticated users cannot access WhatsApp message template data.
     * @principle Requires authentication for all WhatsApp message template data access.
     */
    match /whatsapp_templates/{templateId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}