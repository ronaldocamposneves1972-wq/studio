/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control based on path-based ownership
 * and authorization independence, leveraging data denormalization to avoid
 * costly `get()` operations. It errs on the side of caution, restricting
 * access unless explicitly allowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user.
 * - /roles_admin/{userId}: Document existence confers admin role, accessible only to admins.
 * - /clients/{clientId}: Stores client information, publicly readable, writable by anyone.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only to the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institutions, publicly readable, writable by anyone.
 * - /consortiums/{consortiumId}: Stores consortium products, publicly readable, writable by anyone.
 * - /credit_products/{creditProductId}: Stores credit products, publicly readable, writable by anyone.
 * - /product_combos/{productComboId}: Stores product combos, publicly readable, writable by anyone.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals, publicly readable, writable by anyone.
 * - /commissions/{commissionId}: Stores commissions, publicly readable, writable by anyone.
 * - /quizzes/{quizId}: Stores quizzes, publicly readable by anyone, writable by admins.
 * - /questions/{questionId}: Stores questions, publicly readable by anyone, writable by admins.
 *
 * Key Security Decisions:
 * - Data validation is relaxed in this prototyping phase, focusing on ownership and existence checks.
 * - `list` operations are generally allowed for owner-scoped data and public collections.
 * - Data denormalization is used to avoid `get()` calls in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces user-ownership: only the authenticated user can access their own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages admin roles. Document existence confers admin role.
     * @path /roles_admin/{userId}
     * @allow (create, delete) if isAdmin()
     * @deny (create, delete) if !isAdmin()
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return true;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages client information.
     * @path /clients/{clientId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to all authenticated users.
     * @principle Public read, authenticated write.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages documents uploaded by clients. Only the client can access their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, update, delete) if request.auth.uid == clientId
     * @deny (create, update, delete) if request.auth.uid != clientId
     * @principle Enforces path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isClient(clientId) {
        return request.auth.uid == clientId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isClient(clientId);
      allow list: if false;
      allow create: if isSignedIn() && isClient(clientId);
      allow update: if isSignedIn() && isClient(clientId);
      allow delete: if isSignedIn() && isClient(clientId);
    }

    /**
     * @description Manages financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to all authenticated users.
     * @principle Public read, authenticated write.
     */
    match /financial_institutions/{financialInstitutionId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to all authenticated users.
     * @principle Public read, authenticated write.
     */
    match /consortiums/{consortiumId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to all authenticated users.
     * @principle Public read, authenticated write.
     */
    match /credit_products/{creditProductId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to all authenticated users.
     * @principle Public read, authenticated write.
     */
    match /product_combos/{productComboId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to all authenticated users.
     * @principle Public read, authenticated write.
     */
    match /sales_proposals/{salesProposalId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) to all authenticated users.
     * @principle Public read, authenticated write.
     */
    match /commissions/{commissionId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

   /**
     * @description Manages quiz data. Only admins can create, update, and delete quizzes.
     * @path /quizzes/{quizId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @principle Public read, admin write.
     */
    match /quizzes/{quizId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return true;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages question data. Only admins can create, update, and delete questions.
     * @path /questions/{questionId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @principle Public read, admin write.
     */
    match /questions/{questionId} {
      function isAdmin() {
        // TODO: Implement proper admin role check (e.g., via custom claims)
        return true;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}