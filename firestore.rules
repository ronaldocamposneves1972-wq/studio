/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * - User-specific data is protected by path-based ownership (`/users/{userId}`).
 * - Administrative access is granted based on the existence of a document in `/roles_admin/{userId}`.
 * - Some collections have public read access but are secured by owner-only writes (e.g., `/quizzes`).
 * - Data required for authorization decisions is denormalized onto documents to avoid costly `get()` calls.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores personal user information.
 * - `/roles_admin/{userId}`: Presence indicates admin status for user.
 * - `/clients/{clientId}`: Stores client information.
 * - `/clients/{clientId}/documents/{documentId}`: Stores client documents, with path-based client ownership.
 * - `/financial_institutions/{financialInstitutionId}`: Stores financial institutions.
 * - `/consortiums/{consortiumId}`: Stores consortium products.
 * - `/credit_products/{creditProductId}`: Stores credit products.
 * - `/product_combos/{productComboId}`: Stores combinations of products.
 * - `/sales_proposals/{salesProposalId}`: Stores sales proposals, denormalizing `clientId` for direct access control.
 * - `/sales_orders/{salesOrderId}`: Stores sales orders.
 * - `/commissions/{commissionId}`: Stores commission data.
 * - `/quizzes/{quizId}`: Stores quiz data.
 * - `/questions/{questionId}`: Stores question data.
 * - `/suppliers/{supplierId}`: Stores supplier data.
 * - `/cost_centers/{costCenterId}`: Stores cost center data.
 * - `/expense_categories/{categoryId}`: Stores expense category data.
 * - `/whatsapp_templates/{templateId}`: Stores WhatsApp message templates.
 *
 * Key Security Decisions:
 * - Only the owner can read/write their user document.
 * - Listing of users is disallowed.
 * - Admin role is checked by document existence in `/roles_admin/{userId}`.
 * - Public read access for `/quizzes`, but owner-only writes enforced by checking `request.auth.uid`.
 * - Sales proposals denormalize `clientId` for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that only authenticated users can access certain resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces that a user can only access their own data.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that a user can only update or delete their own existing data.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by verifying the existence of an admin role document.
     * @path N/A
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Allows the creation of a document if the authenticated user's ID matches the document ID.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates a document at /users/user123.
     * @deny (create) User with ID 'user456' attempts to create a document at /users/user123.
     * @principle Allows a user to create their own user document.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows admins to manage other admins.
     * @path /roles_admin/{userId}
     * @allow (create) Admin creates a new admin role.
     * @deny (create) Non-admin attempts to create an admin role.
     * @principle Enforces that only admins can manage admin roles.
     */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false; // No updates allowed, only creation/deletion for admin status.
        allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to clients and write access for authenticated users.
     * @path /clients/{clientId}
     * @allow (get) Any authenticated user can read client data.
     * @allow (create) Any authenticated user can create client data.
     * @deny (create) Unauthenticated user attempts to create client data.
     * @principle Allows any authenticated user to create client profiles.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin(); // Only admins can update client data.
      allow delete: if isAdmin(); // Only admins can delete client data.
    }

    /**
     * @description Allows clients to manage their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) Client 'client123' creates a document at /clients/client123/documents/doc123.
     * @deny (create) Client 'client456' attempts to create a document at /clients/client123/documents/doc123.
     * @principle Enforces that a client can only manage their own documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin(); // Only admins can update client documents
      allow delete: if isAdmin(); // Only admins can delete client documents
    }

    /**
     * @description Allows read access to financial institutions and write access for admins.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get) Any authenticated user can read financial institution data.
     * @deny (create) Non-admin attempts to create financial institution data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to consortium products and write access for admins.
     * @path /consortiums/{consortiumId}
     * @allow (get) Any authenticated user can read consortium product data.
     * @deny (create) Non-admin attempts to create consortium product data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /consortiums/{consortiumId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to credit products and write access for admins.
     * @path /credit_products/{creditProductId}
     * @allow (get) Any authenticated user can read credit product data.
     * @deny (create) Non-admin attempts to create credit product data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /credit_products/{creditProductId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to product combos and write access for admins.
     * @path /product_combos/{productComboId}
     * @allow (get) Any authenticated user can read product combo data.
     * @deny (create) Non-admin attempts to create product combo data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /product_combos/{productComboId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows sales proposal management. Read access for all authenticated users, write access for admins.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get) Any authenticated user can read sales proposal data.
     * @deny (create) Non-admin attempts to create sales proposal data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows sales order management. Read access for all authenticated users, write access for admins.
     * @path /sales_orders/{salesOrderId}
     * @allow (get) Any authenticated user can read sales order data.
     * @deny (create) Non-admin attempts to create sales order data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows commission management. Read access for all authenticated users, write access for admins.
     * @path /commissions/{commissionId}
     * @allow (get) Any authenticated user can read commission data.
     * @deny (create) Non-admin attempts to create commission data.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to quizzes and write access for admins.
     * @path /quizzes/{quizId}
     * @allow (get) Any authenticated user can read quiz data.
     * @deny (create) Non-admin attempts to create quiz data.
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to questions and write access for admins.
     * @path /questions/{questionId}
     * @allow (get) Any authenticated user can read question data.
     * @deny (create) Non-admin attempts to create question data.
     */
    match /questions/{questionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to suppliers and write access for admins.
     * @path /suppliers/{supplierId}
     * @allow (get) Any authenticated user can read supplier data.
     */
    match /suppliers/{supplierId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to cost centers and write access for admins.
     * @path /cost_centers/{costCenterId}
     * @allow (get) Any authenticated user can read cost center data.
     */
    match /cost_centers/{costCenterId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to expense categories and write access for admins.
     * @path /expense_categories/{categoryId}
     * @allow (get) Any authenticated user can read expense category data.
     */
    match /expense_categories/{categoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to WhatsApp message templates and write access for admins.
     * @path /whatsapp_templates/{templateId}
     * @allow (get) Any authenticated user can read WhatsApp message template data.
     */
    match /whatsapp_templates/{templateId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}