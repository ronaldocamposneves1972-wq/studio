/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access control,
 * leveraging path-based authorization and data denormalization to avoid costly `get()` calls.
 * The rules are structured to prevent unauthorized data access and modification,
 * while allowing for scalable and maintainable access control logic.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /roles_admin/{userId}: Admin role, determined by document existence.
 * - /clients/{clientId}: Client data, potentially accessible by authorized users.
 * - /clients/{clientId}/documents/{documentId}: Documents uploaded by clients, owned by the respective client.
 * - /financial_institutions/{financialInstitutionId}: Financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Credit product data, publicly readable.
 * - /product_combos/{productComboId}: Product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Sales proposal data, access controlled by the denormalized clientId.
 * - /commissions/{commissionId}: Commission data, potentially restricted to authorized users.
 * - /quizzes/{quizId}: Quiz data, potentially restricted to authorized users.
 * - /questions/{questionId}: Question data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to prevent information leakage.
 * - Public read access is granted to product catalogs and questions to enable open discovery.
 * - Data denormalization is used in sales_proposals (clientId) for authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write) if the user is the owner of the profile (userId matches request.auth.uid).
     * @deny (read, write) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Function to check if the request is from the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) if the user ID in the path matches the authenticated user ID (self-creation).
     * @allow (read, write) if the document exists (admin role is assigned).
     * @deny (read, write) if the user is not an admin.
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      // Function to check if the user is an admin based on document existence.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to client data.
     * @path /clients/{clientId}
     * @allow (read, write) if the user is an admin or has specific client access (to be defined).
     * @deny (read, write) if the user is not authorized.
     */
    match /clients/{clientId} {
      // Function to check if the user is an admin based on document existence.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && isSignedIn(); // TODO: Define create permissions based on business logic
      allow update: if isAdmin() && isSignedIn();
      allow delete: if isAdmin() && isSignedIn();
    }

    /**
     * @description Controls access to documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (read, write) if the user is an admin or the client who owns the document.
     * @deny (read, write) if the user is not authorized.
     * @principle Path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      // Function to check if the user is an admin based on document existence.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isAdmin();
      allow list: if false; // It doesn't make sense to list a subcollection from client side without knowing the clientId
      allow create: if isAdmin() && isSignedIn();
      allow update: if isAdmin() && isSignedIn();
      allow delete: if isAdmin() && isSignedIn();
    }

    /**
     * @description Controls access to financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (read) to everyone.
     * @deny (write) to everyone.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (read) to everyone.
     * @deny (write) to everyone.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (read) to everyone.
     * @deny (write) to everyone.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to product combo data.
     * @path /product_combos/{productComboId}
     * @allow (read) to everyone.
     * @deny (write) to everyone.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (read, write) if the user is an admin or the client associated with the proposal.
     * @deny (read, write) if the user is not authorized.
     * @principle Data is denormalized where needed to avoid `get()` calls in security rules.
     */
    match /sales_proposals/{salesProposalId} {
      // Function to check if the user is an admin based on document existence.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && isSignedIn();
      allow update: if isAdmin() && isSignedIn();
      allow delete: if isAdmin() && isSignedIn();
    }

    /**
     * @description Controls access to commission data.
     * @path /commissions/{commissionId}
     * @allow (read, write) if the user is an admin or has specific commission access (to be defined).
     * @deny (read, write) if the user is not authorized.
     */
    match /commissions/{commissionId} {
      // Function to check if the user is an admin based on document existence.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && isSignedIn();
      allow update: if isAdmin() && isSignedIn();
      allow delete: if isAdmin() && isSignedIn();
    }

    /**
     * @description Controls access to quiz data.
     * @path /quizzes/{quizId}
     * @allow (read, write) if the user is an admin or has specific quiz access (to be defined).
     * @deny (read, write) if the user is not authorized.
     */
    match /quizzes/{quizId} {
      // Function to check if the user is an admin based on document existence.
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && isSignedIn();
      allow update: if isAdmin() && isSignedIn();
      allow delete: if isAdmin() && isSignedIn();
    }

    /**
     * @description Controls access to question data.
     * @path /questions/{questionId}
     * @allow (read) to everyone.
     * @deny (write) to everyone.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to products listing.
     * @path /products
     * @allow (list) to everyone.
     */
    match /products {
      allow list: if true;
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}