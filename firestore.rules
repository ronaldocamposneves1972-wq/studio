/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-based access control model.
 * It focuses on explicit authorization checks and prevents unauthorized data access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only to the owner.
 * - /roles_admin/{userId}: Indicates admin status. Existence grants admin privileges.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Client-owned documents.
 * - /financial_institutions/{financialInstitutionId}: Financial institution data.
 * - /consortiums/{consortiumId}: Consortium product data.
 * - /credit_products/{creditProductId}: Credit product data.
 * - /product_combos/{productComboId}: Combinations of financial products.
 * - /sales_proposals/{salesProposalId}: Sales proposal data. Includes denormalized 'clientId' for authorization.
 * - /commissions/{commissionId}: Commission data.
 * - /quizzes/{quizId}: Quiz data.
 * - /questions/{questionId}: Question data.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId} and /clients/{clientId}/documents/{documentId}.
 * - Admin role determined by document existence in /roles_admin/{userId}.
 * - Read access to top-level collections (financial_institutions, consortiums, credit_products, product_combos, quizzes, questions) is public.
 * - Sales proposals include a denormalized 'clientId' to allow efficient authorization.
 * - Listing of documents is generally allowed only for owners of user-scoped collections.
 *
 * Denormalization for Authorization:
 * - Sales proposals include a denormalized 'clientId' to avoid needing to perform a `get()` on the `/clients/{clientId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profiles based on ownership.
     * @path /users/{userId}
     * @allow (create, get, update, delete, list) if the user is the owner (userId matches request.auth.uid).
     * @deny (create, get, update, delete, list) if the user is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants admin role based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create, get, update, delete) if the user is signed in.
     * @deny (create, get, update, delete) if the user is not signed in.
     * @principle Document existence determines admin role.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows access to client profiles.
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows access to documents uploaded by clients, based on client ownership.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, get, update, delete, list) if the client is the owner (clientId matches the path).
     * @deny (create, get, update, delete, list) if the client is not the owner.
     * @principle Enforces document ownership for writes and restricts access to a client's own documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isOwner(clientId);
      allow delete: if isSignedIn() && isOwner(clientId);
    }

    /**
     * @description Allows public read access to financial institutions.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone (only backend can modify).
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to consortium products.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone (only backend can modify).
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to credit products.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone (only backend can modify).
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product combos.
     * @path /product_combos/{productComboId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone (only backend can modify).
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to sales proposals.  Includes denormalized 'clientId' for authorization independence.
     * @path /sales_proposals/{salesProposalId}
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows access to commissions data.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read access to quizzes.
     * @path /quizzes/{quizId}
     * @allow (get, list) to everyone.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to questions.
     * @path /questions/{questionId}
     * @allow (get, list) to everyone.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}