rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows any user to read quizzes, but restricts write access.
     * @path /quizzes/{quizId}
     * @allow (get, list): Any user can read quiz data.
     * @deny (create, update, delete): No user can create, update, or delete quiz data.
     * @principle Allows public read access while restricting write access.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any user to create client documents, but restricts read, update, and delete access.
     * @path /clients/{clientId}
     * @allow (create): Any user can submit client data (e.g., quiz responses).
     * @deny (get, list, update, delete): No user can read, update, or delete client data.
     * @principle Allows public write access (create only) while restricting all other access.
     */
    match /clients/{clientId} {
      allow create: if true;
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, update, delete): User can get, update, and delete their own user document.
     * @allow (create): User can create their own user document if the userId matches their auth UID.
     * @deny (get, update, delete): User cannot get, update, or delete other user documents.
     * @deny (list): Listing users is not allowed.
     * @principle Enforces document ownership for reads and writes, and prevents listing of user documents.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own sales data.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, list, create, update, delete): User can manage their own sales data under their user document.
     * @deny (get, list, create, update, delete): User cannot manage sales data for other users.
     * @principle Enforces document ownership for sales data nested under user documents.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows read-only access to product information. Write access should be role-based (e.g., Admin, Gestor).
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @deny (create, update, delete): No user can create, update, or delete product information without proper roles.
     * @principle Allows public read access, but restricts write access.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read-only access to bank information. Write access should be role-based (e.g., Admin, Gestor, Financeiro).
     * @path /banks/{bankId}
     * @allow (get, list): Any user can read bank information.
     * @deny (create, update, delete): No user can create, update, or delete bank information without proper roles.
     * @principle Allows public read access, but restricts write access.
     */
    match /banks/{bankId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to webhook configurations to administrators.
     * @path /webhooks/{webhookId}
     * @allow (get, list, create, update, delete): Only administrators can manage webhook configurations.
     * @deny (get, list, create, update, delete): Non-administrators cannot access webhook configurations.
     * @principle Enforces admin-only access to webhook configurations.
     */
    match /webhooks/{webhookId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Determines admin status based on the existence of a document in the `/roles_admin/{userId}` collection.
     * @path /roles_admin/{userId}
     * @allow (get, list, create, update, delete): Only the user themselves can manage their admin role.
     * @principle Enforces user-ownership for managing admin role status.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}