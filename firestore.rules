/**
 * @fileoverview Firestore Security Rules for Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and role-based access control for shared data.  It assumes the absence of
 * a complex role system, except for admin privileges.  All potentially public
 * collections default to public read, owner-only write, pattern where possible.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data associated with a specific user.
 * - /clients/{clientId}: Client information, accessible by users with appropriate roles.
 * - /products/{productId}: Product information (Consórcio and Crédito).
 * - /banks/{bankId}: Bank information.
 * - /quizzes/{quizId}: Quiz configurations.
 * - /webhooks/{webhookId}: Webhook configurations, accessible by admins only.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and sales records.
 * - Listing of user documents is disallowed for non-admins.
 * - Admins have full access to all data (this is enabled by creating a document
 *   in the `/roles_admin/{userId}` collection).
 * - Public read access is granted to the /quizzes collection, with owner-only writes.
 *
 * Denormalization for Authorization:
 *  - Admin status is determined by the existence of a document in `/roles_admin/{userId}`.
 *  - Documents in the sales collection contain the userId to allow checking ownership
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and it exists.
     * @param {string} userId The user ID to check against the request.auth.uid.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin privileges.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get,update,delete) Signed-in user reads/updates/deletes their own profile.
     * @allow (get) Admin can get any user profile.
     * @deny (list) Non-admins cannot list users.
     * @deny (create,update,delete) Non-owners cannot modify user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/sales/{saleId} collection.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) Signed-in user creates a sale under their profile.
     * @allow (get,update,delete) Signed-in user reads/updates/deletes their own sales.
     * @allow (get) Admin can get any sale.
     * @deny (list) Non-owners cannot list sales.
     * @deny (create,update,delete) Non-owners cannot modify sales.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (get,list) Anyone can read client data.
     * @allow (create,update,delete) Admins can create, update and delete client data.
     * @deny (create,update,delete) Non-admins cannot modify client data.
     * @principle Allows public read with admin-only writes.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get,list) Anyone can read product data.
     * @allow (create,update,delete) Admins can create, update and delete product data.
     * @deny (create,update,delete) Non-admins cannot modify product data.
     * @principle Allows public read with admin-only writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /banks/{bankId} collection.
     * @path /banks/{bankId}
     * @allow (get,list) Anyone can read bank data.
     * @allow (create,update,delete) Admins can create, update and delete bank data.
     * @deny (create,update,delete) Non-admins cannot modify bank data.
     * @principle Allows public read with admin-only writes.
     */
    match /banks/{bankId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

   /**
     * @description Rules for the /quizzes/{quizId} collection.
     * @path /quizzes/{quizId}
     * @allow (get,list) Anyone can read quiz data.
     * @allow (create,update,delete) Admins can create, update and delete quiz data.
     * @deny (create,update,delete) Non-admins cannot modify quiz data.
     */
    match /quizzes/{quizId} {
        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the /webhooks/{webhookId} collection.
     * @path /webhooks/{webhookId}
     * @allow (get,list) Only admins can read webhook data.
     * @allow (create,update,delete) Only admins can create, update and delete webhook data.
     * @deny (create,update,delete) Non-admins cannot modify webhook data.
     * @principle Restricts access to admins only.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for the /roles_admin/{userId} collection.
      * @path /roles_admin/{userId}
      */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false; // No need to list admins
        allow create: if isSignedIn() && isOwner(userId) && request.auth.token.email_verified == true;
        allow update: if false; // Admin role should not be updatable
        allow delete: if isExistingOwner(userId) || isAdmin();
    }
  }
}