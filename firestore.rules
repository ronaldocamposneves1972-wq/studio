/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data ownership, enforcing strict
 * access controls for all data entities. It uses a combination of path-based
 * ownership and denormalization to ensure efficient and secure data access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the
 *   authenticated user with a matching UID.
 * - /roles_admin/{userId}: Used to define admin users. Document existence
 *   confers admin privileges.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents.
 *   Only the client and potentially admins can access these documents.
 * - /financial_institutions/{financialInstitutionId}: Stores data for financial
 *   institutions.
 * - /consortiums/{consortiumId}: Stores consortium product information.
 * - /credit_products/{creditProductId}: Stores credit product information.
 * - /product_combos/{productComboId}: Stores combinations of financial products.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals. Includes
 *   denormalized clientId for authorization independence.
 * - /sales_orders/{salesOrderId}: Stores sales orders.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /suppliers/{supplierId}: Stores supplier data.
 * - /cost_centers/{costCenterId}: Stores cost center data.
 * - /expense_categories/{categoryId}: Stores expense category data.
 * - /whatsapp_templates/{templateId}: Stores WhatsApp message templates.
 *
 * Key Security Decisions:
 * - User data is strictly private, accessible only to the authenticated user.
 * - Admin privileges are granted based on document existence in
 *   `/roles_admin/{userId}`.
 * - Data essential for authorization is denormalized to avoid costly `get()`
 *   calls.
 * - `list` operations are secured based on path-based ownership or admin
 *   roles. Public `list` is disallowed for private data.
 *
 * Denormalization for Authorization:
 * - SalesProposal documents include a denormalized `clientId` field, allowing
 *   rules to quickly verify client access without additional reads.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, ensuring it is
 *   isolated from public collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own user data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their own document.
     * @deny (create) User cannot create a document with a mismatched UID.
     * @deny (get, update, delete) User cannot read, update, or delete another user's document.
     * @principle Enforces strict user-ownership for user profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (get) Any authenticated user can check for admin status.
     * @allow (create) Only a system process can create admin roles. // TODO: Limit to server-side only
     * @deny (create, update, delete) Non-admins cannot create, update, or delete admin roles.
     * @principle Uses document existence to confer admin privileges.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; // TODO: Limit to server-side only.
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of client data.
     * @path /clients/{clientId}
     * @allow (get, list) Allow anyone to read clients.
     * @allow (create) Allow anyone to create clients.
     * @allow (update, delete) No updates or deletes allowed.
     * @principle Protects client data, only allowing read.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows clients to manage their own uploaded documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) Client can create documents under their own ID.
     * @allow (get, list) Client can read documents under their own ID.
     * @allow (update, delete) Client can update and delete their own documents.
     * @deny (create, get, list, update, delete) Clients cannot access documents under another client's ID.
     * @principle Enforces client-ownership for uploaded documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
      function isExistingOwner(clientId) {
        return isOwner(clientId) && exists(resource);
      }
      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Allows management of financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Allow anyone to read financial institutions.
     * @allow (create) Allow anyone to create financial institutions.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Allow anyone to read consortiums.
     * @allow (create) Allow anyone to create consortiums.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Allow anyone to read credit products.
     * @allow (create) Allow anyone to create credit products.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Allow anyone to read product combos.
     * @allow (create) Allow anyone to create product combos.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) Allow anyone to read sales proposals.
     * @allow (create) Allow anyone to create sales proposals.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
     /**
     * @description Allows management of sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) Allow anyone to read sales orders.
     * @allow (create) Allow anyone to create sales orders.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) Allow anyone to read commissions.
     * @allow (create) Allow anyone to create commissions.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) Allow anyone to read quizzes.
     * @allow (create) Allow anyone to create quizzes.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows management of question data.
     * @path /questions/{questionId}
     * @allow (get, list) Allow anyone to read questions.
     * @allow (create) Allow anyone to create questions.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    /**
     * @description Allows management of supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Allow anyone to read suppliers.
     * @allow (create) Allow anyone to create suppliers.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /suppliers/{supplierId} {
       allow get, list: if true;
       allow create: if true;
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }
    
    /**
     * @description Allows management of cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) Allow anyone to read cost centers.
     * @allow (create) Allow anyone to create cost centers.
     * @allow (update, delete) No updates or deletes allowed.
     */
     match /cost_centers/{costCenterId} {
        allow get, list: if true;
        allow create: if true;
        allow update: if isAdmin();
        allow delete: if isAdmin();
     }
    
    /**
     * @description Allows management of expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) Allow anyone to read expense categories.
     * @allow (create) Allow anyone to create expense categories.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /expense_categories/{categoryId} {
       allow get, list: if true;
       allow create: if true;
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

    /**
     * @description Allows management of WhatsApp message template data.
     * @path /whatsapp_templates/{templateId}
     * @allow (get, list) Allow anyone to read message templates.
     * @allow (create) Allow anyone to create message templates.
     * @allow (update, delete) No updates or deletes allowed.
     */
    match /whatsapp_templates/{templateId} {
        allow get, list: if true;
        allow create: if true;
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}