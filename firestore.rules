/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict data ownership model based on user and client IDs,
 * with some data exposed publicly. Authorization decisions are made independently
 * whenever possible by denormalizing relevant data directly into documents, avoiding
 * costly and complex `get()` calls within the rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only by the user themselves.
 * - /roles_admin/{userId}: Document existence grants admin role.
 * - /clients/{clientId}: Stores client information, potentially accessible by
 *   internal users with appropriate roles (not yet implemented).
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only
 *   by the client and potentially internal users.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data,
 *   publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals, accessible by the associated client.
 * - /commissions/{commissionId}: Stores commission data, access restricted.
 * - /quizzes/{quizId}: Stores quiz data, publicly readable.
 * - /questions/{questionId}: Stores question data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted to product catalogs and quiz questions.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Roles are determined by document existence in `/roles_admin/{userId}`.
 *
 * Denormalization for Authorization:
 * - SalesProposals: The `clientId` is duplicated in the `sales_proposals` collection
 *   to allow for direct authorization checks without needing to query the `clients` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-only access to their own user document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own document at /users/user_abc if the document's id is also 'user_abc'.
     * @allow (get, update, delete, list) - User with UID 'user_abc' can get, update, or delete their own document at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a document at /users/user_xyz.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the document at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants admin role based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) - User with UID 'user_abc' can create a role document at /roles_admin/user_abc to grant themselves admin privileges.
     * @allow (get) - User with UID 'user_abc' can read their admin role status.
     * @deny (create, update, delete) - Only authenticated users can create admin roles.
     * @principle Uses document existence to grant admin privileges.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to client documents.
     * @path /clients/{clientId}
     * @allow (get, list) - Anyone can get or list client documents.
     * @deny (create, update, delete) - No one can create, update, or delete client documents.
     * @principle Restricts modification of client records.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces client-ownership for documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Client with UID 'client_abc' can create a document at /clients/client_abc/documents/doc_1 if the document's clientId is also 'client_abc'.
     * @allow (get, update, delete, list) - Client with UID 'client_abc' can get, update, or delete their own document at /clients/client_abc/documents/doc_1.
     * @deny (create) - Client with UID 'client_abc' cannot create a document at /clients/client_xyz/documents/doc_1.
     * @deny (get, update, delete) - Client with UID 'client_xyz' cannot get, update, or delete the document at /clients/client_abc/documents/doc_1.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
       allow get: if isOwner(clientId);
       allow list: if isOwner(clientId);
       allow create: if isOwner(clientId) && request.resource.data.clientId == clientId;
       allow update: if isOwner(clientId) && resource.data.clientId == request.resource.data.clientId && resource != null;
       allow delete: if isOwner(clientId) && resource != null;
    }

    /**
     * @description Allows public read access to financial institutions.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Anyone can read financial institution data.
     * @deny (create, update, delete) - No one can create, update, or delete financial institution data.
     * @principle Provides public access to financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to consortium products.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Anyone can read consortium product data.
     * @deny (create, update, delete) - No one can create, update, or delete consortium product data.
     * @principle Provides public access to consortium product data.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to credit products.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Anyone can read credit product data.
     * @deny (create, update, delete) - No one can create, update, or delete credit product data.
     * @principle Provides public access to credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to product combos.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Anyone can read product combo data.
     * @deny (create, update, delete) - No one can create, update, or delete product combo data.
     * @principle Provides public access to product combo data.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces client-ownership for sales proposals.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Anyone can get or list sales proposals.
     * @deny (create, update, delete) - No one can create, update, or delete sales proposals.
     * @principle Enforces document ownership for all operations.
     */
    match /sales_proposals/{salesProposalId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Restricts access to commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Anyone can get or list commission data.
     * @deny (create, update, delete) - No one can create, update, or delete commission data.
     * @principle Restricts access to commission data.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Anyone can read quiz data.
     * @deny (create, update, delete) - No one can create, update, or delete quiz data.
     * @principle Provides public access to quiz data.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to question data.
     * @path /questions/{questionId}
     * @allow (get, list) - Anyone can read question data.
     * @deny (create, update, delete) - No one can create, update, or delete question data.
     * @principle Provides public access to question data.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}