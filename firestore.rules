/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on ownership and role-based access control.
 * It avoids complex queries within rules by denormalizing authorization-relevant data directly
 * into documents. This approach enhances both security and performance.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user themselves.
 * - /roles_admin/{userId}: Document existence grants admin privileges to the user.
 * - /clients/{clientId}: Client profiles, accessible by authorized roles (e.g., admin, gestor).
 * - /clients/{clientId}/documents/{documentId}: Documents uploaded by clients, accessible only by the client.
 * - Other top-level collections: Publicly readable but writable only by authorized roles (e.g., admin, gestor).
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - The `roles_admin` collection grants admin privileges based on document existence.
 * - The rules explicitly deny any write operations that aren't explicitly allowed.
 *
 * Denormalization for Authorization:
 * - `sales_proposals` include a denormalized `clientId` field for efficient authorization.
 *
 * Structural Segregation:
 * - User-specific data is stored under `/users/{userId}` to enforce strict ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource's userId, and that the resource exists.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges, determined by the existence of a document in `/roles_admin/{userId}`.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update, delete) - A user cannot modify or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) - Any authenticated user can request admin role, but backend cloud function sets document.
     * @allow (get) - Anyone can check for an admin role.
     * @deny (list, update, delete) - Listing, updating and deleting is denied. Only backend cloud functions can update or delete.
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for clients.
     * @path /clients/{clientId}
     * @allow (get, list) - Anyone can read client data.
     * @allow (create, update, delete) - Only admins can create, update, or delete client data.
     * @deny (create, update, delete) - Non-admins cannot modify client data.
     * @principle Requires admin privileges for write operations.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) - Anyone can read uploaded client documents.
     * @allow (create) - Only admins can create client documents.
     * @allow (update, delete) - Only admins can update or delete client documents.
     * @deny (create, update, delete) - Non-admins cannot modify or delete client documents.
     * @principle Enforces path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for financial institutions.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Anyone can read financial institution data.
     * @allow (create, update, delete) - Only admins can create, update, or delete financial institution data.
     * @deny (create, update, delete) - Non-admins cannot modify financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for consortium products.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Anyone can read consortium product data.
     * @allow (create, update, delete) - Only admins can create, update, or delete consortium product data.
     * @deny (create, update, delete) - Non-admins cannot modify consortium product data.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for credit products.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Anyone can read credit product data.
     * @allow (create, update, delete) - Only admins can create, update, or delete credit product data.
     * @deny (create, update, delete) - Non-admins cannot modify credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for product combos.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Anyone can read product combo data.
     * @allow (create, update, delete) - Only admins can create, update, or delete product combo data.
     * @deny (create, update, delete) - Non-admins cannot modify product combo data.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for sales proposals. Includes denormalized 'clientId' for authorization independence.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Anyone can read sales proposal data.
     * @allow (create) - Only admins can create sales proposals.
     * @allow (update, delete) - Only admins can update or delete sales proposals.
     * @deny (create, update, delete) - Non-admins cannot modify sales proposal data.
     * @principle Requires admin privileges for write operations.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for sales orders.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) - Anyone can read sales order data.
     * @allow (create, update, delete) - Only admins can create, update, or delete sales order data.
     * @deny (create, update, delete) - Non-admins cannot modify sales order data.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for commissions.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Anyone can read commission data.
     * @allow (create, update, delete) - Only admins can create, update, or delete commission data.
     * @deny (create, update, delete) - Non-admins cannot modify commission data.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for quizzes.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Anyone can read quiz data.
     * @allow (create, update, delete) - Only admins can create, update, or delete quiz data.
     * @deny (create, update, delete) - Non-admins cannot modify quiz data.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for questions.
     * @path /questions/{questionId}
     * @allow (get, list) - Anyone can read question data.
     * @allow (create, update, delete) - Only admins can create, update, or delete question data.
     * @deny (create, update, delete) - Non-admins cannot modify question data.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Anyone can read supplier data.
     * @allow (create, update, delete) - Only admins can create, update, or delete supplier data.
     * @deny (create, update, delete) - Non-admins cannot modify supplier data.
     */
    match /suppliers/{supplierId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for cost centers.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) - Anyone can read cost center data.
     * @allow (create, update, delete) - Only admins can create, update, or delete cost center data.
     * @deny (create, update, delete) - Non-admins cannot modify cost center data.
     */
    match /cost_centers/{costCenterId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for expense categories.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) - Anyone can read expense category data.
     * @allow (create, update, delete) - Only admins can create, update, or delete expense category data.
     * @deny (create, update, delete) - Non-admins cannot modify expense category data.
     */
    match /expense_categories/{categoryId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (get, list) - Anyone can read WhatsApp message template data.
     * @allow (create, update, delete) - Only admins can create, update, or delete WhatsApp message template data.
     * @deny (create, update, delete) - Non-admins cannot modify WhatsApp message template data.
     */
    match /whatsapp_templates/{templateId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}