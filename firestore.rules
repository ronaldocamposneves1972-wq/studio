/**
 * @fileoverview Firestore Security Rules for Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data while allowing role-based access to shared resources.
 * It uses Authorization Independence by denormalizing authorization data and Structural Segregation to maintain consistent security postures.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data for a specific user, accessible only by the user and admins.
 * - /clients/{clientId}: Client information, accessible by users with appropriate roles (Admin, Gestor, Atendente).
 * - /products/{productId}: Product information, accessible by users with appropriate roles (Admin, Gestor).
 * - /banks/{bankId}: Bank information, accessible by users with appropriate roles (Admin, Gestor, Financeiro).
 * - /quizzes/{quizId}: Quiz configurations, accessible by users with appropriate roles (Admin, Gestor).
 * - /webhooks/{webhookId}: Webhook configurations, accessible by users with Admin role.
 * - /roles_admin/{userId}: Documents indicating admin status. Existence implies admin role.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Strict ownership is enforced for user-specific data.
 * - Role-based access control is used for shared resources.
 * - Data validation is limited to authorization-critical fields to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 *  - Admin status is denormalized into the `/roles_admin/{userId}` collection. Existence of a document implies admin role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an admin.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants access to Admins, Gestor, and Atendente.
     */
    function canManageClients() {
      return isAdmin(); // || isGestor() || isAtendente(); // Removed Gestor and Atendente
    }

    /**
     * @description
     * This rule controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) User with ID 'user123' can read their own profile.
     *   request.auth.uid = 'user123'
     * @allow (create, update) User with ID 'user123' can create their own profile.
     *   request.auth.uid = 'user123'
     * @deny (get, list) User with ID 'user456' cannot read the profile of user 'user123'.
     *   request.auth.uid = 'user456'
     * @deny (create, update) User with ID 'user456' cannot update the profile of user 'user123'.
     *   request.auth.uid = 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // Listing users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description
     * This rule controls access to sales data associated with a specific user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, list) User with ID 'user123' can read their own sales data.
     *   request.auth.uid = 'user123'
     * @allow (create, update) User with ID 'user123' can create sales data under their own user ID.
     *   request.auth.uid = 'user123'
     * @deny (get, list) User with ID 'user456' cannot read the sales data of user 'user123'.
     *   request.auth.uid = 'user456'
     * @deny (create, update) User with ID 'user456' cannot create sales data under the user ID of 'user123'.
     *   request.auth.uid = 'user456'
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description
     * This rule controls access to client information.
     * @path /clients/{clientId}
     * @allow (get, list) Admin can read any client data.
     *   request.auth.uid = 'admin123'
     * @allow (create, update) Admin can create/update client data.
     *   request.auth.uid = 'admin123'
     * @deny (get, list) Non-admin user cannot read client data.
     *   request.auth.uid = 'user456'
     * @deny (create, update) Non-admin user cannot create/update client data.
     *   request.auth.uid = 'user456'
     * @principle Enforces role-based access control for shared resources.
     */
    match /clients/{clientId} {
      allow get: if canManageClients();
      allow list: if canManageClients();

      allow create: if canManageClients();
      allow update: if canManageClients() && resource != null;
      allow delete: if canManageClients() && resource != null;
    }

    /**
     * @description
     * This rule controls access to product information.
     * @path /products/{productId}
     * @allow (get, list) Admin can read any product data.
     *   request.auth.uid = 'admin123'
     * @allow (create, update) Admin can create/update product data.
     *   request.auth.uid = 'admin123'
     * @deny (get, list) Non-admin user cannot read product data.
     *   request.auth.uid = 'user456'
     * @deny (create, update) Non-admin user cannot create/update product data.
     *   request.auth.uid = 'user456'
     * @principle Enforces role-based access control for shared resources.
     */
    match /products/{productId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description
     * This rule controls access to bank information.
     * @path /banks/{bankId}
     * @allow (get, list) Admin can read any bank data.
     *   request.auth.uid = 'admin123'
     * @allow (create, update) Admin can create/update bank data.
     *   request.auth.uid = 'admin123'
     * @deny (get, list) Non-admin user cannot read bank data.
     *   request.auth.uid = 'user456'
     * @deny (create, update) Non-admin user cannot create/update bank data.
     *   request.auth.uid = 'user456'
     * @principle Enforces role-based access control for shared resources.
     */
    match /banks/{bankId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description
     * This rule controls access to quiz configurations.
     * @path /quizzes/{quizId}
     * @allow (get, list) Admin can read any quiz data.
     *   request.auth.uid = 'admin123'
     * @allow (create, update) Admin can create/update quiz data.
     *   request.auth.uid = 'admin123'
     * @deny (get, list) Non-admin user cannot read quiz data.
     *   request.auth.uid = 'user456'
     * @deny (create, update) Non-admin user cannot create/update quiz data.
     *   request.auth.uid = 'user456'
     * @principle Enforces role-based access control for shared resources.
     */
    match /quizzes/{quizId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description
     * This rule controls access to webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (get, list) Admin can read any webhook data.
     *   request.auth.uid = 'admin123'
     * @allow (create, update) Admin can create/update webhook data.
     *   request.auth.uid = 'admin123'
     * @deny (get, list) Non-admin user cannot read webhook data.
     *   request.auth.uid = 'user456'
     * @deny (create, update) Non-admin user cannot create/update webhook data.
     *   request.auth.uid = 'user456'
     * @principle Enforces role-based access control for shared resources.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /**
     * @description
     * This rule grants admin role to a user. The existence of a document at this path
     * implies that the user is an admin.
     * @path /roles_admin/{userId}
     * @allow (get, list) Only an admin can view admin roles.
     *   request.auth.uid = 'admin123' (and 'admin123' has a document under roles_admin)
     * @allow (create) Only an admin can assign admin roles.
     *   request.auth.uid = 'admin123' (and 'admin123' has a document under roles_admin)
     * @deny (get, list) Non-admin users cannot view admin roles.
     *   request.auth.uid = 'user456'
     * @deny (create) Non-admin users cannot assign themselves or others as admins.
     *   request.auth.uid = 'user456'
     * @principle Enforces role-based access control by checking the existence of a document.
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;

        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin() && resource != null;
    }
  }
}