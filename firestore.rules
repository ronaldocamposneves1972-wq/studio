/**
 * @fileoverview Firestore Security Rules for ConsorciaTech
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data,
 * and public read access with owner-only writes for product-related data.
 * It utilizes path-based authorization and denormalization for efficient security checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only by the user.
 * - /roles_admin/{userId}: Document existence determines admin role. Authorization uses this path.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only by the specific client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent unauthorized access to user data.
 * - Public read access is granted to product catalogs to facilitate discovery.
 * - Data required for authorization is denormalized to avoid costly `get()` calls.
 *
 * Denormalization for Authorization:
 * - `sales_proposals` includes `clientId` to independently authorize client access to their proposals.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own user document.
     * @deny (create) User with ID 'user456' cannot create a document for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to admin role documents. Existence of this document determines admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'admin123' can create their admin role document.
     * @deny (create) User with ID 'user456' cannot create an admin role document for 'admin123'.
     * @principle Enforces document ownership for writes and relies on document existence for admin role.
     */
    match /roles_admin/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to client data.
     * @path /clients/{clientId}
     * @allow (create) Any authenticated user can create a client profile.
     * @deny (create) Unauthenticated user cannot create a client profile.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.userId; // Allow update if authenticated user id matches userId in resource data
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) Client with ID 'client123' can create a document under their ID.
     * @deny (create) Client with ID 'client456' cannot create a document under 'client123'.
     * @principle Enforces path-based ownership under the client.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isOwner(clientId);
      allow delete: if isSignedIn() && isOwner(clientId);
    }

    /**
     * @description Grants access to financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get) Any user can read financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access for creation (e.g., admin).
      allow update: if false; // TODO: Add role-based access for updates (e.g., admin).
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get) Any user can read consortium product data.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access for creation (e.g., admin).
      allow update: if false; // TODO: Add role-based access for updates (e.g., admin).
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get) Any user can read credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access for creation (e.g., admin).
      allow update: if false; // TODO: Add role-based access for updates (e.g., admin).
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get) Any user can read product combo data.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access for creation (e.g., admin).
      allow update: if false; // TODO: Add role-based access for updates (e.g., admin).
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get) Client with ID 'client123' can read their sales proposals if clientId matches.
     * @deny (get) Client with ID 'client456' cannot read sales proposals of 'client123'.
     * @principle Denormalizes clientId within the document for authorization independence.
     */
    match /sales_proposals/{salesProposalId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && request.auth.uid == resource.data.clientId; // TODO: Limit to owner or role
      allow list: if isSignedIn(); // TODO: Limit to owner or role
      allow create: if isSignedIn(); // TODO: Limit to owner or role
      allow update: if request.auth.uid == resource.data.clientId; // TODO: Add role-based access for updates (e.g., client, admin)
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to commission data.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn(); // TODO: Limit to owner or role
      allow list: if isSignedIn(); // TODO: Limit to owner or role
      allow create: if isSignedIn(); // TODO: Limit to owner or role
      allow update: if request.auth.uid == resource.data.userId; // TODO: Add role-based access for updates (e.g., admin).
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to quiz data.
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access for creation (e.g., admin).
      allow update: if false; // TODO: Add role-based access for updates (e.g., admin).
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }

    /**
     * @description Grants access to question data.
     * @path /questions/{questionId}
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access for creation (e.g., admin).
      allow update: if false; // TODO: Add role-based access for updates (e.g., admin).
      allow delete: if false; // TODO: Add role-based access for deletes (e.g., admin).
    }
  }
}