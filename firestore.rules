/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * - Users can only manage their own data under /users/{userId}.
 * - Clients can create and access documents related to them in /clients/{clientId}/documents.
 * - Certain data, like financial institutions, consortiums, credit products, product combos, quizzes and questions, are publicly readable.
 * - Sales proposals are accessible based on client ID.
 * - Admin roles are determined by the existence of a document in /roles_admin/{userId}.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /roles_admin/{userId}: Admin role indicators, checked by existence.
 * - /clients/{clientId}: Client data.
 * - /clients/{clientId}/documents/{documentId}: Client-uploaded documents, owned by the client.
 * - /financial_institutions/{financialInstitutionId}: Financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Credit product data, publicly readable.
 * - /product_combos/{productComboId}: Product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Sales proposal data, accessible based on clientId.
 * - /commissions/{commissionId}: Commission data.
 * - /quizzes/{quizId}: Quiz data, publicly readable.
 * - /questions/{questionId}: Question data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to financial institutions, consortiums, credit products, product combos, quizzes and questions.
 * - Sales proposals are accessible based on client ID, denormalized within the document.
 * - Strict ownership is enforced for user-specific data.
 *
 * Denormalization for Authorization:
 * - `sales_proposals` include a `clientId` field to allow direct authorization without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin role.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants owner read and write access to their user document.
     * @path /users/{userId}
     * @allow (get, update, delete) if isOwner(userId) - Allows a user to read, update and delete their own user document.
     * @allow (create) if isOwner(userId) - Allows a user to create their own user document.
     * @allow (list) if false - Prevents listing of user documents.
     * @deny (get) if !isOwner(userId) - Denies other users from accessing this user document.
     * @principle Enforces user-ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin role based on document existence.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Grants read and write access to client documents.
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants a client read/write access to their uploaded documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) if isSignedIn() - Allows a signed-in user to create a document if the clientId matches their own id.
     * @allow (get, list, update, delete) if isOwner(clientId) - Allows a user to read, list, update, and delete their own documents.
     * @deny (create) if !isOwner(clientId) - Denies a user from creating a document under someone else's client ID.
     * @principle Enforces path-based ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId) && request.resource.data.clientId == clientId;
      allow update: if isExistingOwner(clientId) && request.resource.data.clientId == clientId;
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Grants public read access to financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to consortium product documents.
     * @path /consortiums/{consortiumId}
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to credit product documents.
     * @path /credit_products/{creditProductId}
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to product combo documents.
     * @path /product_combos/{productComboId}
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
            allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to sales proposals based on client ID.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) if resource.data.clientId == request.auth.uid - Allows a user to read sales proposals associated with their client ID.
     * @principle Enforces authorization independence by using the 'clientId' in the document.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if resource.data.clientId == request.auth.uid;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants access to commission documents.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to quiz documents.
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
            allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to question documents.
     * @path /questions/{questionId}
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
            allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

        /**
     * @description Grants read access to settings documents.
     * @path /settings/integrations
     * @allow (get) if true - Allows any user to read the settings/integrations document.
     * @principle Allows public read access to settings/integrations.
     */
    match /settings/integrations {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}