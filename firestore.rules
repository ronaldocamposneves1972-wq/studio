/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control model.
 * Strict path-based ownership is enforced for user-specific data.
 * Data denormalization is used to avoid costly `get()` calls in rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Owner-only access.
 * - /roles_admin/{userId}: Document existence confers admin role.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}: Client-uploaded documents.
 * - /financial_institutions/{financialInstitutionId}: Financial institution data.
 * - /consortiums/{consortiumId}: Consortium product data.
 * - /credit_products/{creditProductId}: Credit product data.
 * - /product_combos/{productComboId}: Product combinations.
 * - /sales_proposals/{salesProposalId}: Sales proposals (includes denormalized clientId).
 * - /sales_orders/{salesOrderId}: Sales orders.
 * - /commissions/{commissionId}: Commission data.
 * - /quizzes/{quizId}: Quiz definitions.
 * - /questions/{questionId}: Question data.
 * - /suppliers/{supplierId}: Supplier data.
 * - /cost_centers/{costCenterId}: Cost center data.
 * - /expense_categories/{categoryId}: Expense category data.
 * - /whatsapp_templates/{templateId}: WhatsApp message templates.
 *
 * Key Security Decisions:
 * - Admin role is determined by the existence of a document in /roles_admin/{userId}.
 * - Read-only access is explicitly granted for certain collections where appropriate.
 * - List operations are secured based on the data model and access control needs.
 *
 * Denormalization for Authorization:
 * - SalesProposals: Includes a denormalized 'clientId' to allow client-specific access rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile data, enforcing strict owner-only access.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user is signed in and owns the document.
     * @deny (create, update, delete) if the user is not signed in or does not own the document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Determines admin role based on the existence of a document in /roles_admin/{userId}.
     * @path /roles_admin/{userId}
     * @allow (create) if the user is signed in and owns the document (creating the admin role).
     * @allow (get) if the user is signed in and owns the document.
     * @deny (update, delete) Admin role can only be assigned or removed.
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read and write access to client data.
     * @path /clients/{clientId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) Currently allows all authenticated users, needs role-based access control.
     * @principle Requires further access control based on roles.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows clients to manage their uploaded documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, update, delete) if the user is signed in and owns the parent client document.
     * @deny (create, update, delete) if the user is not signed in or does not own the parent client document.
     * @principle Path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false; // Listing documents not allowed for security.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to financial institution data. Write access requires admin role.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to consortium product data. Write access requires admin role.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to credit product data. Write access requires admin role.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to product combo data. Write access requires admin role.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access to sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin or the proposal belongs to the user.
     * @principle Requires further access control based on roles.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access to sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin or the order belongs to the user.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows access to commission data. Write access requires admin role.
     * @path /commissions/{commissionId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to quiz data. Write access requires admin role.
     * @path /quizzes/{quizId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to question data. Write access requires admin role.
     * @path /questions/{questionId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Allows read access to supplier data. Write access requires admin role.
      * @path /suppliers/{supplierId}
      * @allow (get, list) Public read access.
      * @allow (create, update, delete) if the user is an admin.
      * @principle Requires admin role for writes.
      */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to cost center data. Write access requires admin role.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /cost_centers/{costCenterId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to expense category data. Write access requires admin role.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /expense_categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to WhatsApp message template data. Write access requires admin role.
     * @path /whatsapp_templates/{templateId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if the user is an admin.
     * @principle Requires admin role for writes.
     */
    match /whatsapp_templates/{templateId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource.data != null;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}