/**
 * @fileOverview Firestore Security Rules for a Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership for personal data, role-based access for shared resources, and explicit denial for unauthorized actions. It prioritizes security by default, restricting access unless explicitly granted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data; accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Stores sales data for a user; accessible only by the user and admins.
 * - /clients/{clientId}: Stores client data; accessible by authorized roles (Admin, Gestor, Atendente).
 * - /products/{productId}: Stores product data; accessible by authorized roles (Admin, Gestor).
 * - /banks/{bankId}: Stores bank data; accessible by authorized roles (Admin, Gestor, Financeiro).
 * - /quizzes/{quizId}: Stores quiz data; accessible by authorized roles (Admin, Gestor).
 * - /webhooks/{webhookId}: Stores webhook data; accessible only by admins.
 * - /roles_admin/{userId}: Existence of a document indicates admin role.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId} and subcollections.
 * - Role-based access control for shared resources like clients, products, and banks.
 * - Webhooks are only accessible to admins.
 * - Explicitly denies listing of the `/roles_admin` collection by non-admins.
 * - Data validation is limited to authorization-critical fields only (owner IDs).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Authenticated user with matching userId.
     * @deny (get, create, update, delete): Authenticated user with a non-matching userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Allow the user to read their own profile
      allow get: if isOwner(userId);

      // Allow the user to create their own profile if the userId matches their auth UID
      allow create: if isOwner(userId);

      // Allow the user to update their profile if they are the owner and the id doesn't change
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their profile if they are the owner
      allow delete: if isExistingOwner(userId);

      // Allow listing only for admins
      allow list: if false;
    }

    /**
     * @description Secures sales data associated with a specific user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, create, update, delete): Authenticated user with matching userId.
     * @deny (get, create, update, delete): Authenticated user with a non-matching userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the owner to read their sales data
      allow get: if isOwner(userId);

      // Allow the owner to create sales data
      allow create: if isOwner(userId);

      // Allow the owner to update their sales data
      allow update: if isExistingOwner(userId);

      // Allow the owner to delete their sales data
      allow delete: if isExistingOwner(userId);

      // Allow the owner to list their sales data
      allow list: if isOwner(userId);
    }

    /**
     * @description Secures client information.
     * @path /clients/{clientId}
     * @allow (get, list): Any authenticated user.
     * @allow (create, update, delete): Only users with 'Admin', 'Gestor', or 'Atendente' roles.
     * @deny (create, update, delete): Unauthorized users.
     * @principle Enforces role-based access control for writes.
     */
    match /clients/{clientId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function hasRequiredRole() {
            return isAdmin(); // Expand with additional role checks when roles are denormalized.
        }

        function isExisting() {
            return resource != null;
        }

        // Allow anyone to read client information
        allow get: if isSignedIn();

        // Allow anyone to list client information
        allow list: if isSignedIn();

        // Allow create, update, and delete only for users with the required role
        allow create: if hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow update: if isExisting() && hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow delete: if isExisting() && hasRequiredRole();  // TODO: Add role validation once roles are denormalized.
    }

    /**
     * @description Secures product information.
     * @path /products/{productId}
     * @allow (get, list): Any authenticated user.
     * @allow (create, update, delete): Only users with 'Admin' or 'Gestor' roles.
     * @deny (create, update, delete): Unauthorized users.
     * @principle Enforces role-based access control for writes.
     */
    match /products/{productId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function hasRequiredRole() {
            return isAdmin(); // Expand with additional role checks when roles are denormalized.
        }

        function isExisting() {
            return resource != null;
        }

        // Allow anyone to read product information
        allow get: if isSignedIn();

        // Allow anyone to list product information
        allow list: if isSignedIn();

        // Allow create, update, and delete only for users with the required role
        allow create: if hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow update: if isExisting() && hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow delete: if isExisting() && hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
    }

    /**
     * @description Secures bank information.
     * @path /banks/{bankId}
     * @allow (get, list): Any authenticated user.
     * @allow (create, update, delete): Only users with 'Admin', 'Gestor', or 'Financeiro' roles.
     * @deny (create, update, delete): Unauthorized users.
     * @principle Enforces role-based access control for writes.
     */
    match /banks/{bankId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function hasRequiredRole() {
            return isAdmin(); // Expand with additional role checks when roles are denormalized.
        }

        function isExisting() {
            return resource != null;
        }

        // Allow anyone to read bank information
        allow get: if isSignedIn();

        // Allow anyone to list bank information
        allow list: if isSignedIn();

        // Allow create, update, and delete only for users with the required role
        allow create: if hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow update: if isExisting() && hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow delete: if isExisting() && hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
    }

    /**
     * @description Secures quiz configurations.
     * @path /quizzes/{quizId}
     * @allow (get, list): Any authenticated user.
     * @allow (create, update, delete): Only users with 'Admin' or 'Gestor' roles.
     * @deny (create, update, delete): Unauthorized users.
     * @principle Enforces role-based access control for writes.
     */
    match /quizzes/{quizId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function hasRequiredRole() {
            return isAdmin(); // Expand with additional role checks when roles are denormalized.
        }

        function isExisting() {
            return resource != null;
        }

        // Allow anyone to read quiz information
        allow get: if isSignedIn();

        // Allow anyone to list quiz information
        allow list: if isSignedIn();

        // Allow create, update, and delete only for users with the required role
        allow create: if hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow update: if isExisting() && hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
        allow delete: if isExisting() && hasRequiredRole(); // TODO: Add role validation once roles are denormalized.
    }

    /**
     * @description Secures webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (get, list): Only Admins.
     * @allow (create, update, delete): Only Admins.
     * @deny (get, list, create, update, delete): Non-Admin users.
     * @principle Restricts access to webhook configurations to administrators.
     */
    match /webhooks/{webhookId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function isExisting() {
            return resource != null;
        }

        // Allow only admins to read webhook information
        allow get: if isAdmin();

        // Allow only admins to list webhook information
        allow list: if isAdmin();

        // Allow only admins to create, update, and delete webhook information
        allow create: if isAdmin();
        allow update: if isExisting() && isAdmin();
        allow delete: if isExisting() && isAdmin();
    }

    /**
     * @description Secures admin role documents.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete): Only users who are creating their own document.
     * @deny (get, create, update, delete): Unauthorized users.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      // Allow the user to read their own role document, if it exists (implying admin status)
      allow get: if isOwner(userId);

      // Allow the user to create their own role document if the userId matches their auth UID
      allow create: if isOwner(userId);

      // Allow the user to update their role document if they are the owner and the id doesn't change
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their role document if they are the owner
      allow delete: if isExistingOwner(userId);

      // Don't allow listing of the roles_admin collection by non-admins
      allow list: if false;
    }
  }
}