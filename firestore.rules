/**
 * @file Firestore Security Rules for ConsorciaTech Application
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user-specific data and allows public read access for product catalogs while restricting writes to authorized users.
 * Authorization independence is achieved through denormalization, avoiding costly `get()` calls.
 * @data_structure The Firestore database is organized into collections representing core entities:
 *   - /users/{userId}: Stores personal user data; access is restricted to the owning user.
 *   - /roles_admin/{userId}: Used to define admin roles based on document existence.
 *   - /clients/{clientId}: Stores client information; access is generally unrestricted, but subcollections are protected.
 *   - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents; access is restricted to the owning client.
 *   - /financial_institutions/{financialInstitutionId}, /consortiums/{consortiumId}, /credit_products/{creditProductId}, /product_combos/{productComboId}:
 *     Stores public product catalog data; read access is public, write access is restricted.
 *   - /sales_proposals/{salesProposalId}: Stores sales proposals, with denormalized clientId for authorization.
 *   - /commissions/{commissionId}: Stores commission data; access is restricted.
 *   - /quizzes/{quizId}, /questions/{questionId}: Stores quiz and question data; access is restricted.
 * @key_security_decisions
 *   - User listing is generally disallowed except where explicitly needed and secured.
 *   - Public read access is granted to product catalogs to facilitate open browsing.
 *   - Write access to most collections is restricted based on ownership or administrative role.
 *   - Data validation is relaxed in this prototyping phase to allow for rapid iteration.
 * @denormalization
 *   - SalesProposals include the clientId to avoid needing to fetch the Client document for authorization.
 * @structural_segregation
 *   - Admin roles are determined by the existence of a document in the `/roles_admin/{userId}` collection, rather than a field within the `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own document.
     * @allow (get, list, update, delete) - Authenticated user accesses their own document.
     * @deny (create) - Authenticated user tries to create a document with a different user ID.
     * @deny (get, list, update, delete) - Authenticated user tries to access another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to admin role documents. Document existence grants admin role.
     * @path /roles_admin/{userId}
     * @allow (create) - An admin user creates a role.
     * @allow (get) - Any signed-in user can check for admin role.
     * @deny (list, update, delete) - No listing, updating, or deleting roles via client.
     * @principle Enforces admin role management through document existence.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to client documents.
     * @path /clients/{clientId}
     * @allow (get, list) - Anyone can read client data.
     * @deny (create, update, delete) - No one can create, update, or delete client data.
     * @principle Allows public read access but restricts write access for client data.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, get, list) - The owner can create, retrieve, and list their own documents.
     * @allow (update, delete) - The owner can update and delete their own existing documents.
     * @deny (create, get, list, update, delete) - Users cannot access or modify other client's documents.
     * @principle Enforces client-based ownership for uploaded documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }
        function isExistingOwner(clientId) {
        return isOwner(clientId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Controls access to financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Anyone can read financial institution data.
     * @deny (create, update, delete) - No one can create, update, or delete financial institution data.
     * @principle Allows public read access but restricts write access for financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to consortium product documents.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Anyone can read consortium product data.
     * @deny (create, update, delete) - No one can create, update, or delete consortium product data.
     * @principle Allows public read access but restricts write access for consortium product data.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Anyone can read credit product data.
     * @deny (create, update, delete) - No one can create, update, or delete credit product data.
     * @principle Allows public read access but restricts write access for credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Anyone can read product combo data.
     * @deny (create, update, delete) - No one can create, update, or delete product combo data.
     * @principle Allows public read access but restricts write access for product combo data.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to sales proposal documents.  clientId is denormalized for authorization.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Anyone can read product combo data.
     * @deny (create, update, delete) - No one can create, update, or delete product combo data.
     */
    match /sales_proposals/{salesProposalId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isClient(clientId) {
          return request.auth.uid == clientId;
        }
        function isExistingClient(clientId) {
          return isClient(clientId) && exists(resource);
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.clientId == request.auth.uid && exists(resource);
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to commission documents.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Anyone can read product combo data.
     * @deny (create, update, delete) - No one can create, update, or delete product combo data.
     * @principle Allows public read access but restricts write access for product combo data.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Anyone can read product combo data.
     * @deny (create, update, delete) - No one can create, update, or delete product combo data.
     * @principle Allows public read access but restricts write access for product combo data.
     */
    match /quizzes/{quizId} {
     allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to question documents.
     * @path /questions/{questionId}
     * @allow (get, list) - Anyone can read product combo data.
     * @deny (create, update, delete) - No one can create, update, or delete product combo data.
     * @principle Allows public read access but restricts write access for product combo data.
     */
    match /questions/{questionId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
     allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}