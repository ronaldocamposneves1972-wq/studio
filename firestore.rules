/**
 * @fileoverview Firestore Security Rules for Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-layered security model:
 * 1. User-owned data: Each user has full control over their own data (e.g., sales).
 * 2. Role-based access: Certain operations and data are restricted to users with specific roles (e.g., Admin, Gestor).  The roles_admin collection is used to grant administrative privileges.
 * 3. Resource-based access: In some cases, access depends on data within the resource (e.g., a quiz can be created by any signed-in user).
 *
 * Data Structure:
 * - /users/{userId}: User profile information. Accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data associated with a specific user.
 * - /clients/{clientId}: Client information.
 * - /products/{productId}: Product information (Consórcio and Crédito).
 * - /banks/{bankId}: Bank information.
 * - /quizzes/{quizId}: Quiz configurations.
 * - /webhooks/{webhookId}: Webhook configurations.
 *
 * Key Security Decisions:
 * - Users can only manage their own sales data.
 * - Role-based access control is enforced for sensitive operations.
 * - Listing of user documents is allowed only for the owner.
 *
 * Denormalization for Authorization:
 * - The `roles_admin/{userId}` collection is used to denote admin privileges.  The existence of a document for a user indicates admin status.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
     * @description Checks if the authenticated user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the existing owner of a document.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the logic for granting read or write access to a resource based on whether the user is an admin
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is an admin or the owner, false otherwise.
     */
    function isAdminOrOwner(userId) {
      return isAdmin() || isOwner(userId);
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner or an admin.
     * @deny (create) if the user is not the owner.
     * @allow (create) if the user's ID matches the requested document ID.
     * @deny (list) always, user listing is disallowed.
     * @principle Enforces user-ownership and admin access for user profiles.
     */
    match /users/{userId} {
      // Only the user or an admin can read their own profile.
      allow get: if isAdminOrOwner(userId);
      // Only the user themselves can create their profile.
      allow create: if isOwner(userId);
      // Only the user or an admin can update their own profile.
      allow update: if isExistingOwner(userId) || isAdmin();
      // Only the user or an admin can delete their own profile.
      allow delete: if isExistingOwner(userId) || isAdmin();
      // No one can list all users.
      allow list: if false;
    }

    /**
     * @description Rules for sales documents nested under a user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, list, create, update, delete) if the user is the owner (sales rep) or an admin.
     * @deny if the user is not the owner or an admin.
     * @principle Enforces user-ownership for sales data.
     */
    match /users/{userId}/sales/{saleId} {
      // Only the user or an admin can read/write their own sales data.
      allow get: if isAdminOrOwner(userId);
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) only to admins.
     * @principle Restricts client management to admins.
     */
    match /clients/{clientId} {
      // Everyone can read client information.
      allow get, list: if true;
      // Only admins can create, update, or delete clients.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for product documents.
     * @path /products/{productId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) only to admins.
     * @principle Restricts product management to admins.
     */
    match /products/{productId} {
      // Everyone can read product information.
      allow get, list: if true;
      // Only admins can create, update, or delete products.
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for bank documents.
     * @path /banks/{bankId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) only to admins.
     * @principle Restricts bank management to admins.
     */
    match /banks/{bankId} {
      // Everyone can read bank information.
      allow get, list: if true;
      // Only admins can create, update, or delete banks.
      allow create, update, delete: if isAdmin();
    }

     /**
     * @description Rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if isAdmin();
     * @principle Allows anyone to read quizzes, any signed-in user to create, and only admins to modify/delete.
     */
    match /quizzes/{quizId} {
      // Everyone can read quiz information.
      allow get, list: if true;
      // Only signed-in users can create quizzes.
      allow create: if isSignedIn();
      // Only admins can update or delete quizzes.
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for webhook documents.
     * @path /webhooks/{webhookId}
     * @allow (get, list, create, update, delete) only to admins.
     * @principle Restricts webhook management to admins.
     */
    match /webhooks/{webhookId} {
      // Only admins can manage webhooks.
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for roles_admin documents.  The existence of a document here confers admin rights.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
        allow list: if false;
    }
  }
}