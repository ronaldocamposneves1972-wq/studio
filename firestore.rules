/**
 * @file Firebase Security Rules for Consórcio and Crédito Management System
 * @description This ruleset enforces a multi-tenant security model with role-based access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data; accessible only by the user themselves.
 * - /users/{userId}/sales/{saleId}: Stores sales data related to a specific user; accessible only by that user.
 * - /clients/{clientId}: Stores client data; accessible based on user role (e.g., Admin, Gestor, Atendente).
 * - /products/{productId}: Stores product data; accessible based on user role (e.g., Admin, Gestor).
 * - /banks/{bankId}: Stores bank data; accessible based on user role (e.g., Admin, Gestor, Financeiro).
 * - /quizzes/{quizId}: Stores quiz configurations; accessible based on user role (e.g., Admin, Gestor).
 * - /webhooks/{webhookId}: Stores webhook configurations; accessible only by Admin users.
 * - /accounts/{accountId}: Stores account information, access not specifically restricted, role based access may be required.
 * - /transactions/{transactionId}: Stores transaction information, access not specifically restricted, role based access may be required..
 * - /payablesReceivables/{prId}: Stores payable/receivable information, access not specifically restricted, role based access may be required.
 * - /roles_admin/{userId}: Indicates admin status; document existence grants admin role.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the user can access their profile and sales data.
 * - Role-based access control is used for shared resources like clients, products, and banks.  The specific roles and their permissions are not fully defined in the IR, so the rules provide a flexible structure for future refinement.
 * - Listing of all documents in `/transactions`, `/accounts`, and `/payablesReceivables` is allowed, consider if there is private information stored on it, and if that is the case the rules should be changed.
 * - Webhook configurations are restricted to Admin users only.
 * - The admin role is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * - Admin status is denormalized into the `/roles_admin/{userId}` collection. The existence of a document for a user in this collection grants them admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants the user access to their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants the user access to their own sales data.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to client data based on user role.
     * @path /clients/{clientId}
     * @allow (get, list) to all signed-in users.
     * @allow (create, update, delete) to users with the 'Admin' role.
     * @deny (create, update, delete) to users without the 'Admin' role.
     * @principle Enforces role-based access control for writes.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isSignedIn(); // Clients are publicly readable.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to product data based on user role.
     * @path /products/{productId}
     * @allow (get, list) to all signed-in users.
     * @allow (create, update, delete) to users with the 'Admin' role.
     * @deny (create, update, delete) to users without the 'Admin' role.
     * @principle Enforces role-based access control for writes.
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isSignedIn(); // Products are publicly readable.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to bank data based on user role.
     * @path /banks/{bankId}
     * @allow (get, list) to all signed-in users.
     * @allow (create, update, delete) to users with the 'Admin' role.
     * @deny (create, update, delete) to users without the 'Admin' role.
     * @principle Enforces role-based access control for writes.
     */
    match /banks/{bankId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isSignedIn(); // Banks are publicly readable.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to quiz data based on user role.
     * @path /quizzes/{quizId}
     * @allow (get, list) to all signed-in users.
     * @allow (create, update, delete) to users with the 'Admin' role.
     * @deny (create, update, delete) to users without the 'Admin' role.
     * @principle Enforces role-based access control for writes.
     */
    match /quizzes/{quizId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isSignedIn(); // Quizzes are publicly readable.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to webhook configurations only to Admin users.
     * @path /webhooks/{webhookId}
     * @allow (get, create, update, delete, list) to users with the 'Admin' role.
     * @deny (get, create, update, delete, list) to users without the 'Admin' role.
     * @principle Restricts access to sensitive configurations to administrators.
     */
    match /webhooks/{webhookId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants admin role based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow create if the user's UID matches the userId.
     * @deny get, list, update, delete.  This collection is only for indicating admin status.
     * @principle Enforces document ownership for writes, but doesn't allow reading.
     */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants read/write access to accounts collection for any signed in user
     * @path /accounts/{accountId}
     */
    match /accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // Consider restricting this further based on roles.
    }

    /**
     * @description Grants read/write access to transactions collection for any signed in user
     * @path /transactions/{transactionId}
     */
    match /transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // Consider restricting this further based on roles.
    }

    /**
     * @description Grants read/write access to payablesReceivables collection for any signed in user
     * @path /payablesReceivables/{prId}
     */
    match /payablesReceivables/{prId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn(); // Consider restricting this further based on roles.
    }
  }
}