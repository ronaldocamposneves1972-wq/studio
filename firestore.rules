/**
 * @file Firebase Security Rules for Consórcio and Crédito Management System
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and uses role-based access control for shared resources.  It prioritizes data security by requiring authentication for all write operations and carefully restricting read access based on user roles and document ownership.
 * @data_structure The data is organized hierarchically with user-specific data nested under `/users/{userId}`. Top-level collections like `/clients`, `/products`, `/banks`, and `/quizzes` store shared data.
 * @key_security_decisions
 *   - User listing is disallowed.
 *   - Read-only collections are explicitly marked and allow public read access.
 *   - Default security posture for ambiguous relationships is strict owner-only access.
 *   - Employs denormalization where appropriate to improve rule performance and security.
 * @denormalization Authorization data (e.g., user roles, membership lists) will be denormalized into documents to avoid costly `get()` calls in security rules.
 * @structural_segregation Private user data is stored in a dedicated user subcollection (`/users/{userId}/...`) to enforce strict access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @details This function also verifies that the document exists, preventing updates or deletes to non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the Admin role.
     * @details This check uses the /roles_admin/{userId} document existence as the source of truth for admin status.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user has the Gestor role.
     * @todo Implement Gestor role check (e.g., by checking a user document field or a separate roles collection).
     */
    function isGestor() {
      return isAdmin(); // TODO: Implement actual Gestor role check.  For now, treating them the same as Admin.
    }

    /**
     * @description Checks if the authenticated user has the Atendente role.
     */
    function isAtendente() {
      return false; // TODO: Implement Atendente role check
    }
      /**
       * @description Checks if the authenticated user has the Financeiro role.
       */
    function isFinanceiro() {
      return false; // TODO: Implement Financeiro role check
    }
    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (auth.uid == userId).
     * @allow (get, update, delete) If the user is the owner of the profile or an admin.
     * @deny (create) If the user is trying to create a profile for another user.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for sales data associated with a specific user (sales representative).
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) If the user is creating a sale under their own user ID.
     * @allow (get, update, delete) If the user is the owner (sales representative) of the sale or an admin.
     * @deny (create) If the user is trying to create a sale under another user's ID.
     * @deny (list) If the user is not the owner of the parent user document
     * @principle Enforces document ownership for writes and restricts access to a user's own sales data.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn() && request.resource.data.salesRepId == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (get, list) If the user has the Admin, Gestor, or Atendente role.
     * @allow (create, update, delete) If the user has the Admin or Gestor role.
     * @deny (create, update, delete) If the user does not have the required role.
     * @principle Restricts access to client data based on user roles.
     */
    match /clients/{clientId} {
      allow get: if isAdmin() || isGestor() || isAtendente();
      allow list: if isAdmin() || isGestor() || isAtendente();
      allow create: if isAdmin() || isGestor();
      allow update: if isAdmin() || isGestor();
      allow delete: if isAdmin() || isGestor();
    }

    /**
     * @description Rules for product information.
     * @path /products/{productId}
     * @allow (get, list) If the user has the Admin or Gestor role.
     * @allow (create, update, delete) If the user has the Admin or Gestor role.
     * @deny (create, update, delete) If the user does not have the required role.
     * @principle Restricts access to product data based on user roles.
     */
    match /products/{productId} {
      allow get: if isAdmin() || isGestor();
      allow list: if isAdmin() || isGestor();
      allow create: if isAdmin() || isGestor();
      allow update: if isAdmin() || isGestor();
      allow delete: if isAdmin() || isGestor();
    }

    /**
     * @description Rules for bank information.
     * @path /banks/{bankId}
     * @allow (get, list) If the user has the Admin, Gestor, or Financeiro role.
     * @allow (create, update, delete) If the user has the Admin or Gestor role.
     * @deny (create, update, delete) If the user does not have the required role.
     * @principle Restricts access to bank data based on user roles.
     */
    match /banks/{bankId} {
      allow get: if isAdmin() || isGestor() || isFinanceiro();
      allow list: if isAdmin() || isGestor() || isFinanceiro();
      allow create: if isAdmin() || isGestor();
      allow update: if isAdmin() || isGestor();
      allow delete: if isAdmin() || isGestor();
    }

    /**
     * @description Rules for quiz configurations.
     * @path /quizzes/{quizId}
     * @allow (get, list) If the user has the Admin or Gestor role.
     * @allow (create, update, delete) If the user has the Admin or Gestor role.
     * @deny (create, update, delete) If the user does not have the required role.
     * @principle Restricts access to quiz data based on user roles.
     */
    match /quizzes/{quizId} {
      allow get: if isAdmin() || isGestor();
      allow list: if isAdmin() || isGestor();
      allow create: if isAdmin() || isGestor();
      allow update: if isAdmin() || isGestor();
      allow delete: if isAdmin() || isGestor();
    }

    /**
     * @description Rules for webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (get, list) If the user has the Admin role.
     * @allow (create, update, delete) If the user has the Admin role.
     * @deny (create, update, delete) If the user does not have the required role.
     * @principle Restricts access to webhook data to admins only.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for admin role assignments.
     * @path /roles_admin/{userId}
     * @allow get: if isAdmin();
     * @allow list: if false;
     * @allow create: if isAdmin();
     * @allow update: if false;
     * @allow delete: if isAdmin();
     * @principle Only admins can manage admin role assignments.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}