/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based and role-based access control.
 * User data is strictly controlled by the authenticated user.
 * Certain collections are publicly readable, while write access is restricted to owners or specific roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the authenticated user.
 * - /roles_admin/{userId}: Document existence grants admin role, existence over content
 * - /clients/{clientId}: Stores client data, publicly readable.
 * - /clients/{clientId}/documents/{documentId}: Stores documents uploaded by clients, accessible only to the specific client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data. Includes denormalized 'clientId' for authorization independence.
 * - /commissions/{commissionId}: Stores commission data, publicly readable.
 * - /quizzes/{quizId}: Stores quiz data, publicly readable.
 * - /questions/{questionId}: Stores question data, publicly readable.
 *
 * Key Security Decisions:
 * - Public Read Access: The ruleset allows public read access to several collections (clients, financial_institutions, products, etc.).
 * - Strict Ownership: User-specific data is strictly controlled by the authenticated user, using the `isOwner()` function.
 * - Admin Roles: Administrative privileges are managed through the existence of documents in the `/roles_admin/{userId}` collection.
 * - Denormalization: The `clientId` is denormalized within `sales_proposals` to avoid needing extra `get()` calls, and to grant access for the specific client.
 * - No User Listing: Listing of users is explicitly denied to prevent information disclosure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring only the authenticated user can access their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get, update, delete, list) - User with UID 'user_abc' can access their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete, list) - User with UID 'user_xyz' cannot access the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages admin roles, granting admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) - User with UID 'admin_abc' can be granted admin role by creating a document at /roles_admin/admin_abc.
     * @allow (get, update, delete) - Only an existing admin can modify the role assignment.
     * @deny (create) - User with UID 'user_xyz' cannot create a document at /roles_admin/admin_abc to grant themselves admin role.
     * @deny (get, update, delete) - Non-admin user cannot access or modify the role assignment.
     * @principle Grants admin privileges based on document existence in the /roles_admin collection.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages client information, allowing public read access.
     * @path /clients/{clientId}
     * @allow (get, list) - Any user can read client data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete client data.
     * @principle Allows public read access while restricting write access.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin(); // Added Admin role so there is a way to delete
    }

    /**
     * @description Manages client documents, ensuring only the associated client can access them.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, get, update, delete, list) - Client with ID 'client_abc' can access their documents under /clients/client_abc/documents/{documentId}.
     * @deny (create, get, update, delete, list) - Client with ID 'client_xyz' cannot access documents under /clients/client_abc/documents/{documentId}.
     * @principle Enforces path-based ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isClientOwner(clientId) {
        return request.auth.uid == clientId;
      }

        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

      allow get: if isSignedIn() && (isClientOwner(clientId) || isAdmin());
      allow list: if isSignedIn() && (isClientOwner(clientId) || isAdmin());
      allow create: if isSignedIn() && (isClientOwner(clientId) || isAdmin());
      allow update: if isSignedIn() && (isClientOwner(clientId) || isAdmin());
      allow delete: if isSignedIn() && (isClientOwner(clientId) || isAdmin());
    }

    /**
     * @description Manages financial institution data, allowing public read access.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Any user can read financial institution data.
     * @deny (create, update, delete) - No one can create, update, or delete financial institution data. // TODO: Add role-based access for management.
     * @principle Allows public read access while restricting write access.
     */
    match /financial_institutions/{financialInstitutionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages consortium product data, allowing public read access.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Any user can read consortium product data.
     * @deny (create, update, delete) - No one can create, update, or delete consortium product data. // TODO: Add role-based access for management.
     * @principle Allows public read access while restricting write access.
     */
    match /consortiums/{consortiumId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages credit product data, allowing public read access.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Any user can read credit product data.
     * @deny (create, update, delete) - No one can create, update, or delete credit product data. // TODO: Add role-based access for management.
     * @principle Allows public read access while restricting write access.
     */
    match /credit_products/{creditProductId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages product combo data, allowing public read access.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Any user can read product combo data.
     * @deny (create, update, delete) - No one can create, update, or delete product combo data. // TODO: Add role-based access for management.
     * @principle Allows public read access while restricting write access.
     */
    match /product_combos/{productComboId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages sales proposal data, restricting write access to authenticated users.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Any user can read sales proposal data.
     * @deny (create, update, delete) - Only authenticated users can create, update, or delete sales proposal data. // TODO: refine this rule.
     * @principle Allows public read access while restricting write access.
     */
    match /sales_proposals/{salesProposalId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin(); // Added Admin Role so there is a way to delete
    }

    /**
     * @description Manages commission data, allowing public read access.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Any user can read commission data.
     * @deny (create, update, delete) - No one can create, update, or delete commission data. // TODO: Add role-based access for management.
     * @principle Allows public read access while restricting write access.
     */
    match /commissions/{commissionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages quiz data, allowing public read access.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Any user can read quiz data.
     * @deny (create, update, delete) - No one can create, update, or delete quiz data. // TODO: Add role-based access for management.
     * @principle Allows public read access while restricting write access.
     */
    match /quizzes/{quizId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages question data, allowing public read access.
     * @path /questions/{questionId}
     * @allow (get, list) - Any user can read question data.
     * @deny (create, update, delete) - No one can create, update, or delete question data. // TODO: Add role-based access for management.
     * @principle Allows public read access while restricting write access.
     */
    match /questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}