/**
 * @fileoverview Firestore Security Rules for Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (e.g., sales under a user) and a role-based access control model for shared or global data (e.g., clients, products, banks, quizzes, and webhooks). Authorization Independence is achieved through structural segregation and data denormalization. All write operations are protected by authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data associated with a specific user.
 * - /clients/{clientId}: Client information, accessible by users with appropriate roles.
 * - /products/{productId}: Product information, accessible by users with appropriate roles.
 * - /banks/{bankId}: Bank information, accessible by users with appropriate roles.
 * - /quizzes/{quizId}: Quiz configurations, accessible by users with appropriate roles.
 * - /webhooks/{webhookId}: Webhook configurations, accessible only by admins.
 * - /roles_admin/{userId}: Indicates admin status, existence implies admin role.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no top-level /users collection).
 * - Roles are not explicitly validated within the documents, assuming a trusted system for role assignment.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - Denormalization should be used to avoid `get()` calls in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile information only to the user and admins.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner (request.auth.uid == userId) or is an admin (exists(/databases/$(database)/documents/roles_admin/$(userId))).
     * @deny (get, create, update, delete) if the user is not the owner and not an admin.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows access to sales data associated with a specific user (sales representative).
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, create, update, delete) if the user is the owner (request.auth.uid == userId) or is an admin (exists(/databases/$(database)/documents/roles_admin/$(userId))).
     * @deny (get, create, update, delete) if the user is not the owner and not an admin.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/sales/{saleId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

   /**
    * @description Allows read access to any authenticated user.
    * @path /quizzes/{quizId}
    * @allow get, list: if true;
    * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    * @principle Public read, owner-only writes (currently disabled due to missing ownership field).
    */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
    /**
     * @description Allows access to client information by users with appropriate roles (Admin, Gestor, Atendente).
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows access to product information by users with appropriate roles (Admin, Gestor).
     * @path /products/{productId}
     */
    match /products/{productId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows access to bank information by users with appropriate roles (Admin, Gestor, Financeiro).
     * @path /banks/{bankId}
     */
    match /banks/{bankId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }


    /**
     * @description Allows access to webhook configurations only by users with Admin role.
     * @path /webhooks/{webhookId}
     */
    match /webhooks/{webhookId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Documents in this collection indicate admin status. Existence implies admin role.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
       allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }
  }
}