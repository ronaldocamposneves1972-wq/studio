/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization and secure access control. It uses a combination of
 * path-based ownership (e.g., /users/{userId}), existence checks (e.g., /roles_admin/{userId}),
 * and data denormalization to enforce granular permissions. All write operations are strictly controlled.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only by the user themselves.
 * - /roles_admin/{userId}: Document existence grants admin privileges to the user.
 * - /clients/{clientId}: Stores client information; write access is currently open (TODO: restrict in future iterations).
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents; write access is currently open (TODO: restrict in future iterations).
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data; write access is currently open (TODO: restrict in future iterations).
 * - /consortiums/{consortiumId}: Stores consortium product data; write access is currently open (TODO: restrict in future iterations).
 * - /credit_products/{creditProductId}: Stores credit product data; write access is currently open (TODO: restrict in future iterations).
 * - /product_combos/{productComboId}: Stores product combo data; write access is currently open (TODO: restrict in future iterations).
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data; write access is currently open (TODO: restrict in future iterations).
 * - /sales_orders/{salesOrderId}: Stores sales order data; write access is currently open (TODO: restrict in future iterations).
 * - /commissions/{commissionId}: Stores commission data; write access is currently open (TODO: restrict in future iterations).
 * - /quizzes/{quizId}: Stores quiz data; write access is currently open (TODO: restrict in future iterations).
 * - /questions/{questionId}: Stores question data; write access is currently open (TODO: restrict in future iterations).
 * - /suppliers/{supplierId}: Stores supplier data; write access is currently open (TODO: restrict in future iterations).
 * - /cost_centers/{costCenterId}: Stores cost center data; write access is currently open (TODO: restrict in future iterations).
 * - /expense_categories/{categoryId}: Stores expense category data; write access is currently open (TODO: restrict in future iterations).
 * - /whatsapp_templates/{templateId}: Stores WhatsApp message templates; write access is currently open (TODO: restrict in future iterations).
 *
 * Key Security Decisions:
 * - No user listing: The rules explicitly prevent listing of users for privacy reasons.
 * - Admin role via document existence: Admin privileges are granted based on the existence of a document in /roles_admin/{userId}.
 * - Flexible data shapes (prototyping): The rules focus on authorization and relational integrity, not strict schema validation, to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - SalesProposal documents denormalize the clientId to enable direct authorization without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner (signed in and document exists).
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the UID matches and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges based on document existence in /roles_admin/{userId}.
     * @returns {boolean} True if the admin document exists, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Only the user themselves can access their profile.
     * @deny (create) - If the userId does not match the auth UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles. Document existence determines admin role.
     * @path /roles_admin/{userId}
     * @allow (create) - Any authenticated user can request admin role (for review).
     * @allow (get) - Any authenticated user can check if they are an admin.
     * @allow (update, delete) - Only an existing admin can modify admin roles.
     * @deny (list) - No listing of admin roles.
     * @principle Authorization based on document existence.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; //TODO: discuss and implement the intended strategy, e.g. manual review
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for client data.
     * @path /clients/{clientId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

   /**
     * @description Rules for sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for question data.
     * @path /questions/{questionId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /cost_centers/{costCenterId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /expense_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (get, list) - Public read access for prototyping.
     * @allow (create, update, delete) - Currently open for prototyping; TODO: Implement proper access control.
     * @principle Open access for prototyping.
     */
    match /whatsapp_templates/{templateId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}