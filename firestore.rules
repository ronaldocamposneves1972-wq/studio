/**
 * @fileOverview
 * This ruleset enforces a hybrid security model. It allows public read and create access to the 'clients' and 'quizzes' collections for unauthenticated users,
 * while all other collections require authentication and enforce strict ownership or role-based access.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user.
 * - /users/{userId}/sales/{saleId}: Sales data for a specific user, accessible only by that user.
 * - /clients/{clientId}: Client data, publicly readable and creatable.
 * - /products/{productId}: Product data, access restricted to authenticated users.
 * - /banks/{bankId}: Bank data, access restricted to authenticated users.
 * - /quizzes/{quizId}: Quiz data, publicly readable and creatable.
 * - /webhooks/{webhookId}: Webhook configurations, accessible only by admins.
 * - /roles_admin/{userId}: Indicates admin status; document existence grants admin role.
 *
 * Key Security Decisions:
 * - Public read and create access is granted to the 'clients' and 'quizzes' collections.
 * - All other collections require user authentication.
 * - Strict ownership is enforced for user-specific data (e.g., sales under /users/{userId}).
 * - Admin role is determined by the existence of a document in the /roles_admin/{userId} collection.
 *
 * Denormalization for Authorization:
 * - Admin status is checked by reading the /roles_admin/{userId} collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated; otherwise, false.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the authenticated user is the owner; otherwise, false.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the authenticated user is the owner and the resource exists; otherwise, false.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by verifying the existence of a document in the /roles_admin/{userId} collection.
     * @returns {boolean} True if the user has admin privileges; otherwise, false.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Defines authorization rules for user profile data.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces user-ownership for all operations under the /users/{userId} path.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines authorization rules for sales data associated with a specific user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces user-ownership for all operations under the /users/{userId}/sales/{saleId} path.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines authorization rules for client data. Public read and create are allowed.
     * @path /clients/{clientId}
     * @allow (get, list, create) if true
     * @allow (update, delete) if isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Allows public read/create, but requires authentication for update/delete.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Defines authorization rules for product data.
     * @path /products/{productId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Requires authentication for read and admin privileges for write operations.
     */
    match /products/{productId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines authorization rules for bank data.
     * @path /banks/{bankId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isAdmin()
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Requires authentication for read and admin privileges for write operations.
     */
    match /banks/{bankId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines authorization rules for quiz data. Public read and create are allowed.
     * @path /quizzes/{quizId}
     * @allow (get, list, create) if true
     * @allow (update, delete) if isAdmin()
     * @deny (update, delete) if !isAdmin()
     * @principle Allows public read/create, but requires admin privileges for update/delete.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines authorization rules for webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (get, list, create, update, delete) if isAdmin()
     * @deny (get, list, create, update, delete) if !isAdmin()
     * @principle Requires admin privileges for all operations on webhook configurations.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Defines authorization rules for admin roles.
      * @path /roles_admin/{userId}
      * @allow get: if isAdmin();
      * @allow list: if isAdmin();
      * @allow create: if isAdmin();
      * @allow update: if isAdmin();
      * @allow delete: if isAdmin();
      * @deny (get, list, create, update, delete) if !isAdmin()
      * @principle Only accessible by admins. Admin can manage roles.
      */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Defines authorization rules for account data.
     * @path /accounts/{accountId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isAdmin();
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Requires authentication for read access and admin role for write access.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines authorization rules for transaction data.
     * @path /transactions/{transactionId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isAdmin();
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Requires authentication for read access and admin role for write access.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines authorization rules for payable/receivable data.
     * @path /payablesReceivables/{prId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isAdmin();
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Requires authentication for read access and admin role for write access.
     */
    match /payablesReceivables/{prId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}