/**
 * @file Firebase Security Rules for ConsorciaTech Firestore database.
 *
 * Core Philosophy:
 * This ruleset prioritizes allowing all the access to the Quizzes by unauthenticated users.
 * Other collections will have specific access rules.
 *
 * Data Structure:
 * - /clients/{clientId}: Stores client profiles.
 * - /clients/{clientId}/quizzes/{quizId}: Stores quizzes related to clients.
 * - /clients/{clientId}/documents/{documentId}: Stores documents uploaded by clients.
 * - /products/{productId}: Stores product information.
 * - /banks/{bankId}: Stores bank information.
 * - /clients/{clientId}/sales/{saleId}: Stores sales data associated with clients.
 * - /users/{userId}: Stores user data.
 * - /configuration/{configurationId}: Stores application configurations.
 * - /roles_admin/{userId}: Denotes users with admin roles.
 *
 * Key Security Decisions:
 * - Quizzes, Documents, and Sales are secured under the client's path using the Ownership pattern.
 * - Listing of user documents is allowed only for the owning user.
 * - Data validation is limited to ownership fields and relational integrity to allow for flexible data shapes during prototyping.
 * - Admin roles are determined by the presence of a user document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * - The `clientId` is denormalized into the `quizzes`, `documents`, and `sales` subcollections to allow direct authorization checks without requiring `get()` calls to the parent `client` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access for all users, authenticated or not, to the quizzes documents.
     * @path /clients/{clientId}/quizzes/{quizId}
     * @allow (get, list) Any user can read any quiz.
     * @allow (create, update, delete) Any user can create, update, or delete any quiz.
     * @deny None.
     * @principle Allows public submissions of quizzes
     */
    match /clients/{clientId}/quizzes/{quizId} {
      allow get, list, create, update, delete: if true;
    }

        /**
     * @description Allows read and write access for all users, authenticated or not, to the documents documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) Any user can read any document.
     * @allow (create, update, delete) Any user can create, update, or delete any document.
     * @deny None.
     * @principle Allows public submissions of documents
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list, create, update, delete: if true;
    }

     /**
      * @description Defines access rules for the /clients/{clientId} collection.
      * @path /clients/{clientId}
      * @allow (get, list) authenticated user to read the client.
      * @allow (create) authenticated user to create a client if the user ID matches the client ID.
      * @allow (update) authenticated user to update the client if the user ID matches the client ID and the resource exists.
      * @allow (delete) authenticated user to delete the client if the user ID matches the client ID and the resource exists.
      * @deny (create) unauthenticated user to create a client.
      * @deny (update) unauthenticated user to update a client.
      * @deny (delete) unauthenticated user to delete a client.
      * @principle Enforces user-ownership for all write operations.
      */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == clientId;
      allow update: if isSignedIn() && request.auth.uid == clientId;
      allow delete: if isSignedIn() && request.auth.uid == clientId;
    }

      /**
       * @description Defines access rules for the /products/{productId} collection.
       * @path /products/{productId}
       * @allow (get, list) Allow anyone to read products.
       * @allow (create, update, delete) Deny all write operations to products.
       * @deny (create, update, delete) All write operations are denied.
       * @principle Public read access with no write access.
       */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines access rules for the /banks/{bankId} collection.
     * @path /banks/{bankId}
     * @allow (get, list) Allow anyone to read banks.
     * @allow (create, update, delete) Deny all write operations to banks.
     * @deny (create, update, delete) All write operations are denied.
     * @principle Public read access with no write access.
     */
    match /banks/{bankId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows read and write access for all users, authenticated or not, to the sales documents.
     * @path /clients/{clientId}/sales/{saleId}
     * @allow (get, list) Any user can read any sale.
     * @allow (create, update, delete) Any user can create, update, or delete any sale.
     * @deny None.
     * @principle Allows public submissions of sales
     */
    match /clients/{clientId}/sales/{saleId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Defines access rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get, list) authenticated user to read the user.
     * @allow (create) authenticated user to create a user if the user ID matches the user ID.
     * @allow (update) authenticated user to update the user if the user ID matches the user ID and the resource exists.
     * @allow (delete) authenticated user to delete the user if the user ID matches the user ID and the resource exists.
     * @deny (create) unauthenticated user to create a user.
     * @deny (update) unauthenticated user to update a user.
     * @deny (delete) unauthenticated user to delete a user.
     * @principle Enforces user-ownership for all write operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines access rules for the /configuration/{configurationId} collection.
     * @path /configuration/{configurationId}
     * @allow (get, list) authenticated to read the configuration.
     * @allow (create, update, delete) only the admin can do it.
     * @deny (create, update, delete) non admins cannot create, update or delete the configuration
     * @principle Admin access only.
     */
    match /configuration/{configurationId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines access rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (get, list) authenticated to read the roles_admin.
     * @allow (create) authenticated user to create a roles_admin if the user ID matches the user ID.
     * @allow (update) authenticated user to update the roles_admin if the user ID matches the user ID and the resource exists.
     * @allow (delete) authenticated user to delete the roles_admin if the user ID matches the user ID and the resource exists.
     * @deny (create) unauthenticated user to create a roles_admin.
     * @deny (update) unauthenticated user to update a roles_admin.
     * @deny (delete) unauthenticated user to delete a roles_admin.
     * @principle Enforces user-ownership for all write operations.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }
  }

  // --- Helper functions ---
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}