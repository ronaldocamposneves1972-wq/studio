/**
 * @file Firebase Security Rules for ConsorciaTech Firestore Database.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client-related data,
 * combined with role-based access control for administrative functions. It uses
 * denormalization to avoid complex queries within the rules, ensuring efficient
 * and secure data access. The existence of a document in `/roles_admin/{userId}` confers admin role to that user.
 *
 * Data Structure:
 * - /clients/{clientId}: Top-level collection for client records.
 * - /clients/{clientId}/quizzes/{quizId}: Subcollection for client quizzes.
 * - /clients/{clientId}/documents/{documentId}: Subcollection for client documents.
 * - /products/{productId}: Top-level collection for product information (public read).
 * - /banks/{bankId}: Top-level collection for bank information (public read).
 * - /clients/{clientId}/sales/{saleId}: Subcollection for sales related to a client.
 * - /users/{userId}: Top-level collection for user profiles.
 * - /configuration/{configurationId}: Top-level collection for app-wide configurations.
 * - /roles_admin/{userId}: Top-level collection used to determine if the user is an administrator
 *
 * Key Security Decisions:
 * - Clients can only access data directly related to their own client ID.
 * - Administrative access is controlled by the presence of a document in the `/roles_admin/{userId}` collection.
 * - Public read access is granted to the `/products` and `/banks` collections.
 * - Listing of user documents in the `/users` collection is forbidden.
 *
 * Denormalization for Authorization:
 * - The `clientId` is denormalized into the `/clients/{clientId}/quizzes/{quizId}`,
 *   `/clients/{clientId}/documents/{documentId}`, and `/clients/{clientId}/sales/{saleId}`
 *   documents to enable direct authorization checks without needing to `get()` the
 *   parent `/clients/{clientId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the client can access their own profile data.
     * @path /clients/{clientId}
     * @allow (get, list) if isSignedIn() && isOwner(clientId);
     * @allow (create) if isSignedIn() && isOwner(clientId) && request.auth.uid == clientId;
     * @allow (update, delete) if isSignedIn() && isExistingOwner(clientId);
     * @deny (get, list) if !isSignedIn();
     * @deny (create, update, delete) if !isSignedIn();
     * @deny (create) if request.auth.uid != clientId;
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId) && request.auth.uid == clientId;
      allow update, delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Enforces that only the client can access their own quizzes.
     * @path /clients/{clientId}/quizzes/{quizId}
     * @allow (get, list) if isSignedIn() && isOwner(clientId);
     * @allow (create) if isSignedIn() && isOwner(clientId);
     * @allow (update, delete) if isSignedIn() && isExistingOwner(clientId);
     * @deny (get, list) if !isSignedIn();
     * @deny (create, update, delete) if !isSignedIn();
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/quizzes/{quizId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update, delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Enforces that only the client can access their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) if isSignedIn() && isOwner(clientId);
     * @allow (create) if isSignedIn() && isOwner(clientId);
     * @allow (update, delete) if isSignedIn() && isExistingOwner(clientId);
     * @deny (get, list) if !isSignedIn();
     * @deny (create, update, delete) if !isSignedIn();
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/documents/{documentId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update, delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Allows public read access to product data. Only admins can modify.
     * @path /products/{productId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public reads with restricted writes.
     */
    match /products/{productId} {

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows public read access to bank data. Only admins can modify.
     * @path /banks/{bankId}
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public reads with restricted writes.
     */
    match /banks/{bankId} {

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Enforces that only the client can access their own sales.
     * @path /clients/{clientId}/sales/{saleId}
     * @allow (get, list) if isSignedIn() && isOwner(clientId);
     * @allow (create) if isSignedIn() && isOwner(clientId);
     * @allow (update, delete) if isSignedIn() && isExistingOwner(clientId);
     * @deny (get, list) if !isSignedIn();
     * @deny (create, update, delete) if !isSignedIn();
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/sales/{saleId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update, delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Allows a user to create their own profile. Admins can modify any profile. Listing is forbidden
     * @path /users/{userId}
     * @allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
     * @allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
     * @allow update, delete: if isSignedIn() && (isExistingOwner(userId) || isAdmin());
     * @deny list: if true;
     * @deny create, update, delete: if !isSignedIn();
     * @deny create: if request.auth.uid != userId;
     * @principle Restricts access to user profiles.
     */
    match /users/{userId} {

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow update, delete: if isSignedIn() && (isExistingOwner(userId) || isAdmin());
      allow list: if false;
    }

    /**
     * @description Allows admins to manage application configurations.
     * @path /configuration/{configurationId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list, create, update, delete: if !isAdmin();
     * @principle Restricts access to application configurations to admins only.
     */
    match /configuration/{configurationId} {

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

     /**
     * @description Admins collection to define admin users
     * @path /roles_admin/{userId}
     * @allow get: if true;
     * @allow create: if true;
     * @allow update: if false;
     * @allow delete: if true;
     * @allow list: if true;
     * @principle Only admin users can read this collection
     */
    match /roles_admin/{userId} {
      allow get: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if true;
      allow list: if true;
    }
  }
}