/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and a combination of ownership and public read access for other collections.
 *
 * Data Structure:
 * - /users/{userId}: User-specific data, accessible only by the owning user.
 * - /roles_admin/{userId}: Determines admin status by document existence.
 * - /clients/{clientId}/documents/{documentId}: Client-owned documents.
 * - Top-level collections (e.g., /financial_institutions, /consortiums, /credit_products): Publicly readable, but writable only by authenticated users.
 * - /sales_proposals/{salesProposalId}: Includes denormalized client ID for authorization.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId}.
 * - Admin role determined by the existence of a document in /roles_admin/{userId}.
 * - Public read access for most top-level collections to enable open data consumption.
 * - Denormalization of clientId in sales_proposals to avoid costly `get()` calls.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow direct authorization checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the owner to read, write, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own document if the userId matches their auth.uid.
     * @allow (read, write, update, delete) - Authenticated user can access their own document.
     * @deny (read, write, update, delete) - Any other user cannot access this document.
     * @principle Enforces strict document ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Determines admin role by the existence of a document.
     * @path /roles_admin/{userId}
     * @allow (read, write, create, update, delete) - Only allow if the user is signed in.  Further access control TBD.
     * @deny (read, write, update, delete) - Unauthenticated users cannot access.
     * @principle Uses document existence to grant admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read and write access to clients for authenticated users.
     * @path /clients/{clientId}
     * @allow (read, write, create, update, delete) - Authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     * @principle Authenticated users have full access to client data.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows a client to upload documents to their respective path.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (read, write, create, update, delete) - Authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     * @principle Enforces path-based ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to financial institutions, but only authenticated users can write.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (read) - Any user can read financial institution data.
     * @allow (write, create, update, delete) - Only authenticated users can write.
     * @deny (write, create, update, delete) - Unauthenticated users cannot write.
     * @principle Allows public reads with owner-only writes.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

    /**
     * @description Allows public read access to consortiums, but only authenticated users can write.
     * @path /consortiums/{consortiumId}
     * @allow (read) - Any user can read consortium data.
     * @allow (write, create, update, delete) - Only authenticated users can write.
     * @deny (write, create, update, delete) - Unauthenticated users cannot write.
     * @principle Allows public reads with owner-only writes.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

    /**
     * @description Allows public read access to credit products, but only authenticated users can write.
     * @path /credit_products/{creditProductId}
     * @allow (read) - Any user can read credit product data.
     * @allow (write, create, update, delete) - Only authenticated users can write.
     * @deny (write, create, update, delete) - Unauthenticated users cannot write.
     * @principle Allows public reads with owner-only writes.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

    /**
     * @description Allows public read access to product combos, but only authenticated users can write.
     * @path /product_combos/{productComboId}
     * @allow (read) - Any user can read product combo data.
     * @allow (write, create, update, delete) - Only authenticated users can write.
     * @deny (write, create, update, delete) - Unauthenticated users cannot write.
     * @principle Allows public reads with owner-only writes.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

    /**
     * @description Allows access to sales proposals.  Includes denormalized client ID for authorization.
     * @path /sales_proposals/{salesProposalId}
     * @allow (read, write, create, update, delete) - Only authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     * @principle Uses a denormalized clientId for authorization.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
       /**
     * @description Allows access to sales orders.
     * @path /sales_orders/{salesOrderId}
     * @allow (read, write, create, update, delete) - Only authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

    /**
     * @description Allows access to commissions.
     * @path /commissions/{commissionId}
     * @allow (read, write, create, update, delete) - Only authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

    /**
     * @description Allows public read access to quizzes, but only authenticated users can write.
     * @path /quizzes/{quizId}
     * @allow (read) - Any user can read quiz data.
     * @allow (write, create, update, delete) - Only authenticated users can write.
     * @deny (write, create, update, delete) - Unauthenticated users cannot write.
     * @principle Allows public reads with owner-only writes.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

    /**
     * @description Allows public read access to questions, but only authenticated users can write.
     * @path /questions/{questionId}
     * @allow (read) - Any user can read question data.
     * @allow (write, create, update, delete) - Only authenticated users can write.
     * @deny (write, create, update, delete) - Unauthenticated users cannot write.
     * @principle Allows public reads with owner-only writes.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }
    
       /**
     * @description Allows access to suppliers.
     * @path /suppliers/{supplierId}
     * @allow (read, write, create, update, delete) - Only authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     */
    match /suppliers/{supplierId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }
    
           /**
     * @description Allows access to cost centers.
     * @path /cost_centers/{costCenterId}
     * @allow (read, write, create, update, delete) - Only authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     */
    match /cost_centers/{costCenterId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }
    
               /**
     * @description Allows access to expense categories.
     * @path /expense_categories/{categoryId}
     * @allow (read, write, create, update, delete) - Only authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     */
    match /expense_categories/{categoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

     /**
     * @description Allows access to WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (read, write, create, update, delete) - Only authenticated users can access.
     * @deny (read, write, create, update, delete) - Unauthenticated users cannot access.
     */
    match /whatsapp_templates/{templateId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingDocument() && isSignedIn();
      allow delete: if isExistingDocument() && isSignedIn();
    }

  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isExistingDocument() {
      return resource != null;
  }
}