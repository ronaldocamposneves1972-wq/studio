/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence by denormalizing data to avoid costly `get()` calls.
 * It enforces strict access control based on user authentication and role-based permissions.
 * Read access to product catalogs is generally public for authenticated users, but all write access requires authentication.
 * User-specific data is secured using path-based ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owning user.
 * - /roles_admin/{userId}: Document existence determines admin role; only admins can create, update, or delete.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores documents uploaded by clients; access restricted to the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.  Read access for authenticated users, no write access.
 * - /credit_products/{creditProductId}: Stores credit product data. Read access for authenticated users, no write access.
 * - /product_combos/{productComboId}: Stores product combo data. Read access for authenticated users, no write access.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data with denormalized 'clientId' for efficient authorization.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - `list` operations are generally disabled for product catalogs (`consortiums`, `credit_products`, `product_combos`).
 * - Data validation is limited to ensuring authorization and relational integrity, with looser validation on content.
 * - Public read access is granted to product catalogs (`consortiums`, `credit_products`, `product_combos`) for authenticated users.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow rules to authorize access without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for user documents.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own document (self-registration).
     * @allow (get, list, update, delete) If the user is the owner of the document.
     * @deny (create) If the user ID in the path does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) If an admin user is creating a new admin role.
     * @allow (get) If the user is authenticated
     * @allow (update, delete) If the user is an Admin.
     * @deny (create) If the user is not an admin.
     * @principle  Document existence determines admin role.
     */
    match /roles_admin/{userId} {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Rule for client documents.
     * @path /clients/{clientId}
     * @allow (create) If the user is creating a new client document.
     * @allow (get, list, update, delete) If the user is an Admin.
     * @deny (create) If the user is not an admin.
     */
    match /clients/{clientId} {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Rule for client documents.
     * @path   /clients/{clientId}/documents/{documentId}
     * @allow (create) If the user is creating a new document for self.
     * @allow (get, list, update, delete) If the user is an Owner.
     * @deny   (create) If the user is not an owner.
     * @principle  Path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Rule for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) If the user is creating a new financial institution document.
     * @allow (get, list, update, delete) If the user is an Admin.
     * @deny (create) If the user is not an admin.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for consortium documents.
     * @path /consortiums/{consortiumId}
     * @allow (get) If the user is signed in.
     * @deny (list, create, update, delete) Always deny.
     */
    match /consortiums/{consortiumId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get) If the user is signed in.
     * @deny (list, create, update, delete) Always deny.
     */
    match /credit_products/{creditProductId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get) If the user is signed in.
     * @deny (list, create, update, delete) Always deny.
     */
    match /product_combos/{productComboId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) If the user is creating a new sales proposal document.
     * @allow (get, list, update, delete) If the user is an Admin or the client who owns the proposal.
     * @deny (create) If the user is not an admin or the client who owns the proposal.
     * @principle  Includes denormalized 'clientId' for authorization independence.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for commission documents.
     * @path /commissions/{commissionId}
     * @allow (create) If the user is creating a new commission document.
     * @allow (get, list, update, delete) If the user is an Admin.
     * @deny (create) If the user is not an admin.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rule for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (create) If the user is creating a new quiz document.
     * @allow (get, list, update, delete) If the user is an Admin.
     * @deny (create) If the user is not an admin.
     */
    match /quizzes/{quizId} {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Rule for question documents.
     * @path /questions/{questionId}
     * @allow (create) If the user is creating a new question document.
     * @allow (get, list, update, delete) If the user is an Admin.
     * @deny (create) If the user is not an admin.
     */
    match /questions/{questionId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}