/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset enforces a strict data-ownership model where users can only
 * access their own data unless explicitly granted other permissions. It prioritizes
 * secure access control through path-based authorization and data denormalization
 * to avoid complex queries within the rules.
 *
 * Data Structure:
 * The Firestore database is organized into top-level collections for core entities:
 * - /users/{userId}: Stores personal user information; owner-only access.
 * - /roles_admin/{userId}: Document existence grants admin privileges.
 * - /clients/{clientId}: Stores client data; client-only access to their data.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents; client-only access.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, includes denormalized clientId for authorization.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - Strict Ownership: Most collections use path-based ownership (`/users/{userId}`, `/clients/{clientId}/documents/{documentId}`).
 * - Admin Roles: Admin privileges are determined by the existence of a document in `/roles_admin/{userId}`.
 * - Data Denormalization: The `sales_proposals` collection denormalizes the `clientId` to allow direct authorization based on client ownership, improving rule efficiency.
 * - No User Listing: Listing all users is not permitted to prevent information leakage.
 * - Public Read-Only: Some top-level collections like `consortiums`, `credit_products`, `product_combos`, `financial_institutions`, `quizzes`, and `questions` are readable by anyone. Write access is restricted (consider defining admin roles to manage this).
 *
 * Denormalization for Authorization:
 * The `sales_proposals` collection includes the `clientId` directly within each document. This avoids needing a `get()` call to the `/clients/{clientId}` document to verify ownership, which would be less efficient and potentially more costly.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants the user access to their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list): if the user is the owner of the document.
     * @deny (create, update, delete): if the user is not the owner of the document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin access based on the existence of a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete, list): if the user is an admin.
     * @deny (create, update, delete): if the user is not an admin.
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
       function isExistingAdmin(userId) {
        return isAdmin(userId) && resource != null;
      }

      allow get: if isAdmin(userId);
      allow list: if false;
      allow create: if isAdmin(userId);
      allow update: if isExistingAdmin(userId);
      allow delete: if isExistingAdmin(userId);
    }

    /**
     * @description Grants access to client documents.
     * @path /clients/{clientId}
     * @allow (get, create, update, delete, list): if the user is the owner of the client document.
     * @deny (create, update, delete): if the user is not the owner of the client document.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }
       function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if false;
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Grants access to documents uploaded by a client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, create, update, delete, list): if the user is the owner of the client document.
     * @deny (create, update, delete): if the user is not the owner of the client document.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }
       function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null;
      }

      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Allows public read access to financial institution data. Write access should be restricted to admins (TODO).
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): Only admins should be able to perform these operations (TODO).
     * @principle Public read, restricted write.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Allows public read access to consortium product data. Write access should be restricted to admins (TODO).
     * @path /consortiums/{consortiumId}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): Only admins should be able to perform these operations (TODO).
     * @principle Public read, restricted write.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Allows public read access to credit product data. Write access should be restricted to admins (TODO).
     * @path /credit_products/{creditProductId}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): Only admins should be able to perform these operations (TODO).
     * @principle Public read, restricted write.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Allows public read access to product combo data. Write access should be restricted to admins (TODO).
     * @path /product_combos/{productComboId}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): Only admins should be able to perform these operations (TODO).
     * @principle Public read, restricted write.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Grants access to sales proposal data, with denormalized clientId for authorization independence.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, create, update, delete, list): if the user is the client associated with the proposal.
     * @deny (create, update, delete): if the user is not the client associated with the proposal.
     * @principle Enforces document ownership based on the denormalized clientId.
     */
    match /sales_proposals/{salesProposalId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientId) {
        return isSignedIn() && request.auth.uid == clientId;
      }
       function isExistingOwner(clientId) {
        return isOwner(clientId) && resource != null && resource.data.clientId == request.auth.uid;
      }

      allow get: if isSignedIn() && resource.data.clientId == request.auth.uid;
      allow list: if false; // Listing is not implemented in this prototype.
      allow create: if isSignedIn() && request.resource.data.clientId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.clientId);
      allow delete: if isExistingOwner(resource.data.clientId);
    }

    /**
     * @description Allows public read access to commission data. Write access should be restricted to admins (TODO).
     * @path /commissions/{commissionId}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): Only admins should be able to perform these operations (TODO).
     * @principle Public read, restricted write.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }

     /**
      * @description Allows public read access to quiz data. Write access should be restricted to admins (TODO).
      * @path /quizzes/{quizId}
      * @allow (get, list): Public read access.
      * @deny (create, update, delete): Only admins should be able to perform these operations (TODO).
      * @principle Public read, restricted write.
      */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }

    /**
     * @description Allows public read access to question data. Write access should be restricted to admins (TODO).
     * @path /questions/{questionId}
     * @allow (get, list): Public read access.
     * @deny (create, update, delete): Only admins should be able to perform these operations (TODO).
     * @principle Public read, restricted write.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check.
    }
  }
}