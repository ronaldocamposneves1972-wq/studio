/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * role-based access control for shared resources, and public read access with
 * owner-only writes for quizzes.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user information, accessible only to the user and admins.
 * - /users/{userId}/sales/{saleId}: Stores sales data linked to a specific sales representative.
 * - /clients/{clientId}: Stores client information, accessible with authentication.
 * - /products/{productId}: Stores product information, accessible with authentication.
 * - /banks/{bankId}: Stores bank information, accessible with authentication.
 * - /quizzes/{quizId}: Stores quiz configurations. Publicly readable and writable.
 * - /webhooks/{webhookId}: Stores webhook configurations, accessible only to admins.
 * - /roles_admin/{userId}: Indicates admin status. Existence of a document grants admin role.
 * - /accounts/{accountId}: Stores bank and digital account information. Authentication is required.
 * - /transactions/{transactionId}: Stores financial transactions. Authentication is required.
 * - /payablesReceivables/{prId}: Stores accounts payable and receivable items. Authentication is required.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the user or an admin can access it.
 * - Listing of user documents is disallowed to prevent enumeration.
 * - Quizzes are publicly readable and writable.
 * - Other collections require authentication for all operations.
 * - Roles are determined by the existence of a document in the /roles_admin collection.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in `/roles_admin/{userId}`, avoiding the need for custom claims.
 *
 * Structural Segregation:
 * - User-specific data (sales) is stored under the user's document, ensuring clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user document. Admins can also read.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if isSignedIn() && isOwner(userId)
     * @allow (get) if isAdmin()
     * @deny (list)
     * @deny (create, update, delete) if !isOwner(userId) && !isAdmin()
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) && resource != null) || isAdmin();
      allow delete: if isSignedIn() && (isOwner(userId) && resource != null) || isAdmin();
    }

    /**
     * @description Allows a user to read and write their own sales documents.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, create, update, delete) if isSignedIn() && isOwner(userId)
     * @deny (list)
     * @deny (create, update, delete) if !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && (isOwner(userId) && resource != null);
      allow delete: if isSignedIn() && (isOwner(userId) && resource != null);
    }

    /**
     * @description Allows anyone to create and read client documents.
     * @path /clients/{clientId}
     * @allow (get, create, list) if true
     * @deny (update, delete) if !isSignedIn()
     * @principle Allows public read and create access to client documents.
     */
    match /clients/{clientId} {
      allow get, list, create: if true;
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Requires authentication to read and write product documents.
     * @path /products/{productId}
     * @allow (get, list, create, update, delete) if isSignedIn()
     * @deny (get, list, create, update, delete) if !isSignedIn()
     * @principle Requires authentication for all operations on product documents.
     */
    match /products/{productId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Requires authentication to read and write bank documents.
     * @path /banks/{bankId}
     * @allow (get, list, create, update, delete) if isSignedIn()
     * @deny (get, list, create, update, delete) if !isSignedIn()
     * @principle Requires authentication for all operations on bank documents.
     */
    match /banks/{bankId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to create and read quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get, create, list, update, delete) if true;
     * @principle Allows public read and create access to quiz documents.
     */
    match /quizzes/{quizId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Allows only authenticated admins to read and write webhook documents.
     * @path /webhooks/{webhookId}
     * @allow (get, list, create, update, delete) if isSignedIn() && isAdmin()
     * @deny (get, list, create, update, delete) if !isSignedIn() || !isAdmin()
     * @principle Restricts access to webhook documents to admins only.
     */
    match /webhooks/{webhookId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && (isAdmin() && resource != null);
      allow delete: if isSignedIn() && (isAdmin() && resource != null);
    }

    /**
     * @description Allows creating an admin role document if the user ID matches the document ID.
     * @path /roles_admin/{userId}
     * @allow (get) if isAdmin()
     * @allow (create) if isSignedIn() && isOwner(userId)
     * @deny (list, update, delete)
     * @principle Allows only admins to read role documents and users to create their admin role if they are authenticated.
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Requires authentication to read and write account documents.
     * @path /accounts/{accountId}
     * @allow (get, list, create, update, delete) if isSignedIn()
     * @deny (get, list, create, update, delete) if !isSignedIn()
     * @principle Requires authentication for all operations on bank documents.
     */
    match /accounts/{accountId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

        /**
     * @description Requires authentication to read and write transaction documents.
     * @path /transactions/{transactionId}
     * @allow (get, list, create, update, delete) if isSignedIn()
     * @deny (get, list, create, update, delete) if !isSignedIn()
     * @principle Requires authentication for all operations on bank documents.
     */
    match /transactions/{transactionId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

    /**
     * @description Requires authentication to read and write payableReceivable documents.
     * @path /payablesReceivables/{prId}
     * @allow (get, list, create, update, delete) if isSignedIn()
     * @deny (get, list, create, update, delete) if !isSignedIn()
     * @principle Requires authentication for all operations on bank documents.
     */
    match /payablesReceivables/{prId} {
      allow get, list, create, update, delete: if isSignedIn();
    }


    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the requested user ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in /roles_admin/{userId}.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}