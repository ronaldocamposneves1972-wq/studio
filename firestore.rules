/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with user-specific data segregation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only the authenticated user can read/write their own profile.
 * - /roles_admin/{userId}: Determines admin role; existence indicates admin status.
 * - /clients/{clientId}: Stores client information; access is not restricted in this prototype.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents; only the client can manage their documents.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data; access is not restricted in this prototype.
 * - /consortiums/{consortiumId}: Stores consortium product data; access is not restricted in this prototype.
 * - /credit_products/{creditProductId}: Stores credit product data; access is not restricted in this prototype.
 * - /product_combos/{productComboId}: Stores product combo data; access is not restricted in this prototype.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data; access is not restricted in this prototype.
 * - /commissions/{commissionId}: Stores commission data; access is not restricted in this prototype.
 * - /quizzes/{quizId}: Stores quiz data; access is not restricted in this prototype.
 * - /questions/{questionId}: Stores question data; access is not restricted in this prototype.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Admin roles are determined by the existence of a document in /roles_admin/{userId}.
 * - Read-only collections are generally allowed for public access in this prototyping phase.
 * - `list` operations are secured based on path-based ownership where applicable.
 * - Data validation is minimized to essential checks for relational integrity and path consistency.
 *
 * Authorization Independence:
 * - The `clientId` is denormalized within `sales_proposals` to grant access for the specific client.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if request.auth.uid == userId
     * @deny (get, list, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Determines admin role by checking for the existence of a document.
     * @path /roles_admin/{userId}
     * @allow (get, list, create, update, delete) if true; // TODO: Add role management logic
     * @deny (get, list, create, update, delete) if false;
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to client data. Access is not restricted in this prototype.
     * @path /clients/{clientId}
     * @allow (get, list) if true;
     *
     */
    match /clients/{clientId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows clients to manage their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list, create, update, delete) if request.auth.uid == clientId
     * @deny (get, list, create, update, delete) if request.auth.uid != clientId
     * @principle Path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isClientOwner(clientId) {
        return request.auth.uid == clientId;
      }

      allow get: if isSignedIn() && isClientOwner(clientId);
      allow list: if false;
      allow create: if isSignedIn() && isClientOwner(clientId);
      allow update: if isSignedIn() && isClientOwner(clientId);
      allow delete: if isSignedIn() && isClientOwner(clientId);
    }

    /**
     * @description Allows access to financial institution data. Access is not restricted in this prototype.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) if true;
     * @principle Public read access for product information.
     */
    match /financial_institutions/{financialInstitutionId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to consortium product data. Access is not restricted in this prototype.
     * @path /consortiums/{consortiumId}
     */
    match /consortiums/{consortiumId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to credit product data. Access is not restricted in this prototype.
     * @path /credit_products/{creditProductId}
     */
    match /credit_products/{creditProductId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to product combo data. Access is not restricted in this prototype.
     * @path /product_combos/{productComboId}
     */
    match /product_combos/{productComboId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to sales proposal data. Access is not restricted in this prototype.
     * @path /sales_proposals/{salesProposalId}
     * @allow list: if true;
     */
    match /sales_proposals/{salesProposalId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to commission data. Access is not restricted in this prototype.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to quiz data. Access is not restricted in this prototype.
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }

    /**
     * @description Allows access to question data. Access is not restricted in this prototype.
     * @path /questions/{questionId}
     */
    match /questions/{questionId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }
  }
}