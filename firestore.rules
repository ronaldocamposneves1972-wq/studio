/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * It uses path-based authorization and denormalization to optimize rule performance and avoid costly `get()` calls.
 * Data validation is relaxed for prototyping, focusing on authorization and relational integrity only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /roles_admin/{userId}: Documents indicate admin roles. Existence grants admin privileges.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, accessible only to the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data. Publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data. Publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals. Includes denormalized clientId for authorization.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted to product catalogs (`/consortiums`, `/credit_products`).
 * - Documents under a user path are strictly owned by that user.
 * - Relational integrity is enforced on create and update operations to maintain data consistency.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow direct authorization without additional reads.
 *
 * Structural Segregation:
 * - Private user data is stored under the `/users/{userId}` path, while public product information resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has an admin role.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User A can create their own user document.
     * @allow (get) User A can read their own user document.
     * @deny (create) User A cannot create a user document for User B.
     * @deny (update) User A cannot update User B's user document.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) An admin can grant another user the admin role.
     * @allow (get) Any authenticated user can check if they have the admin role.
     * @deny (create) A non-admin user cannot grant themselves the admin role.
     * @deny (delete) A non-admin user cannot remove the admin role from another user.
     * @principle Existence over content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) A client can create a document for themselves.
     * @allow (get) A client can read their own documents.
     * @deny (create) A client cannot create a document for another client.
     * @deny (update) A client cannot update another client's documents.
     * @principle Path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId) && request.resource.data.clientId == clientId;
      allow update: if isSignedIn() && isOwner(clientId) && resource != null && request.resource.data.clientId == resource.data.clientId;
      allow delete: if isSignedIn() && isOwner(clientId) && resource != null;
    }

    /**
     * @description Rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for consortium product documents.
     * @path /consortiums/{consortiumId}
     * @allow (get) Any user can read consortium product data.
     * @allow (list) Any user can list consortium products.
     * @deny (create) Only admins can create consortium products.
     * @deny (update) Only admins can update consortium products.
     * @principle Public read access with owner-only writes.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get) Any user can read credit product data.
     * @allow (list) Any user can list credit products.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
     * @description Rules for products
     * @path /products
     */
     match /products {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for product combo documents.
     * @path /product_combos/{productComboId}
     */
    match /product_combos/{productComboId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     *  Data is denormalized where needed to avoid `get()` calls in security rules.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for commission documents.
     * @path /commissions/{commissionId}
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for quiz documents.
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for question documents.
     * @path /questions/{questionId}
     */
    match /questions/{questionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}