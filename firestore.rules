/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data,
 *              while allowing public read access to product catalogs.
 *
 * Data Structure:
 * - /users/{userId}: Stores user-specific data, accessible only by the user.
 * - /roles_admin/{userId}: Used to grant admin role to users. The existence of a
 *     document under this path grants admin privileges to the corresponding user.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, accessible only by the specific client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data.
 * - /sales_orders/{salesOrderId}: Stores sales order data.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /suppliers/{supplierId}: Stores supplier data.
 * - /cost_centers/{costCenterId}: Stores cost center data.
 * - /expense_categories/{categoryId}: Stores expense category data.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID in the path (`/users/{userId}`).
 * - `list` operations are generally allowed only within a user's own data tree.
 * - Admin roles are determined by the existence of documents in `/roles_admin/{userId}`.
 * - Data required for authorization is denormalized to avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

     /**
      * @description Allows checking admin role based on document existence.
      * @path /roles_admin/{userId}
      * @allow get: if true;
      * @allow list: if false;
      * @allow create: if true;
      * @allow update: if false;
      * @allow delete: if true;
      * @principle Uses document existence to determine admin role.
      */
    match /roles_admin/{userId} {
        allow get: if true; // Publicly readable for checking admin status
        allow list: if false; // Prevent listing of admin roles
        allow create: if true; // Any authenticated user can be made an admin
        allow update: if false; // Prevent updates
        allow delete: if true; // Admin role can be revoked
    }

    /**
     * @description Allows reading and writing client data. No ownership enforced
     * @path /clients/{clientId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows a client to read and write their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, update, delete) if request.auth.uid == clientId
     * @allow (get, list) if request.auth.uid == clientId
     * @deny (create, update, delete) if request.auth.uid != clientId
     * @deny (get, list) if request.auth.uid != clientId
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/documents/{documentId} {
        function isOwner(clientId) {
            return request.auth.uid == clientId;
        }
        allow get, list: if isOwner(clientId);
        allow create: if isOwner(clientId);
        allow update: if isOwner(clientId) && resource != null;
        allow delete: if isOwner(clientId) && resource != null;
    }

    /**
     * @description Allows reading and writing financial institution data. No ownership enforced
     * @path /financial_institutions/{financialInstitutionId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing consortium product data. No ownership enforced
     * @path /consortiums/{consortiumId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing credit product data. No ownership enforced
     * @path /credit_products/{creditProductId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing product combo data. No ownership enforced
     * @path /product_combos/{productComboId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing sales proposal data. No ownership enforced
     * @path /sales_proposals/{salesProposalId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

   /**
     * @description Allows reading and writing sales order data. No ownership enforced
     * @path /sales_orders/{salesOrderId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing commission data. No ownership enforced
     * @path /commissions/{commissionId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing quiz data. No ownership enforced
     * @path /quizzes/{quizId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing question data. No ownership enforced
     * @path /questions/{questionId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
     * @description Allows reading and writing supplier data. No ownership enforced
     * @path /suppliers/{supplierId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing cost center data. No ownership enforced
     * @path /cost_centers/{costCenterId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /cost_centers/{costCenterId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows reading and writing expense category data. No ownership enforced
     * @path /expense_categories/{categoryId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but restricts writes.
     */
    match /expense_categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}