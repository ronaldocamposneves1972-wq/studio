/**
 * @fileoverview Firestore Security Rules for Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and role.
 * Access is granted based on ownership (e.g., a user can only access their own profile)
 * and, where appropriate, on role-based access control. Data shape validation is minimal
 * to allow for rapid prototyping and schema iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Stores sales data for a specific user (sales representative),
 *   accessible only by the user and admins.
 * - /clients/{clientId}: Stores client information, accessible by authorized users (e.g., Admin, Gestor, Atendente).
 * - /products/{productId}: Stores product information, accessible by authorized users (e.g., Admin, Gestor).
 * - /banks/{bankId}: Stores bank information, accessible by authorized users (e.g., Admin, Gestor, Financeiro).
 * - /quizzes/{quizId}: Stores quiz configurations. Accessible to all users; logged-in users can perform CRUD operations, while logged-out users can only read and send responses.
 * - /webhooks/{webhookId}: Stores webhook configurations, accessible only by admins.
 * - /roles_admin/{userId}: Indicates admin status; document existence implies admin role.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Default security posture is strict; any ambiguous access is denied unless explicitly allowed.
 * - Data validation is limited to authorization-critical fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper function)
     * @allow N/A
     * @deny N/A
     * @principle Verified Identity
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @path N/A (Helper function)
     * @allow N/A
     * @deny N/A
     * @principle Ownership
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     *              This also verifies that the document exists.
     * @path N/A (Helper function)
     * @allow N/A
     * @deny N/A
     * @principle Ownership & Existence Check
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
        /**
     * @description Checks if the user has admin privileges by checking the /roles_admin/{userId} collection.
     * @path N/A (Helper function)
     * @allow N/A
     * @deny N/A
     * @principle Role-based Access Control
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user getting their own profile: request.auth.uid == userId
     * @allow (create) Authenticated user creating their own profile: request.auth.uid == userId
     * @allow (update) Authenticated user updating their own profile: request.auth.uid == userId
     * @allow (delete) Authenticated user deleting their own profile: request.auth.uid == userId
     * @deny (get) Authenticated user getting someone else's profile: request.auth.uid != userId
     * @deny (create) Unauthenticated user creating a profile.
     * @deny (update) Authenticated user updating someone else's profile: request.auth.uid != userId
     * @deny (delete) Authenticated user deleting someone else's profile: request.auth.uid != userId
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /users/{userId}/sales/{saleId} documents.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get) Authenticated user getting their own sale: request.auth.uid == userId
     * @allow (create) Authenticated user creating a sale under their profile: request.auth.uid == userId
     * @allow (update) Authenticated user updating their own sale: request.auth.uid == userId
     * @allow (delete) Authenticated user deleting their own sale: request.auth.uid == userId
     * @deny (get) Authenticated user getting someone else's sale: request.auth.uid != userId
     * @deny (create) Authenticated user creating a sale under someone else's profile: request.auth.uid != userId
     * @deny (update) Authenticated user updating someone else's sale: request.auth.uid != userId
     * @deny (delete) Authenticated user deleting someone else's sale: request.auth.uid != userId
     * @principle Enforces document ownership for reads and writes within a user's data tree.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /clients/{clientId} documents.
     * @path /clients/{clientId}
     * @allow (get) Any authenticated user can get a client.
     * @allow (list) Any authenticated user can list clients.
     * @allow (create) Any authenticated user can create a client.
     * @allow (update) Any authenticated user can update a client.
     * @allow (delete) Any authenticated user can delete a client.
     * @deny (get) Unauthenticated user cannot get a client.
     * @deny (list) Unauthenticated user cannot list clients.
     * @deny (create) Unauthenticated user cannot create a client.
     * @deny (update) Unauthenticated user cannot update a client.
     * @deny (delete) Unauthenticated user cannot delete a client.
     * @principle Allows access to client information for authenticated users.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() || isAdmin();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Rule for /products/{productId} documents.
     * @path /products/{productId}
     * @allow (get) Any authenticated user can get a product.
     * @allow (list) Any authenticated user can list products.
     * @allow (create) Any authenticated user can create a product.
     * @allow (update) Any authenticated user can update a product.
     * @allow (delete) Any authenticated user can delete a product.
     * @deny (get) Unauthenticated user cannot get a product.
     * @deny (list) Unauthenticated user cannot list products.
     * @deny (create) Unauthenticated user cannot create a product.
     * @deny (update) Unauthenticated user cannot update a product.
     * @deny (delete) Unauthenticated user cannot delete a product.
     * @principle Allows access to product information for authenticated users.
     */
    match /products/{productId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() || isAdmin();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Rule for /banks/{bankId} documents.
     * @path /banks/{bankId}
     * @allow (get) Any authenticated user can get a bank.
     * @allow (list) Any authenticated user can list banks.
     * @allow (create) Any authenticated user can create a bank.
     * @allow (update) Any authenticated user can update a bank.
     * @allow (delete) Any authenticated user can delete a bank.
     * @deny (get) Unauthenticated user cannot get a bank.
     * @deny (list) Unauthenticated user cannot list banks.
     * @deny (create) Unauthenticated user cannot create a bank.
     * @deny (update) Unauthenticated user cannot update a bank.
     * @deny (delete) Unauthenticated user cannot delete a bank.
     * @principle Allows access to bank information for authenticated users.
     */
    match /banks/{bankId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() || isAdmin();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Rule for /quizzes/{quizId} documents.
     * Logged-in users can perform CRUD operations, while logged-out users can only read and send responses.
     * @path /quizzes/{quizId}
     * @allow (get) Any user can read a quiz.
     * @allow (list) Any user can list quizzes.
     * @allow (create) Logged-in users can create quizzes.
     * @allow (update) Logged-in users can update quizzes.
     * @allow (delete) Logged-in users can delete quizzes.
     * @deny (create) Logged-out users cannot create quizzes.
     * @deny (update) Logged-out users cannot update quizzes.
     * @deny (delete) Logged-out users cannot delete quizzes.
     * @principle Allows read access to all, and CRUD access for logged-in users.
     */
    match /quizzes/{quizId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() || isAdmin();
        allow update: if isSignedIn() || isAdmin();
        allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Rule for /webhooks/{webhookId} documents.
     * @path /webhooks/{webhookId}
     * @allow (get) Admin users can get a webhook.
     * @allow (list) Admin users can list webhooks.
     * @allow (create) Admin users can create a webhook.
     * @allow (update) Admin users can update a webhook.
     * @allow (delete) Admin users can delete a webhook.
     * @deny (get) Non-admin users cannot get a webhook.
     * @deny (list) Non-admin users cannot list webhooks.
     * @deny (create) Non-admin users cannot create a webhook.
     * @deny (update) Non-admin users cannot update a webhook.
     * @deny (delete) Non-admin users cannot delete a webhook.
     * @principle Restricts webhook access to admin users only.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
      /**
     * @description Rule for /roles_admin/{userId} documents.
     * @path /roles_admin/{userId}
     * @allow (get) Only admins can get a role.
     * @allow (list) Only admins can list roles.
     * @allow (create) Only admins can create a role.
     * @allow (update) Only admins can update a role.
     * @allow (delete) Only admins can delete a role.
     * @deny (get) Non-admins cannot get a role.
     * @deny (list) Non-admins cannot list roles.
     * @deny (create) Non-admins cannot create a role.
     * @deny (update) Non-admins cannot update a role.
     * @deny (delete) Non-admins cannot delete a role.
     */
    match /roles_admin/{userId} {
          allow get: if isAdmin();
          allow list: if false;
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
    }
    /**
     * @description Rules for /accounts/{accountId} documents.
     * @path /accounts/{accountId}
     * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
     * @deny (get, list, create, update, delete) Unauthenticated users are denied all operations.
     * @principle Allows authenticated users full access to account data.
     */
    match /accounts/{accountId} {
          allow get: if isSignedIn() || isAdmin();
          allow list: if isSignedIn() || isAdmin();
          allow create: if isSignedIn() || isAdmin();
          allow update: if isSignedIn() || isAdmin();
          allow delete: if isSignedIn() || isAdmin();
    }
     /**
      * @description Rules for /transactions/{transactionId} documents.
      * @path /transactions/{transactionId}
      * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
      * @deny (get, list, create, update, delete) Unauthenticated users are denied all operations.
      * @principle Allows authenticated users full access to transaction data.
      */
    match /transactions/{transactionId} {
          allow get: if isSignedIn() || isAdmin();
          allow list: if isSignedIn() || isAdmin();
          allow create: if isSignedIn() || isAdmin();
          allow update: if isSignedIn() || isAdmin();
          allow delete: if isSignedIn() || isAdmin();
    }
    /**
     * @description Rules for /payablesReceivables/{prId} documents.
     * @path /payablesReceivables/{prId}
     * @allow (get, list, create, update, delete) Any authenticated user can perform any operation.
     * @deny (get, list, create, update, delete) Unauthenticated users are denied all operations.
     * @principle Allows authenticated users full access to payables/receivables data.
     */
    match /payablesReceivables/{prId} {
          allow get: if isSignedIn() || isAdmin();
          allow list: if isSignedIn() || isAdmin();
          allow create: if isSignedIn() || isAdmin();
          allow update: if isSignedIn() || isAdmin();
          allow delete: if isSignedIn() || isAdmin();
    }
  }
}