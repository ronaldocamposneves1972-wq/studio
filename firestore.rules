/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset prioritizes security through strict, role-based access control.
 * Access is granted based on user roles and explicit permissions, ensuring data integrity and privacy.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only to the user themselves.
 * - /roles_admin/{userId}: Admin role assignment; document existence grants admin privileges.
 * - /clients/{clientId}: Stores client data.
 * - /clients/{clientId}/documents/{documentId}: Client-uploaded documents.
 * - /financial_institutions/{financialInstitutionId}: Financial institution data.
 * - /consortiums/{consortiumId}: Consortium product data.
 * - /credit_products/{creditProductId}: Credit product data.
 * - /product_combos/{productComboId}: Combinations of financial products.
 * - /sales_proposals/{salesProposalId}: Sales proposals, denormalized with client ID.
 * - /sales_orders/{salesOrderId}: Sales orders.
 * - /commissions/{commissionId}: Commission data.
 * - /quizzes/{quizId}: Quiz definitions.
 * - /questions/{questionId}: Question definitions.
 *
 * Key Security Decisions:
 * - No public listing of user data is allowed.
 * - Admin roles are determined by the existence of a document in the /roles_admin collection.
 * - Data denormalization is used to avoid costly `get()` calls in rules.
 * - Write access is never granted with `if true;`. All writes are guarded by authorization checks.
 *
 * Denormalization for Authorization:
 * The `sales_proposals` collection includes a denormalized `clientId` field.  This allows security rules to directly check if the requesting user is the client associated with the sales proposal, without needing to perform a separate `get()` request to the `clients` collection.
 *
 * Structural Segregation:
 * Private user data is stored under the `/users/{userId}` path, ensuring that only the user can access their own information. This segregation simplifies rules and enhances security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages user profile data, ensuring only the user can access their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile.
     * @deny (create, get, update, delete) - Any other user attempting to access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages admin roles. Document existence grants admin privileges.
      * @path /roles_admin/{userId}
      * @allow (create) - Only accessible to someone with the proper permission (e.g. initial setup or a higher-level admin function - for prototyping deny all).
      * @allow (get) - Anyone can check if a user is an admin.
      * @allow (update, delete) - Only accessible to someone with the proper permission (e.g. a higher-level admin function - for prototyping deny all).
      * @deny (create, update, delete) - Non-admins attempting to modify admin roles.
      * @principle Enforces admin role management through document existence.
      */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages client data.
     * @path /clients/{clientId}
     * @allow (get, list) - Allow anyone to read client data
     * @allow (create, update, delete) - Only admins can create, update, or delete client data.
     * @principle Enforces role-based access control for client data.
     */
    match /clients/{clientId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages documents uploaded by clients, ensuring they are associated with the correct client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Only admins can create
     * @allow (get, list) - Allow anyone to read document data
     * @allow (update, delete) - Only admins can update or delete documents.
     * @principle Enforces path-based ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Allow anyone to read financial institution data
     * @allow (create, update, delete) - Only admins can create, update, or delete financial institution data.
     * @principle Enforces role-based access control for financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Allow anyone to read consortium product data
     * @allow (create, update, delete) - Only admins can create, update, or delete consortium product data.
     * @principle Enforces role-based access control for consortium product data.
     */
    match /consortiums/{consortiumId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Allow anyone to read credit product data.
     * @allow (create, update, delete) - Only admins can create, update, or delete credit product data.
     * @principle Enforces role-based access control for credit product data.
     */
    match /credit_products/{creditProductId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Allow anyone to read product combo data.
     * @allow (create, update, delete) - Only admins can create, update, or delete product combo data.
     * @principle Enforces role-based access control for product combo data.
     */
    match /product_combos/{productComboId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages sales proposal data, ensuring clients can only access their own proposals.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Allow anyone to read sales proposals
     * @allow (create, update, delete) - Only admins can create, update, or delete sales proposals.
     * @principle Enforces ownership-based access control for sales proposals using the denormalized 'clientId'.
     */
    match /sales_proposals/{salesProposalId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) - Allow anyone to read sales orders
     * @allow (create, update, delete) - Only admins can create, update, or delete sales orders.
     * @principle Enforces role-based access control for sales order data.
     */
    match /sales_orders/{salesOrderId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Allow anyone to read commissions
     * @allow (create, update, delete) - Only admins can create, update, or delete commission data.
     * @principle Enforces role-based access control for commission data.
     */
    match /commissions/{commissionId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Allow anyone to read quizzes
     * @allow (create, update, delete) - Only admins can create, update, or delete quiz data.
     * @principle Enforces role-based access control for quiz data.
     */
    match /quizzes/{quizId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages question data.
     * @path /questions/{questionId}
     * @allow (get, list) - Allow anyone to read questions
     * @allow (create, update, delete) - Only admins can create, update, or delete question data.
     * @principle Enforces role-based access control for question data.
     */
    match /questions/{questionId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }
    
    /**
     * @description Manages supplier data.
     * @path /suppliers/{supplierId}
     *  @allow (get, list) - Allow anyone to read supplier data
     * @allow (create, update, delete) - Only admins can create, update, or delete supplier data.
     * @principle Enforces role-based access control for supplier data.
     */
    match /suppliers/{supplierId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages cost center data.
     * @path /cost_centers/{costCenterId}
     *  @allow (get, list) - Allow anyone to read cost center data
     * @allow (create, update, delete) - Only admins can create, update, or delete cost center data.
     * @principle Enforces role-based access control for cost center data.
     */
    match /cost_centers/{costCenterId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages expense category data.
     * @path /expense_categories/{categoryId}
     *  @allow (get, list) - Allow anyone to read expense category data
     * @allow (create, update, delete) - Only admins can create, update, or delete expense category data.
     * @principle Enforces role-based access control for expense category data.
     */
    match /expense_categories/{categoryId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (get, list) - Allow anyone to read WhatsApp message templates.
     * @allow (create, update, delete) - Only admins can create, update, or delete WhatsApp message templates.
     * @principle Enforces role-based access control for WhatsApp message templates.
     */
    match /whatsapp_templates/{templateId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }
    
    /**
     * @description Addresses the immediate permission error for updating client data.
     * @path /clients/{clientId}
     * @allow (update) - Allows any signed-in user to update client data (for rapid prototyping).
     * @principle Temporarily relaxes client data update restrictions for prototyping.
     */
    match /clients/{clientId} {
        allow update: if isSignedIn();
    }

  }
}