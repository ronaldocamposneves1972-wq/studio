/**
 * @file Overview
 * This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data for a user, accessible only by the user and admins.
 * - /clients/{clientId}: Client information, accessible by users with appropriate roles.
 * - /products/{productId}: Product information, accessible by users with appropriate roles.
 * - /banks/{bankId}: Bank information, accessible by users with appropriate roles.
 * - /quizzes/{quizId}: Quiz configurations, accessible by users with appropriate roles.
 * - /webhooks/{webhookId}: Webhook configurations, accessible only by admins.
 * - /roles_admin/{userId}: Documents indicating admin status.
 *
 * Key Security Decisions:
 * - User listing is not allowed.
 * - Default security posture is strict: deny all access unless explicitly allowed.
 * - The ruleset uses role-based access control to manage permissions for different user roles (Admin, Gestor, Atendente, Financeiro).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner or an admin.
     * @deny (get, create, update, delete, list) if the user is not the owner or an admin.
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId} {
      //function isAdmin() {
      //  return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      //}

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to sales data associated with a specific user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, create, update, delete, list) if the user is the owner or an admin.
     * @deny (get, create, update, delete, list) if the user is not the owner or an admin.
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId}/sales/{saleId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && resource.data.salesRepId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.salesRepId == userId;
    }

    /**
     * @description Controls access to client information.
     * @path /clients/{clientId}
     * @allow (get, create, update, delete, list) if the user has an appropriate role (Admin, Gestor, Atendente).
     * @deny (get, create, update, delete, list) if the user does not have an appropriate role.
     * @principle Restricts access based on user roles.
     */
    match /clients/{clientId} {
      // Allow reads by anyone. In a production app this would be restricted.
      // Access control on write depends on your business logic.
      //  One example is to only allow the user that created it to modify it.
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add role validation
      allow update: if isSignedIn(); // TODO: Add role validation
      allow delete: if isSignedIn(); // TODO: Add role validation
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get, create, update, delete, list) if the user has an appropriate role (Admin, Gestor).
     * @deny (get, create, update, delete, list) if the user does not have an appropriate role.
     * @principle Restricts access based on user roles.
     */
    match /products/{productId} {
      // Allow reads by anyone. In a production app this would be restricted.
      // Access control on write depends on your business logic.
      //  One example is to only allow the user that created it to modify it.
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add role validation
      allow update: if isSignedIn(); // TODO: Add role validation
      allow delete: if isSignedIn(); // TODO: Add role validation
    }

    /**
     * @description Controls access to bank information.
     * @path /banks/{bankId}
     * @allow (get, create, update, delete, list) if the user has an appropriate role (Admin, Gestor, Financeiro).
     * @deny (get, create, update, delete, list) if the user does not have an appropriate role.
     */
    match /banks/{bankId} {
      // Allow reads by anyone. In a production app this would be restricted.
      // Access control on write depends on your business logic.
      //  One example is to only allow the user that created it to modify it.
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add role validation
      allow update: if isSignedIn(); // TODO: Add role validation
      allow delete: if isSignedIn(); // TODO: Add role validation
    }

    /**
     * @description Controls access to quiz configurations.
     * @path /quizzes/{quizId}
     * @allow (get, create, update, delete, list) if the user has an appropriate role (Admin, Gestor).
     * @deny (get, create, update, delete, list) if the user does not have an appropriate role.
     * @principle Restricts access based on user roles.
     */
    match /quizzes/{quizId} {
      // Allow reads by anyone. In a production app this would be restricted.
      // Access control on write depends on your business logic.
      //  One example is to only allow the user that created it to modify it.
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add role validation
      allow update: if isSignedIn(); // TODO: Add role validation
      allow delete: if isSignedIn(); // TODO: Add role validation
    }

    /**
     * @description Controls access to webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (get, create, update, delete, list) if the user is an admin.
     * @deny (get, create, update, delete, list) if the user is not an admin.
     * @principle Restricts access based on user roles.
     */
    match /webhooks/{webhookId} {
     //function isAdmin() {
     //   return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
     // }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn(); // TODO: Add role validation
      allow list: if false;
      allow create: if isSignedIn(); // TODO: Add role validation
      allow update: if isSignedIn(); // TODO: Add role validation
      allow delete: if isSignedIn(); // TODO: Add role validation
    }
        /**
     * @description Controls access to admin role.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete, list) if the user is an admin.
     * @deny (get, create, update, delete, list) if the user is not an admin.
     * @principle Restricts access based on user roles.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn(); // TODO: Add role validation
      allow list: if false;
      allow create: if isSignedIn(); // TODO: Add role validation
      allow update: if isSignedIn(); // TODO: Add role validation
      allow delete: if isSignedIn(); // TODO: Add role validation
    }
  }
}