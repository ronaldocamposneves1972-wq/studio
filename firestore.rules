/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model.  It blends ownership-based access control for user-specific data with public read access for certain collections. Strict ownership is enforced on user profiles and client-owned resources.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information.
 * - `/roles_admin/{userId}`: Document existence grants admin role.
 * - `/clients/{clientId}`: Client data.
 * - `/clients/{clientId}/documents/{documentId}`: Documents uploaded by clients.
 * - `/financial_institutions/{financialInstitutionId}`: Financial institution data.
 * - `/consortiums/{consortiumId}`: Consortium product data.
 * - `/credit_products/{creditProductId}`: Credit product data.
 * - `/product_combos/{productComboId}`: Product combo data.
 * - `/sales_proposals/{salesProposalId}`: Sales proposal data.
 * - `/sales_orders/{salesOrderId}`: Sales order data.
 * - `/commissions/{commissionId}`: Commission data.
 * - `/quizzes/{quizId}`: Quiz data.
 * - `/questions/{questionId}`: Question data.
 * - `/suppliers/{supplierId}`: Supplier data.
 * - `/cost_centers/{costCenterId}`: Cost center data.
 * - `/expense_categories/{categoryId}`: Expense category data.
 * - `/whatsapp_templates/{templateId}`: WhatsApp message templates.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admin roles are determined by document existence in `/roles_admin/{userId}`.
 * - Data is denormalized where necessary to avoid costly `get()` calls in security rules. For example, `clientId` is present on SalesProposals.
 * - The `update` operation on `/clients/{clientId}` failed because there was no rule allowing an unauthenticated user to update Client documents. Now, `update` operation on `/clients/{clientId}` is allowed if the user is signed in.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the ID of the resource.
     */
     function isResourceOwner(resourceId) {
      return request.auth.uid == resourceId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return (isOwner(userId) && resource.data != null);
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for user-specific data.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their own user document.
     * @deny (create) User 'user456' cannot create a document under 'user123'.
     * @allow (get) User 'user123' can read their own user document.
     * @deny (get) User 'user456' cannot read 'user123's user document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) An admin can grant another user admin rights.
     * @deny (create) A non-admin user cannot grant admin rights.
     * @allow (get) Any signed-in user can check for admin role.
     * @deny (get) Anonymous user cannot check for admin role.
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false; // No updates allowed.
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for client data.
     * @path /clients/{clientId}
     * @allow (create) Any authenticated user can create a client.
     * @deny (create) An unauthenticated user cannot create a client.
     * @allow (get) Any user can read client data.
     * @deny (get) An unauthenticated user cannot read client data.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) A client can create a document under their client ID.
     * @deny (create) A client cannot create a document under another client's ID.
     * @allow (get) Any user can read a client document.
     * @deny (get) An unauthenticated user cannot read a client document.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == clientId;
      allow update: if isSignedIn() && request.auth.uid == clientId;
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) Only admins can create financial institutions.
     * @deny (create) Non-admin users cannot create financial institutions.
     * @allow (get) Any user can read financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (create) Only admins can create consortium products.
     * @deny (create) Non-admin users cannot create consortium products.
     * @allow (get) Any user can read consortium product data.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (create) Only admins can create credit products.
     * @deny (create) Non-admin users cannot create credit products.
     * @allow (get) Any user can read credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for product combo data.
     * @path /product_combos/{productComboId}
     * @allow (create) Only admins can create product combos.
     * @deny (create) Non-admin users cannot create product combos.
     * @allow (get) Any user can read product combo data.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) Any signed-in user can create a sales proposal.
     * @deny (create) An unauthenticated user cannot create a sales proposal.
     * @allow (get) Any user can read sales proposal data.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (create) Only admins can create sales orders.
     * @deny (create) Non-admin users cannot create sales orders.
     * @allow (get) Any user can read sales order data.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for commission data.
     * @path /commissions/{commissionId}
     * @allow (create) Only admins can create commissions.
     * @deny (create) Non-admin users cannot create commissions.
     * @allow (get) Any user can read commission data.
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for quiz data.
     * @path /quizzes/{quizId}
     * @allow (create) Only admins can create quizzes.
     * @deny (create) Non-admin users cannot create quizzes.
     * @allow (get) Any user can read quiz data.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for question data.
     * @path /questions/{questionId}
     * @allow (create) Only admins can create questions.
     * @deny (create) Non-admin users cannot create questions.
     * @allow (get) Any user can read question data.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for supplier data.
     * @path /suppliers/{supplierId}
     * @allow (create) Only admins can create suppliers.
     * @deny (create) Non-admin users cannot create suppliers.
     * @allow (get) Any user can read supplier data.
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (create) Only admins can create cost centers.
     * @deny (create) Non-admin users cannot create cost centers.
     * @allow (get) Any user can read cost center data.
     */
    match /cost_centers/{costCenterId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (create) Only admins can create expense categories.
     * @deny (create) Non-admin users cannot create expense categories.
     * @allow (get) Any user can read expense category data.
     */
    match /expense_categories/{categoryId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (create) Only admins can create templates.
     * @deny (create) Non-admin users cannot create templates.
     * @allow (get) Any user can read template data.
     */
    match /whatsapp_templates/{templateId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}