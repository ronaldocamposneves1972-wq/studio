/**
 * @fileoverview Firestore Security Rules for Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User-specific data is secured via path-based ownership, while broader access is
 * governed by role checks. Data validation is relaxed to enable rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data; accessible only by the user and admins.
 * - `/users/{userId}/sales/{saleId}`: Stores sales data for a user; accessible only by the user and admins.
 * - `/clients/{clientId}`: Stores client data; accessible based on user roles.
 * - `/products/{productId}`: Stores product data; accessible based on user roles.
 * - `/banks/{bankId}`: Stores bank data; accessible based on user roles.
 * - `/quizzes/{quizId}`: Stores quiz data; publicly readable, but not writable.
 * - `/webhooks/{webhookId}`: Stores webhook configurations; only accessible to admins.
 * - `/roles_admin/{userId}`: Indicates admin status; existence implies admin role.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Data validation is minimized to focus on authorization during prototyping.
 * - The `quizzes` collection is publicly readable but not writable.
 *
 * Denormalization for Authorization:
 * - Where applicable, data is denormalized to simplify authorization checks and avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @param {request.Resource} resource - The resource to check
     * @returns {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId, resource) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Checks if the user has the Admin role.
     * @returns {boolean} True if the user is an Admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User can create their own document if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can access their own document if authenticated and the userId matches their auth.uid. Admins can also access.
     * @deny (create) - User cannot create a document for another user.
     * @deny (get, update, delete) - User cannot access another user's document.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if (isOwner(userId) && isSignedIn()) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /users/{userId}/sales/{saleId} subcollection.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create, get, update, delete) - User can manage their own sales data if authenticated and the userId matches their auth.uid. Admins can also access.
     * @deny (create, get, update, delete) - User cannot access another user's sales data.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && isSignedIn();
      allow update: if (isOwner(userId) && isSignedIn()) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create, get, update, delete) - Admins can manage clients.
     * @deny (create, get, update, delete) - Non-admins cannot manage clients.
     * @principle Enforces role-based access control.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (create, get, update, delete) - Admins can manage products.
     * @deny (create, get, update, delete) - Non-admins cannot manage products.
     * @principle Enforces role-based access control.
     */
    match /products/{productId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /banks/{bankId} collection.
     * @path /banks/{bankId}
     * @allow (create, get, update, delete) - Admins can manage banks.
     * @deny (create, get, update, delete) - Non-admins cannot manage banks.
     * @principle Enforces role-based access control.
     */
    match /banks/{bankId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /quizzes/{quizId} collection.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Any user (authenticated or not) can read quizzes.
     * @deny (create, update, delete) - No user can create, update, or delete quizzes.
     * @principle Public read access with restricted writes.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /webhooks/{webhookId} collection.
     * @path /webhooks/{webhookId}
     * @allow (create, get, update, delete) - Admins can manage webhooks.
     * @deny (create, get, update, delete) - Non-admins cannot manage webhooks.
     * @principle Enforces role-based access control.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false; // Only the backend can create admin roles
        allow update: if false;
        allow delete: if false; // Admin roles should only be managed by the backend
    }
  }
}