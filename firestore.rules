/**
 * @fileOverview Firestore Security Rules for a Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (e.g., sales reps and their sales) and role-based access control for shared resources (e.g., clients, products, banks). It uses structural segregation to simplify security rules and authorization independence to avoid costly `get()` operations.  Quizzes can be submitted by unauthenticated users.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data for a specific sales representative.
 * - /clients/{clientId}: Client information, accessible by users with appropriate roles.
 * - /products/{productId}: Product information, accessible by users with appropriate roles.
 * - /banks/{bankId}: Bank information, accessible by users with appropriate roles.
 * - /quizzes/{quizId}: Quiz configurations, accessible by users with appropriate roles.
 * - /webhooks/{webhookId}: Webhook configurations, accessible only by admins.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no top-level `/users` collection).
 * - Role-based access is assumed for certain collections (e.g., clients, products, banks) but not explicitly implemented in this prototype.  It's a placeholder for future expansion.
 * - Missing ownership fields in the schema will result in a `// TODO` rule and a critical comment.
 * - Quiz submissions are allowed by anyone, even unauthenticated users.
 *
 * Denormalization for Authorization:
 *  - In a production environment, consider denormalizing role information onto user documents or using a separate collection to manage roles to avoid costly `get()` operations.
 *
 * Structural Segregation:
 *  - User-specific data (sales) is stored under the `/users/{userId}` path, ensuring clear ownership and simplified security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user profile information.
     * @path /users/{userId}
     * @allow (read, write): if isSignedIn() && isOwner(userId);
     * @deny (read, write): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //function isAdmin() {
      //  return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      //}
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rule for sales data associated with a specific user (sales representative).
     * @path /users/{userId}/sales/{saleId}
     * @allow (read, write): if isSignedIn() && isOwner(userId);
     * @deny (read, write): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for sales data.
     */
    match /users/{userId}/sales/{saleId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

   /**
    * @description Rule for client information. Accessible by users with appropriate roles (e.g., Admin, Gestor, Atendente).
    * @path /clients/{clientId}
    * @allow (read): if true; // Example: Public read access. Adjust based on your security needs.
    * @allow (write): if false; // Example: No write access without authentication.
    * @principle Placeholder for role-based access control.
    */
    match /clients/{clientId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rule for product information (Consórcio and Crédito). Accessible by users with appropriate roles (e.g., Admin, Gestor).
     * @path /products/{productId}
     * @allow (read): if true; // Example: Public read access. Adjust based on your security needs.
     * @allow (write): if false; // Example: No write access without authentication.
     * @principle Placeholder for role-based access control.
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rule for bank information. Accessible by users with appropriate roles (e.g., Admin, Gestor, Financeiro).
     * @path /banks/{bankId}
     * @allow (read): if true; // Example: Public read access. Adjust based on your security needs.
     * @allow (write): if false; // Example: No write access without authentication.
     * @principle Placeholder for role-based access control.
     */
    match /banks/{bankId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rule for quiz configurations. Accessible by users with appropriate roles (e.g., Admin, Gestor).
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Rule for webhook configurations. Accessible only by users with Admin role.
     * @path /webhooks/{webhookId}
     */
    match /webhooks/{webhookId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rule for admin roles.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}