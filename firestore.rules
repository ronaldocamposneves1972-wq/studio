/**
 * @fileOverview Firestore Security Rules for a Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization, focusing on user ownership and role-based access.
 * Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data for a specific user, accessible only by that user and admins.
 * - /clients/{clientId}: Client data, accessible by users with appropriate roles.
 * - /products/{productId}: Product data, accessible by users with appropriate roles.
 * - /banks/{bankId}: Bank data, accessible by users with appropriate roles.
 * - /quizzes/{quizId}: Quiz data, accessible by users with appropriate roles, clients can only `get` and `list` and create a client
 * - /webhooks/{webhookId}: Webhook configurations, accessible only by admins.
 * - /roles_admin/{userId}: Indicates admin status; document existence implies admin role.
 *
 * Key Security Decisions:
 * - Strict user-ownership for data under /users/{userId}.
 * - Role-based access control for clients, products, and banks (to be implemented with denormalized role data).
 * - Webhook configurations are restricted to admins only.
 * - List operations are generally allowed for owner-specific subcollections, but not for top-level collections without role-based filters.
 * - Data validation is minimal, focusing on authorization-critical fields only.
 *
 * Denormalization for Authorization:
 * - Role-based access to clients, products, and banks will require denormalizing role information onto those documents (e.g., an `editors` map on `/clients/{clientId}`).
 *
 * Structural Segregation:
 * - User-specific data is segregated under /users/{userId} to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
    
    /**
     * @description Rules for documents in the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile: request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123': request.auth.uid != 'user123'
     * @allow (get, update, delete) User with ID 'user123' can access their own profile: request.auth.uid == 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot access 'user123' profile: request.auth.uid != 'user123'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for documents in the /users/{userId}/sales/{saleId} collection.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) User with ID 'user123' can create a sale under their profile: request.auth.uid == 'user123'
     * @deny (create) User with ID 'user456' cannot create a sale under 'user123' profile: request.auth.uid != 'user123'
     * @allow (get, update, delete) User with ID 'user123' can access their own sales data: request.auth.uid == 'user123'
     * @deny (get, update, delete) User with ID 'user456' cannot access 'user123' sales data: request.auth.uid != 'user123'
     * @principle Enforces document ownership for sales data.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for documents in the /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (get, list) Any authenticated user can read client data.
     * @deny (create, update, delete) Only users with the 'manager' role can modify client data.
     * @principle Requires role-based access control for client management.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if !isSignedIn(); // Allows unauthenticated users to create clients
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Rules for documents in the /products/{productId} collection.
     * @path /products/{productId}
     * @allow (get, list) Any authenticated user can read product data.
     * @deny (create, update, delete) Only users with the 'manager' role can modify product data.
     * @principle Requires role-based access control for product management.
     */
    match /products/{productId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for documents in the /banks/{bankId} collection.
     * @path /banks/{bankId}
     * @allow (get, list) Any authenticated user can read bank data.
     * @deny (create, update, delete) Only users with the 'finance' role can modify bank data.
     * @principle Requires role-based access control for bank management.
     */
    match /banks/{bankId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for documents in the /quizzes/{quizId} collection.
     * @path /quizzes/{quizId}
     * @allow (get, list) Any user can read quiz data.
     * @deny (create, update, delete) Only authenticated users can modify quiz data.
     * @principle Allows public read access to quizzes but restricts modification.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() || isAdmin();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Rules for documents in the /webhooks/{webhookId} collection.
     * @path /webhooks/{webhookId}
     * @allow (get, list, create, update, delete) Only admins can manage webhook configurations.
     * @principle Restricts webhook management to administrators.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
      /**
     * @description Rules for documents in the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}