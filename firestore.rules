/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User-owned data (under /users/{userId}) is strictly controlled, while other collections (products, financial institutions, etc.) are generally open for reading but restricted for modification.  The /roles_admin/{userId} collection is used to grant admin privileges.
 *
 * Data Structure:
 * The database is organized into top-level collections for different entities:
 * - /users/{userId}: Stores user profiles.
 * - /roles_admin/{userId}: Used to denote admin users. Document existence grants admin rights.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, nested under their respective clients.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores combinations of products.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /sales_orders/{salesOrderId}: Stores sales order data.
 * - /suppliers/{supplierId}: Stores supplier data.
 * - /cost_centers/{costCenterId}: Stores cost center data.
 * - /expense_categories/{categoryId}: Stores expense category data.
 * - /whatsapp_templates/{templateId}: Stores WhatsApp message templates.
 *
 * Key Security Decisions:
 * - User Listing is disallowed.
 * - Read-only collections (e.g., financial_institutions, products) are readable by anyone, but only modifiable by authenticated users with sufficient permissions.
 * - Ownership is enforced via path-based matching (e.g., /users/{userId}) and, where necessary, validated within the document itself.
 * - Authorization Independence is achieved through denormalization (e.g., clientId in sales_proposals).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource, and that the resource exists.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin privileges.
     * @returns {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Allow user to create their own profile.
     * @allow (get, list) - Allow user to read their own profile.
     * @allow (update, delete) - Allow user to update/delete their own profile.
     * @deny (create) - Deny creating a profile with a mismatched user ID.
     * @deny (get, list) - Deny reading other user profiles.
     * @deny (update, delete) - Deny updating/deleting other user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin roles. Document existence determines admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) - Allow admin user to create their own role.
     * @allow (get, list) - Allow anyone to read admin roles.
     * @allow (update, delete) - Allow admin user to update/delete their own role.
     * @deny (create) - Deny creating a role with a mismatched user ID.
     * @deny (update, delete) - Deny updating/deleting other user roles.
     * @principle Enforces document ownership for admin roles and only allows admins to grant admin roles.
     */
    match /roles_admin/{userId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if false;
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}
     * @allow (create, update, delete) - Only authenticated users can manage clients.
     * @allow (get, list) - Allow public read access.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() ;
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for documents uploaded by clients.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Allow a client to create a document in their own folder.
     * @allow (get, list) - Allow anyone to view a client's documents.
     * @allow (update, delete) - Only the client can update/delete their documents.
     * @deny (create) - Deny creating a document with a mismatched client ID.
     * @deny (update, delete) - Deny updating/deleting documents in other client folders.
     * @principle Enforces document ownership under the client's path.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for financial institutions.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify financial institutions.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for consortium products.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify consortiums.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for credit products.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify credit products.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for product combos.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify product combos.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

   /**
     * @description Rules for sales proposals.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify sales proposals.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for commissions.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify commissions.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for quizzes.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify quizzes.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for questions.
     * @path /questions/{questionId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify questions.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for sales orders.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify sales orders.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify suppliers.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /suppliers/{supplierId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Rules for cost centers.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify cost centers.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /cost_centers/{costCenterId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Rules for expense categories.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify expense categories.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /expense_categories/{categoryId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Rules for WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (get, list) - Allow public read access.
     * @allow (create, update, delete) - Only authenticated users can create/modify templates.
     * @principle Allows general read access but restricts modifications to authenticated users.
     */
    match /whatsapp_templates/{templateId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}