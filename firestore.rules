/**
 * @file Firestore Security Rules for ConsorciaTech.
 *
 * @corePhilosophy This ruleset enforces a combination of ownership-based and role-based access control.
 *  - Strict ownership is enforced for user-specific data (e.g., /users/{userId}).
 *  - Public read access is granted for product catalogs.
 *
 * @dataStructure
 *  - /users/{userId}: Stores user profiles, accessible only by the user.
 *  - /roles_admin/{userId}: Document existence grants admin privileges.
 *  - /clients/{clientId}: Stores client information.
 *  - /clients/{clientId}/documents/{documentId}: Client-owned documents.
 *  - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 *  - /consortiums/{consortiumId}: Stores consortium product data (publicly readable).
 *  - /credit_products/{creditProductId}: Stores credit product data (publicly readable).
 *  - /product_combos/{productComboId}: Stores product combo data (publicly readable).
 *  - /sales_proposals/{salesProposalId}: Stores sales proposals, accessible by associated client.
 *  - /commissions/{commissionId}: Stores commission data.
 *  - /quizzes/{quizId}: Stores quiz data.
 *  - /questions/{questionId}: Stores question data.
 *
 * @keySecurityDecisions
 *  - Product catalogs (/consortiums, /credit_products, /product_combos) are publicly readable.
 *  - User listing is disabled for privacy.
 *  - Sales proposals are secured using denormalized `clientId` for authorization.
 *
 * @denormalizationForAuthorization
 *  - The `sales_proposals` collection denormalizes the `clientId` to allow direct authorization checks without additional reads. This enables rules to efficiently verify if the requesting user is the client associated with the proposal.
 *
 * @structuralSegregation N/A. The application does not require segregation between private and public user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create, update, or delete their own profile.
     * @deny (create, update, delete) User 'otherUserId' cannot create, update, or delete the profile of user 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2'.
     * @allow (get, list) User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can get their own profile. Listing all users is not permitted.
     * @deny (get, list) User 'otherUserId' cannot read the profile of user 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages admin roles. Document existence signifies admin status.
     * @path /roles_admin/{userId}
     * @allow create User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can be granted admin role by creating a document with their user id.
     * @deny create User 'otherUserId' cannot grant admin role to user 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2'.
     * @allow (get, list) Users can determine who is an admin by checking if the document with their id exists.
     * @deny update A user is not allowed to change their user id.
     * @deny delete Only someone with permission to write users can delete an admin role.
     * @principle Uses document existence to represent admin status.
     */
    match /roles_admin/{userId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add admin role management logic.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages client data.
     * @path /clients/{clientId}
     * @allow create User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create a new client.
     * @deny create User 'otherUserId' cannot create client 'clientId'.
     * @allow (get, list) Users can get client profiles.
     * @deny update Only someone with permission to write users can update client profiles.
     * @deny delete Only someone with permission to write users can delete client profiles.
     * @principle Controls access to client data.
     */
    match /clients/{clientId} {
      allow get, list: if true; // TODO: Refine client listing permissions.
      allow create: if false; // TODO: Add client creation permissions (e.g., admin or self-registration).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages documents uploaded by clients. Only the associated client can access these documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, update, delete) User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create, update, or delete documents in their own client data.
     * @deny (create, update, delete) User 'otherUserId' cannot create, update, or delete documents in client 'clientId'.
     * @allow (get, list) User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can get documents in their own client data.
     * @deny (get, list) User 'otherUserId' cannot list documents in client 'clientId'.
     * @principle Enforces document ownership under client's path.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true; // TODO: tighten permissions - only owner should get
      allow list: if false; // TODO: decide who should list these documents
      allow create: if false; // TODO: Add client document creation logic.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow create User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create a new financial institution.
     * @deny create User 'otherUserId' cannot create financial institution 'financialInstitutionId'.
     * @allow (get, list) Users can get financial institution data.
     * @deny update Only someone with permission to write users can update financial institution data.
     * @deny delete Only someone with permission to write users can delete financial institution data.
     * @principle Controls access to financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add financial institution creation permissions (e.g., admin-only).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages consortium product data. Publicly readable.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Any user (signed in or not) can retrieve consortium product data.
     * @deny create Non-authorized users cannot create new consortium products.
     * @deny update Non-authorized users cannot update consortium products.
     * @deny delete Non-authorized users cannot delete consortium products.
     * @principle Public read access with restricted write access.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add consortium creation permissions (e.g., admin-only).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages credit product data. Publicly readable.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Any user (signed in or not) can retrieve credit product data.
     * @deny create Non-authorized users cannot create new credit products.
     * @deny update Non-authorized users cannot update credit products.
     * @deny delete Non-authorized users cannot delete credit products.
     * @principle Public read access with restricted write access.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add credit product creation permissions (e.g., admin-only).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages product combo data. Publicly readable.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Any user (signed in or not) can retrieve product combo data.
     * @deny create Non-authorized users cannot create new product combos.
     * @deny update Non-authorized users cannot update product combos.
     * @deny delete Non-authorized users cannot delete product combos.
     * @principle Public read access with restricted write access.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add product combo creation permissions (e.g., admin-only).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages sales proposal data. Access is granted to the associated client.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create, update, delete) User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create, update, or delete their own sales proposal.
     * @deny (create, update, delete) User 'otherUserId' cannot create, update, or delete sales proposal 'salesProposalId'.
     * @allow (get, list) User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can get their own sales proposal.
     * @deny (get, list) User 'otherUserId' cannot list sales proposals of client 'clientId'.
     * @principle Enforces access based on the denormalized `clientId`.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true; // TODO: Tighten get, if resource.data.clientId == request.auth.uid;
      allow list: if true; // TODO: decide who should list these sales proposals
      allow create: if false; // TODO: Add sales proposal creation permissions (e.g., associated client only).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages commission data.
     * @path /commissions/{commissionId}
     * @allow create User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create a new commission.
     * @deny create User 'otherUserId' cannot create commission 'commissionId'.
     * @allow (get, list) Users can get commission data.
     * @deny update Only someone with permission to write users can update commission data.
     * @deny delete Only someone with permission to write users can delete commission data.
     * @principle Controls access to commission data.
     */
    match /commissions/{commissionId} {
      allow get, list: if true; // TODO: Refine commission listing permissions (e.g., admin, associated user).
      allow create: if false; // TODO: Add commission creation permissions (e.g., admin-only).
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages quiz data.
     * @path /quizzes/{quizId}
     * @allow create User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create a new quiz.
     * @deny create User 'otherUserId' cannot create quiz 'quizId'.
     * @allow (get, list) Users can get quiz data.
     * @deny update Only someone with permission to write users can update quiz data.
     * @deny delete Only someone with permission to write users can delete quiz data.
     * @principle Controls access to quiz data.
     */
    match /quizzes/{quizId} {
      allow get, list: if true; // TODO: Refine quiz listing permissions.
      allow create: if false; // TODO: Add quiz creation permissions.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages question data.
     * @path /questions/{questionId}
     * @allow create User 'zt6xq8RcNGX1Ct8OwysKCGY8H7s2' can create a new question.
     * @deny create User 'otherUserId' cannot create question 'questionId'.
     * @allow (get, list) Users can get question data.
     * @deny update Only someone with permission to write users can update question data.
     * @deny delete Only someone with permission to write users can delete question data.
     * @principle Controls access to question data.
     */
    match /questions/{questionId} {
      allow get, list: if true; // TODO: Refine question listing permissions.
      allow create: if false; // TODO: Add question creation permissions.
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the requesting user is the document owner.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the requesting user is the existing document owner.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}