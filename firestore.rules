/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on ownership and role-based access.
 * It uses denormalization to avoid costly `get()` calls within rules and to improve performance.
 * Data validation is minimal, focusing on ownership and relational integrity to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /roles_admin/{userId}: Document existence confers admin privileges to the user.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents, accessible only to the specific client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, denormalizing clientId for authorization.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /settings/integrations: stores settings data.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed except where it is explicitly allowed.
 * - Data validation is relaxed to allow for rapid prototyping, but relational integrity is enforced.
 * - Public read access is not granted unless explicitly stated.
 *
 * Denormalization for Authorization:
 * - `sales_proposals` documents include a `clientId` field to allow direct authorization checks
 *   without needing to perform a `get()` on the `/clients/{clientId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants the user permissions based on their role.
     */
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    /**
     * @description Grants the user permissions based on their role.
     */
    function hasAnyRole(roles) {
      return roles.hasAny(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role);
    }


    /**
     * @description Defines access rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete) User with ID 'user123' cannot read, update, or delete the profile of 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines access rules for admin role documents.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'admin123' can be made an admin by an existing admin.
     * @deny (create) User with ID 'user123' cannot arbitrarily grant themselves admin privileges.
     * @allow (get) Any logged-in user can check if an admin role exists for a user
     * @deny (list) Nobody can list the admin roles
     * @allow (update, delete) Only an admin can update or delete admin roles.
     * @principle Enforces role-based access control; existence of document determines admin status.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for client documents.
     * @path /clients/{clientId}
     * @allow (create) Any authenticated user can create a client document.
     * @deny (create) Creating a client document without authentication.
     * @allow (get, list) Any authenticated user can read client documents.
     * @deny (update, delete) Only an admin can update or delete client documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for client document subcollection.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) User with ID 'client123' can create their own document.
     * @deny (create) User with ID 'client123' cannot create a document for 'client456'.
     * @allow (get, list, update, delete) User with ID 'client123' can read, update, and delete their own documents.
     * @deny (get, list, update, delete) User with ID 'client123' cannot read, update, or delete documents of 'client456'.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == resource.data.clientId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) Any authenticated user can read financial institution documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete financial institution documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for consortium documents.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) Any authenticated user can read consortium documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete consortium documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /consortiums/{consortiumId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) Any authenticated user can read credit product documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete credit product documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /credit_products/{creditProductId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get, list) Any authenticated user can read product combo documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete product combo documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /product_combos/{productComboId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) Any authenticated user can read sales proposal documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete sales proposal documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for commission documents.
     * @path /commissions/{commissionId}
     * @allow (get, list) Any authenticated user can read commission documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete commission documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get, list) Any authenticated user can read quiz documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete quiz documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for question documents.
     * @path /questions/{questionId}
     * @allow (get, list) Any authenticated user can read question documents.
     * @deny (create, update, delete) Only an admin can create, update, or delete question documents.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /questions/{questionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for the integrations settings document.
     * @path /settings/integrations
     * @allow (get) Any authenticated user can read the settings.
     * @deny (create, update, delete) Only an admin can create, update, or delete the settings.
     * @principle Grants read access to all authenticated users; restricts write access to admins.
     */
    match /settings/integrations {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}