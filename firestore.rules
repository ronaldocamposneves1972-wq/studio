/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a path-based ownership model for user data and a public-read, owner-write model for other top-level collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user-specific data, accessible only by the authenticated user with matching UID.
 * - /roles_admin/{userId}: Document existence grants admin role to the user.
 * - /clients/{clientId}: Stores client data, accessible to authenticated users.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only by the authenticated user with matching client ID.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, accessible to authenticated users.
 * - /commissions/{commissionId}: Stores commission data, accessible to authenticated users.
 * - /quizzes/{quizId}: Stores quiz data, accessible to authenticated users.
 * - /questions/{questionId}: Stores question data, accessible to authenticated users.
 *
 * Key Security Decisions:
 * - Listing all users is denied.
 * - All `create`, `update`, and `delete` operations require user authentication.
 * - Read access is generally open for top-level collections, but write access is restricted to document owners or admins.
 *
 * Authorization Independence:
 * - The `clientId` is denormalized within `sales_proposals` to grant access for the specific client.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the authenticated user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, or delete /users/user123.
     * @deny (create) - User with UID 'user456' cannot create /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows only the authenticated user to read and write their own user document.
     * @path /roles_admin/{userId}
     * @allow (create) - User with UID 'user123' can create /roles_admin/user123.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, or delete /roles_admin/user123.
     * @deny (create) - User with UID 'user456' cannot create /roles_admin/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete /roles_admin/user123.
     * @principle Enforces document ownership for writes.
     */
     match /roles_admin/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read client data, but only allows creating a client document with a matching ID.
     * @path /clients/{clientId}
     * @allow (get, list) - Any authenticated user can read client data.
     * @allow (create) - User with UID 'client123' can create /clients/client123.
     * @deny (create) - User with UID 'client456' cannot create /clients/client123.
     * @deny (update, delete) - Only the client itself can update or delete.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Allows an authenticated client to manage their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Client 'client123' can create a document under /clients/client123/documents/{documentId}.
     * @allow (get, list, update, delete) - Client 'client123' can read, list, update, and delete their own documents.
     * @deny (create, get, list, update, delete) - Client 'client456' cannot access documents under /clients/client123.
     * @principle Enforces path-based ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId);
      allow update: if isSignedIn() && isExistingOwner(clientId);
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Allows public read access to financial institution data, but requires authentication for writes.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Any user can read financial institution data.
     * @allow (create) - Only authenticated users can create new financial institutions.
     * @deny (update, delete) - Only authenticated users can update or delete financial institutions.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to consortium data, but requires authentication for writes.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Any user can read consortium data.
     * @allow (create) - Only authenticated users can create new consortiums.
     * @deny (update, delete) - Only authenticated users can update or delete consortiums.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to credit product data, but requires authentication for writes.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Any user can read credit product data.
     * @allow (create) - Only authenticated users can create new credit products.
     * @deny (update, delete) - Only authenticated users can update or delete credit products.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to product combo data, but requires authentication for writes.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Any user can read product combo data.
     * @allow (create) - Only authenticated users can create new product combos.
     * @deny (update, delete) - Only authenticated users can update or delete product combos.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read sales proposal data, but only allows creating a proposal with a matching client ID.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Any authenticated user can read sales proposal data.
     * @allow (create) - User with UID 'client123' can create /sales_proposals/salesProposalXYZ if request.resource.data.clientId == 'client123'.
     * @deny (create) - User with UID 'client456' cannot create /sales_proposals/salesProposalXYZ with clientId 'client123'.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.clientId != null;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read commission data, but requires authentication for writes.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Any authenticated user can read commission data.
     * @allow (create) - Only authenticated users can create new commissions.
     * @deny (update, delete) - Only authenticated users can update or delete commissions.
     */
    match /commissions/{commissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read quiz data, but requires authentication for writes.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Any authenticated user can read quiz data.
     * @allow (create) - Only authenticated users can create new quizzes.
     * @deny (update, delete) - Only authenticated users can update or delete quizzes.
     */
    match /quizzes/{quizId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read question data, but requires authentication for writes.
     * @path /questions/{questionId}
     * @allow (get, list) - Any authenticated user can read question data.
     * @allow (create) - Only authenticated users can create new questions.
     * @deny (update, delete) - Only authenticated users can update or delete questions.
     */
    match /questions/{questionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on path
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of an existing document
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}