/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of access for authenticated users while strictly limiting access to the settings collection to a specific administrator.
 *
 * Data Structure:
 * - /users/{userId}: Stores user data, with path-based ownership.
 * - /roles_admin/{userId}: Document existence determines admin role.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, with path-based ownership under the client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data.
 * - /credit_products/{creditProductId}: Stores credit product data.
 * - /product_combos/{productComboId}: Stores product combo data.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, denormalizing clientId for authorization.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 * - /settings/{settingsId}: Stores settings data, accessible only by the admin user.
 *
 * Key Security Decisions:
 * - Authenticated users have read and write access to most collections.
 * - The 'settings' collection is strictly limited to the admin user.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow direct authorization based on the client.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants or denies access to user documents based on the user's ID.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own user document.
     * @allow (get, list, update, delete) - Any authenticated user can get, list, update, delete user document.
     * @deny (create) - If the user is not authenticated.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

     /**
      * @description Grants or denies access to roles_admin documents based on the user's ID.
      * @path /roles_admin/{userId}
      * @allow (create, get, list, update, delete) - An authenticated user can create, get, list, update, delete user document.
      * @deny (create) - If the user is not authenticated.
      * @principle Enforces document ownership for writes.
      */
    match /roles_admin/{userId} {
       allow get, list: if isSignedIn();
       allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to client documents.
     * @path /clients/{clientId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete client documents.
     * @deny (create) - If the user is not authenticated.
     * @principle Allows any authenticated user to manage client data.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to documents under a specific client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete documents for a client.
     * @deny (create) - If the user is not authenticated.
     * @principle Enforces that only authenticated users can manage client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete financial institution documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to consortium documents.
     * @path /consortiums/{consortiumId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete consortium documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete credit product documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete product combo documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /product_combos/{productComboId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete sales proposal documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to commission documents.
     * @path /commissions/{commissionId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete commission documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /commissions/{commissionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to quiz documents.
     * @path /quizzes/{quizId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete quiz documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /quizzes/{quizId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants or denies access to question documents.
     * @path /questions/{questionId}
     * @allow (create, get, list, update, delete) - Any authenticated user can create, get, list, update, delete question documents.
     * @deny (create) - If the user is not authenticated.
     */
    match /questions/{questionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

        /**
         * @description Grants or denies access to settings documents.
         * @path /settings/{settingsId}
         * @allow (get, list, create, update, delete) - Only the admin user can access settings documents.
         * @deny (get, list, create, update, delete) - If the user is not the admin.
         * @principle Restricts access to the settings collection to the admin user.
         */
        match /settings/{settingsId} {
            allow get, list, create, update, delete: if request.auth.token.email == "kaiqueguilhermepereiramiranda@gmail.com";
        }

  }

  function isSignedIn() {
    return request.auth != null;
  }
}