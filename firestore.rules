/**
 * @fileoverview Firestore Security Rules for the cons√≥rcio and credit system.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model.
 *   - Users (clients and internal users) own their data trees.
 *   - Certain collections are globally readable.
 *   - Roles (Admin, Gestor, Atendente, Financeiro) grant elevated privileges.
 *
 * Data Structure:
 * - /clients/{clientId}: Client profiles, secured by ownership (isOwner(clientId)).
 * - /quizzes/{quizId}: Quiz definitions, globally readable but only writeable with proper role.
 * - /questions/{questionId}: Question definitions, globally readable but only writeable with proper role.
 * - /products/{productId}: Product definitions, globally readable, write restricted to roles.
 * - /banks/{bankId}: Bank definitions, globally readable, write restricted to roles.
 * - /sales/{saleId}: Sales data, access controlled based on the client and roles
 * - /users/{userId}: User profiles, secured by ownership (isOwner(userId)).
 * - /documents/{documentId}: Documents, globally readable, write restricted to roles.
 * - /roles_admin/{userId}, /roles_gestor/{userId}, etc.: Role assignment collections. Existence implies the role.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed except for specific role-based scenarios (not implemented in this prototype).
 * - Data validation is minimized to allow for rapid prototyping. Focus is on authorization.
 * - Read-only collections (e.g., Products, Banks) are globally readable.
 *
 * Denormalization for Authorization:
 * - Client documents (`/clients/{clientId}`) are secured using the `clientId` path parameter and the `isOwner()` function. No external reads are needed.
 * - Role checks are performed using existence checks on dedicated role collections (e.g., `/roles_admin/{userId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure client profiles. Clients can only read/write their own profile.
     * @path /clients/{clientId}
     * @allow (create) - Authenticated user creates their profile with matching ID.
     *   Request: auth.uid = "user123", resource.data.id = "user123"
     * @allow (get, list) - Authenticated user reads their own profile.
     *   Request: auth.uid = "user123", path = "/clients/user123"
     * @allow (update, delete) - Authenticated user updates/deletes their own profile.
     *   Request: auth.uid = "user123", path = "/clients/user123"
     * @deny (create) - Authenticated user tries to create a profile with a mismatched ID.
     *   Request: auth.uid = "user123", resource.data.id = "otherUser456"
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && isOwner(clientId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(clientId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(clientId);
    }

    /**
     * @description Defines security rules for quizzes.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Any user can read quizzes.
     *   Request: No auth needed, path = "/quizzes/quiz1"
     * @allow (create) - Only admins can create quizzes.
     *   Request: auth.uid = "admin123", path = "/quizzes/newQuiz"
     * @allow (update, delete) - Only admins can update/delete quizzes.
     *   Request: auth.uid = "admin123", path = "/quizzes/quiz1"
     * @deny (create) - Non-admin user tries to create a quiz.
     *   Request: auth.uid = "user123", path = "/quizzes/newQuiz"
     * @principle Public read, role-based writes.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines security rules for questions.
     * @path /questions/{questionId}
     * @allow (get, list) - Any user can read questions.
     *   Request: No auth needed, path = "/questions/question1"
     * @allow (create) - Only admins can create questions.
     *   Request: auth.uid = "admin123", path = "/questions/newQuestion"
     * @allow (update, delete) - Only admins can update/delete questions.
     *   Request: auth.uid = "admin123", path = "/questions/question1"
     * @deny (create) - Non-admin user tries to create a question.
     *   Request: auth.uid = "user123", path = "/questions/newQuestion"
     * @principle Public read, role-based writes.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines security rules for products.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read products.
     *   Request: No auth needed, path = "/products/product1"
     * @allow (create) - Only admins can create products.
     *   Request: auth.uid = "admin123", path = "/products/newProduct"
     * @allow (update, delete) - Only admins can update/delete products.
     *   Request: auth.uid = "admin123", path = "/products/product1"
     * @deny (create) - Non-admin user tries to create a product.
     *   Request: auth.uid = "user123", path = "/products/newProduct"
     * @principle Public read, role-based writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines security rules for banks.
     * @path /banks/{bankId}
     * @allow (get, list) - Any user can read banks.
     *   Request: No auth needed, path = "/banks/bank1"
     * @allow (create) - Only admins can create banks.
     *   Request: auth.uid = "admin123", path = "/banks/newBank"
     * @allow (update, delete) - Only admins can update/delete banks.
     *   Request: auth.uid = "admin123", path = "/banks/bank1"
     * @deny (create) - Non-admin user tries to create a bank.
     *   Request: auth.uid = "user123", path = "/banks/newBank"
     * @principle Public read, role-based writes.
     */
    match /banks/{bankId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Defines security rules for sales.
     * @path /sales/{saleId}
     * @allow (get, list) - Any authenticated user can read sales.
     *   Request: auth.uid = "user123", path = "/sales/sale1"
     * @allow (create) - Only authenticated users can create sales.
     *   Request: auth.uid = "user123", path = "/sales/newSale"
     * @allow (update, delete) - Only admins can update/delete sales.
     *   Request: auth.uid = "admin123", path = "/sales/sale1"
     * @deny (create) - Unauthenticated user tries to create a sale.
     *   Request: No auth, path = "/sales/newSale"
     *  @principle Authenticated read/create, role-based updates and deletes.
     */
    match /sales/{saleId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Secure user profiles. Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching ID.
     *   Request: auth.uid = "user123", resource.data.id = "user123"
     * @allow (get, list) - Authenticated user reads their own profile.
     *   Request: auth.uid = "user123", path = "/users/user123"
     * @allow (update, delete) - Authenticated user updates/deletes their own profile.
     *   Request: auth.uid = "user123", path = "/users/user123"
     * @deny (create) - Authenticated user tries to create a profile with a mismatched ID.
     *   Request: auth.uid = "user123", resource.data.id = "otherUser456"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Defines security rules for documents.
     * @path /documents/{documentId}
     * @allow (get, list) - Any user can read documents.
     *   Request: No auth needed, path = "/documents/doc1"
     * @allow (create) - Only admins can create documents.
     *   Request: auth.uid = "admin123", path = "/documents/newDoc"
     * @allow (update, delete) - Only admins can update/delete documents.
     *   Request: auth.uid = "admin123", path = "/documents/doc1"
     * @deny (create) - Non-admin user tries to create a document.
     *   Request: auth.uid = "user123", path = "/documents/newDoc"
     * @principle Public read, role-based writes.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants admin privileges to a user. Existence of this document grants the role.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get, list: if false; // Nobody can list these.  Existence is the only signal.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants gestor privileges to a user. Existence of this document grants the role.
     * @path /roles_gestor/{userId}
     */
    match /roles_gestor/{userId} {
      allow get, list: if false; // Nobody can list these.  Existence is the only signal.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

        /**
     * @description Grants atendente privileges to a user. Existence of this document grants the role.
     * @path /roles_atendente/{userId}
     */
    match /roles_atendente/{userId} {
      allow get, list: if false; // Nobody can list these.  Existence is the only signal.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

        /**
     * @description Grants financeiro privileges to a user. Existence of this document grants the role.
     * @path /roles_financeiro/{userId}
     */
    match /roles_financeiro/{userId} {
      allow get, list: if false; // Nobody can list these.  Existence is the only signal.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}