/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, primarily based on ownership and
 * explicit role-based access.  User-specific data is secured using path-based
 * ownership, while other collections are generally open for reading but require
 * authentication for write operations. The admin role is determined by the existence
 * of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; access is restricted to the owning user.
 * - /roles_admin/{userId}: Existence of document grants admin role to user.
 * - /clients/{clientId}: Stores client data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /clients/{clientId}/documents/{documentId}: Stores client documents; access is restricted to the specific client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /consortiums/{consortiumId}: Stores consortium product data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /credit_products/{creditProductId}: Stores credit product data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /product_combos/{productComboId}: Stores product combo data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data; read is open, write should be restricted (TODO: Implement restrictions).
 * - /sales_orders/{salesOrderId}: Stores sales order data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /commissions/{commissionId}: Stores commission data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /quizzes/{quizId}: Stores quiz data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /questions/{questionId}: Stores question data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /suppliers/{supplierId}: Stores supplier data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /cost_centers/{costCenterId}: Stores cost center data; generally open read, but write should be restricted (TODO: Implement restrictions).
 * - /expense_categories/{categoryId}: Stores expense category data; generally open read, but write should be restricted (TODO: Implement restrictions).
 *
 * Key Security Decisions:
 * - `list` operation on `/users` is denied due to privacy concerns (as requested in the original error report). Listing users could expose sensitive information.
 * - Most collections are publicly readable (`allow get, list: if true;`) to facilitate data discovery and display.
 * - Write access is generally restricted and requires further refinement (marked with TODO comments).
 * - The existence of a document in `/roles_admin/{userId}` is checked to determine admin status instead of content inspection.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to enable simpler authorization rules that do not require additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership and verifies document existence for updates/deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

   /**
    * @description Checks if the authenticated user has admin privileges by checking for the existence of a document in /roles_admin/{userId}.
    * @path N/A
    * @allow N/A
    * @deny N/A
    * @principle Implements role-based access control using document existence.
    */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (auth.uid == userId).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user is creating a profile for another user (auth.uid != userId).
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // CRITICAL: Preventing listing of users for privacy. See error report.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for admin roles. Document existence determines admin status.
     * @path /roles_admin/{userId}
     * @allow (create) - If an admin is creating a new admin role (TODO: Implement admin check).
     * @allow (get, update, delete) - If the user is an admin (TODO: Implement admin check).
     * @deny (create, get, update, delete) - If the user is not an admin.
     * @principle Implements role-based access control.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for client data.
     * @path /clients/{clientId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only or self-creation with specific constraints
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) - If the user is the owner of the client.
     * @allow (create) - If the user is the owner of the client.
     * @allow (update, delete) - If the user is the owner of the client and the document exists.
     * @deny (get, list, create, update, delete) - If the user is not the owner of the client.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Restrict further based on relationship to client.
      allow update: if isSignedIn() && resource != null; // TODO: Restrict further based on relationship to client.
      allow delete: if isSignedIn() && resource != null; // TODO: Restrict further based on relationship to client.
    }

    /**
     * @description Security rules for financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Restrict further to roles or specific users.
      allow update: if isSignedIn() && resource != null; // TODO: Restrict further to roles or specific users.
      allow delete: if isSignedIn() && resource != null; // TODO: Restrict further to roles or specific users.
    }

   /**
     * @description Security rules for sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add create condition - likely admin-only
      allow update: if isSignedIn() && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if isSignedIn() && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add create condition - likely admin-only
      allow update: if isSignedIn() && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if isSignedIn() && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for question data.
     * @path /questions/{questionId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

   /**
     * @description Security rules for supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

    /**
     * @description Security rules for cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /cost_centers/{costCenterId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }

   /**
     * @description Security rules for expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Restricted write access (TODO: Implement restrictions).
     * @deny (create, update, delete) - If the write conditions are not met.
     */
    match /expense_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add create condition - likely admin-only
      allow update: if false && resource != null; // TODO: Add update condition - likely admin-only
      allow delete: if false && resource != null; // TODO: Add delete condition - likely admin-only
    }
  }
}