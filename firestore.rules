/**
 * @fileoverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model. Most collections are accessible to any authenticated user.
 * The /users/{userId} collection is strictly controlled, with each user only able to access their own document.
 *
 * Data Structure:
 * - /users/{userId}: Stores user-specific data; access restricted to the user themselves.
 * - Top-level collections (clients, financial_institutions, etc.): Accessible to all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the rules structure.
 * - Data shape validation is relaxed during the prototyping phase.
 *
 * Authorization Independence:
 * - Some documents contain denormalized fields (e.g., clientId in sales_proposals) to avoid costly `get()` calls
 *   and simplify authorization logic.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user documents. Only the authenticated user can read/write their own document.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth.uid can create their own document.
     * @allow (get, update, delete) Authenticated user can read/write their own document.
     * @deny (create) User attempts to create a document with an ID that does not match their auth.uid.
     * @deny (get, update, delete) User attempts to read/write another user's document.
     * @principle Enforces strict user-ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description  Controls access to admin role documents. Admin role based on document existence.
     * @path /roles_admin/{userId}
     * @allow get: if isSignedIn();
     * @allow list: if false;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny  None.
     * @principle Admin role is determined by the existence of a document.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to client documents. Any authenticated user can read/write client data.
     * @path /clients/{clientId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage client data.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to client documents.  Path-based ownership under client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny  None.
     * @principle Path-based ownership under client, allows any authenticated user to read/write to.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to financial institution documents. Any authenticated user can read/write.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to consortium documents. Any authenticated user can read/write.
     * @path /consortiums/{consortiumId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage consortium data.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to credit product documents. Any authenticated user can read/write.
     * @path /credit_products/{creditProductId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to product combo documents. Any authenticated user can read/write.
     * @path /product_combos/{productComboId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage product combo data.
     */
    match /product_combos/{productComboId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to sales proposal documents. Any authenticated user can read/write.
     * @path /sales_proposals/{salesProposalId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage sales proposal data.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to sales order documents. Any authenticated user can read/write.
     * @path /sales_orders/{salesOrderId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage sales order data.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to commission documents. Any authenticated user can read/write.
     * @path /commissions/{commissionId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage commission data.
     */
    match /commissions/{commissionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to quiz documents. Any authenticated user can read/write.
     * @path /quizzes/{quizId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage quiz data.
     */
    match /quizzes/{quizId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to question documents. Any authenticated user can read/write.
     * @path /questions/{questionId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage question data.
     */
    match /questions/{questionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to supplier documents. Any authenticated user can read/write.
     * @path /suppliers/{supplierId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage supplier data.
     */
    match /suppliers/{supplierId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to cost center documents. Any authenticated user can read/write.
     * @path /cost_centers/{costCenterId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage cost center data.
     */
    match /cost_centers/{costCenterId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to expense category documents. Any authenticated user can read/write.
     * @path /expense_categories/{categoryId}
     * @allow get, list: if isSignedIn();
     * @allow create, update, delete: if isSignedIn();
     * @deny None.
     * @principle Allows any authenticated user to manage expense category data.
     */
    match /expense_categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }
  }
}