/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence, leveraging
 * path-based ownership and data denormalization to avoid complex queries within
 * the rules. It strictly enforces user-based and role-based access controls.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user data, accessible only by the user themselves or admins.
 * - /roles_admin/{userId}: Used for role-based authorization; presence of a document grants admin privileges.
 * - /clients/{clientId}: Stores client data, accessible by admins and potentially by specific users (e.g., 'Gestor').
 * - /clients/{clientId}/documents/{documentId}: Client-owned documents.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data.
 * - /consortiums/{consortiumId}: Stores consortium product data. Access to product data is broadly open.
 * - /credit_products/{creditProductId}: Stores credit product data. Access to product data is broadly open.
 * - /product_combos/{productComboId}: Stores product combos. Access to product combo data is broadly open.
 * - /sales_proposals/{salesProposalId}: Stores sales proposals, with denormalized 'clientId' for authorization.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - Strict user ownership for /users/{userId} and /clients/{clientId}/documents/{documentId}.
 * - Role-based admin access via /roles_admin/{userId} document existence check.
 * - Data denormalization (e.g., clientId in sales_proposals) to avoid costly get() calls in rules.
 * - Broad read access to product catalogs (consortiums, credit_products, product_combos).
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection includes a `clientId` field to avoid needing to
 *   query the `clients` collection for authorization. This enables direct access control
 *   based on client ownership without additional reads.
 *
 * Structural Segregation:
 * - No explicit structural segregation is used.  However, the design could be expanded to
 *   include separate private/public collections in the future if needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data.
     * @path /users/{userId}
     * @allow (read,write) if the user is signed in and the requested userId matches their own ID.
     * @deny (read,write) if the user is not signed in or the userId does not match their own ID.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      // isOwner function checks if the authenticated user's ID matches the requested userId.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // isSignedIn function checks if a user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users.
      allow create: if isSignedIn() && isOwner(userId); // Self-creation allowed.
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants admin role based on document existence.
     * @path /roles_admin/{userId}
     * @allow (read,write) if the user is signed in and the requested userId matches their own ID.
     * @deny (read,write) if the user is not signed in or the userId does not match their own ID.
     * @principle Role-based access control.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false; // No listing of admins.
      allow create: if isSignedIn() && isAdmin();
      allow update: if false; // Only creation and deletion to manage roles
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to client data.
     * @path /clients/{clientId}
     * @allow (read,write) if the user is an admin.
     * @deny (read,write) if the user is not an admin.
     * @principle Role-based access control.
     */
    match /clients/{clientId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (read,write) if the user is an admin or the client.
     * @deny (read,write) if the user is not an admin or the client.
     * @principle Document ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isClient(clientId) {
          return request.auth.uid == clientId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (isClient(clientId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && (isClient(clientId) || isAdmin());
      allow update: if isSignedIn() && (isClient(clientId) || isAdmin());
      allow delete: if isSignedIn() && (isClient(clientId) || isAdmin());
    }

    /**
     * @description Grants access to financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (read,write) if the user is an admin.
     * @deny (read,write) if the user is not an admin.
     * @principle Role-based access control.
     */
    match /financial_institutions/{financialInstitutionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (read,write) to everyone.
     * @principle Open read access to product data.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Grants access to credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (read,write) to everyone.
     * @principle Open read access to product data.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Grants access to product combo data.
     * @path /product_combos/{productComboId}
     * @allow (read,write) to everyone.
     * @principle Open read access to product data.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Grants access to sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (read,write) if the user is an admin or the client.
     * @deny (read,write) if the user is not an admin or the client.
     * @principle Document ownership for sales proposals.
     */
    match /sales_proposals/{salesProposalId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isClient(clientId) {
          return request.auth.uid == clientId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (isClient(resource.data.clientId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && (request.resource.data.clientId == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (isClient(resource.data.clientId) || isAdmin());
      allow delete: if isSignedIn() && (isClient(resource.data.clientId) || isAdmin());
    }

    /**
     * @description Grants access to commission data.
     * @path /commissions/{commissionId}
     * @allow (read,write) if the user is an admin.
     * @deny (read,write) if the user is not an admin.
     * @principle Role-based access control.
     */
    match /commissions/{commissionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to quiz data.
     * @path /quizzes/{quizId}
     * @allow (read,write) if the user is an admin.
     * @deny (read,write) if the user is not an admin.
     * @principle Role-based access control.
     */
    match /quizzes/{quizId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to question data.
     * @path /questions/{questionId}
     * @allow (read,write) if the user is an admin.
     * @deny (read,write) if the user is not an admin.
     * @principle Role-based access control.
     */
    match /questions/{questionId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}