/**
 * @fileOverview Firestore Security Rules for ConsorciaTech.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * combined with public read access for some top-level collections and
 * role-based access for administrative functions. Authorization independence
 * is achieved through data denormalization where needed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data; owner-only access.
 * - /roles_admin/{userId}: Document existence grants admin role; existence over content.
 * - /clients/{clientId}: Stores client data; public read, owner-only write.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents; owner-only access.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data; public read, owner-only write.
 * - /consortiums/{consortiumId}: Stores consortium product data; public read, owner-only write.
 * - /credit_products/{creditProductId}: Stores credit product data; public read, owner-only write.
 * - /product_combos/{productComboId}: Stores product combo data; public read, owner-only write.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data; public read, owner-only write.
 * - /commissions/{commissionId}: Stores commission data; public read, owner-only write.
 * - /quizzes/{quizId}: Stores quiz data; public read, owner-only write.
 * - /questions/{questionId}: Stores question data; public read, owner-only write.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent information disclosure.
 * - Public read access is granted to certain top-level collections to facilitate data discovery.
 * - Write access to public read collections is restricted to document owners.
 * - Role-based access is implemented using the /roles_admin/{userId} collection; existence over content.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow rules to validate client-specific access
 *   without performing additional `get()` operations.
 *
 * Structural Segregation:
 * - N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID of the document's owner.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     * @return {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Security rules for user documents.
     * @path /users/{userId}
     * @allow (create) - Allow user to create their own document if the userId matches their auth.uid.
     * @allow (get, list) - Allow user to read their own document.
     * @allow (update, delete) - Allow user to update or delete their own document.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (get, list) - Deny listing all user documents to prevent information disclosure.
     * @deny (update, delete) - Deny updating or deleting another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for admin roles. Document existence determines admin role. Existence over Content. Authorization using /roles_admin/{uid}.
     * @path /roles_admin/{userId}
     * @allow (create) - Allow admin user to create the document if they are an admin.
     * @allow (get, list) - Allow any admin to get or list documents in the collection
     * @allow (update, delete) - Allow admin user to update the document if they are an admin.
     * @deny (create) - Deny non-admin user to create the document.
     * @deny (get, list) - Deny non-admin user to get or list documents in the collection
     * @deny (update, delete) - Deny non-admin user to update the document.
     * @principle Restricts access to admin-level operations.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for client documents.
     * @path /clients/{clientId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a client.
     * @allow (update, delete) - Allow user to update or delete a client if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's client.
     * @principle Owner-only writes, public reads.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a client.
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Security rules for client documents. Path-based ownership under client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Allow user to create their own document if the clientId matches the document's clientId.
     * @allow (get, list) - Allow user to read their own document.
     * @allow (update, delete) - Allow user to update or delete their own document.
     * @deny (create) - Deny creation if the clientId does not match the document's clientId.
     * @deny (get, list) - Deny listing all user documents to prevent information disclosure.
     * @deny (update, delete) - Deny updating or deleting another user's document.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isOwner(clientId);
      allow list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId);
      allow delete: if isExistingOwner(clientId);
    }

    /**
     * @description Security rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a financial institution.
     * @allow (update, delete) - Allow user to update or delete a financial institution if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's financial institution.
     * @principle Owner-only writes, public reads.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a financial institution.
      allow update: if isExistingOwner(financialInstitutionId);
      allow delete: if isExistingOwner(financialInstitutionId);
    }

    /**
     * @description Security rules for consortium product documents.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a consortium product.
     * @allow (update, delete) - Allow user to update or delete a consortium product if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's consortium product.
     * @principle Owner-only writes, public reads.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a consortium.
      allow update: if isExistingOwner(consortiumId);
      allow delete: if isExistingOwner(consortiumId);
    }

    /**
     * @description Security rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a credit product.
     * @allow (update, delete) - Allow user to update or delete a credit product if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's credit product.
     * @principle Owner-only writes, public reads.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a credit product.
      allow update: if isExistingOwner(creditProductId);
      allow delete: if isExistingOwner(creditProductId);
    }

    /**
     * @description Security rules for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a product combo.
     * @allow (update, delete) - Allow user to update or delete a product combo if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's product combo.
     * @principle Owner-only writes, public reads.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a product combo.
      allow update: if isExistingOwner(productComboId);
      allow delete: if isExistingOwner(productComboId);
    }

    /**
     * @description Security rules for sales proposal documents. Includes denormalized 'clientId' for authorization independence.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a sales proposal.
     * @allow (update, delete) - Allow user to update or delete a sales proposal if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's sales proposal.
     * @principle Owner-only writes, public reads.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a sales proposal.
      allow update: if isExistingOwner(salesProposalId);
      allow delete: if isExistingOwner(salesProposalId);
    }

    /**
     * @description Security rules for commission documents.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a commission.
     * @allow (update, delete) - Allow user to update or delete a commission if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's commission.
     * @principle Owner-only writes, public reads.
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a commission.
      allow update: if isExistingOwner(commissionId);
      allow delete: if isExistingOwner(commissionId);
    }

    /**
     * @description Security rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a quiz.
     * @allow (update, delete) - Allow user to update or delete a quiz if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's quiz.
     * @principle Owner-only writes, public reads.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a quiz.
      allow update: if isExistingOwner(quizId);
      allow delete: if isExistingOwner(quizId);
    }

    /**
     * @description Security rules for question documents.
     * @path /questions/{questionId}
     * @allow (get, list) - Allow public read access.
     * @allow (create) - Allow user to create a question.
     * @allow (update, delete) - Allow user to update or delete a question if they are the owner.
     * @deny (create) - Deny creation if the userId does not match the auth.uid.
     * @deny (update, delete) - Deny updating or deleting another user's question.
     * @principle Owner-only writes, public reads.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // Any authenticated user can create a question.
      allow update: if isExistingOwner(questionId);
      allow delete: if isExistingOwner(questionId);
    }
  }
}