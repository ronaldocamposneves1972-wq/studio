/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict ownership model for user-specific data and
 * employs public read access with owner-only writes for product catalogs.
 * Administrative privileges are granted based on document existence in a dedicated collection.
 *
 * Data Structure:
 * - Users: /users/{userId} - Stores user profiles, accessible only by the owning user.
 * - Admins: /roles_admin/{userId} - Document existence grants admin role.
 * - Clients: /clients/{clientId} - Stores client profiles, accessible to all.
 * - Client Documents: /clients/{clientId}/documents/{documentId} - Stores client-uploaded documents, accessible only by the owning client.
 * - Products: /consortiums/{consortiumId}, /credit_products/{creditProductId} - Publicly readable product catalogs, writable only by authorized users (TBD, assumes backend management).
 * - Product Combos: /product_combos/{productComboId} - Publicly readable, writable only by authorized users (TBD, assumes backend management).
 * - Sales Proposals: /sales_proposals/{salesProposalId} - Stores sales proposals, accessible to all.
 * - Commissions: /commissions/{commissionId} - Stores commission data, accessible to all.
 * - Quizzes: /quizzes/{quizId} - Stores quiz data, accessible to all.
 * - Questions: /questions/{questionId} - Stores question data, accessible to all.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Product catalogs (consortiums, credit_products, product_combos) are publicly readable.
 * - Authorization Independence is achieved by denormalizing critical fields (e.g., 'clientId' in 'sales_proposals') to avoid costly `get()` calls in rules.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - 'clientId' is denormalized in 'sales_proposals' to allow client-specific access without requiring a 'get()' operation on the 'clients' collection.
 *
 * Structural Segregation:
 * - Drafts vs. published content are not explicitly segregated in this data model. Consider using separate collections for private drafts and public content in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data. Only the user can read/write their own data.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if request.auth.uid == userId
     * @deny (create, update, delete, get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted for privacy reasons.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

       /**
        * @description Grants admin role based on document existence.
        * @path /roles_admin/{userId}
        * @allow (create, update, delete, get) if isSignedIn()
        * @deny (create, update, delete, get) if !isSignedIn()
        * @principle Document existence determines role.
        */
    match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false; // Admins are managed by backend only
        allow update: if false; // Admins are managed by backend only
        allow delete: if false; // Admins are managed by backend only
    }

    /**
     * @description Grants access to client data.
     * @path /clients/{clientId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to documents uploaded by clients. Only the client can read/write their own documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create, update, delete, get, list) if request.auth.uid == clientId
     * @deny (create, update, delete, get, list) if request.auth.uid != clientId
     * @principle Enforces document ownership for writes. Restricts access to a user's own documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      function isOwner(clientId) {
        return request.auth.uid == clientId;
      }

      allow get: if isOwner(clientId);
      allow list: if false;
      allow create: if request.auth.uid == clientId;
      allow update: if request.auth.uid == clientId;
      allow delete: if request.auth.uid == clientId;
    }

    /**
     * @description Grants access to financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /commissions/{commissionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to question data.
     * @path /questions/{questionId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Public read, restricted write.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}