/**
 * @fileOverview Firestore Security Rules for a Consórcio and Crédito Management System.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization. It enforces user-ownership for user-specific data (e.g., sales under a user).
 * For other collections, it assumes public read access and requires that writes are authenticated. The schema is not strictly enforced
 * to allow for rapid prototyping, but relational integrity is maintained for key relationships.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data associated with a specific user.
 * - /clients/{clientId}: Client information, publicly readable, writes require authentication
 * - /products/{productId}: Product information, publicly readable, writes require authentication
 * - /banks/{bankId}: Bank information, publicly readable, writes require authentication
 * - /quizzes/{quizId}: Quiz configurations, publicly readable, writes require authentication
 * - /webhooks/{webhookId}: Webhook configurations, writes restricted to admins
 * - /roles_admin/{userId}: Documents indicating admin status.
 * - /accounts/{accountId}: Bank and digital account information, publicly readable, writes require authentication
 * - /transactions/{transactionId}: All financial transactions, publicly readable, writes require authentication
 * - /payablesReceivables/{prId}: Accounts payable and receivable items, publicly readable, writes require authentication
 *
 * Key Security Decisions:
 * - User listing is disabled for /users collection.
 * - Public read access is granted for most collections, with authenticated writes.
 *
 * Denormalization for Authorization:
 * To simplify rules, authorization data (e.g., ownership, roles) should be denormalized directly onto the documents being secured.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile information.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their own profile.
     *   request.auth.uid == 'user123' && request.resource.data.id == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads their own profile.
     *   request.auth.uid == 'user123'
     * @deny (create) - User 'user456' tries to create profile for 'user123'.
     *   request.auth.uid == 'user456' && request.resource.data.id == 'user123'
     * @deny (get, update, delete) - User 'user456' tries to read profile of 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Validate that the user is signed in
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      // On creation, enforce that the userId matches the authenticated user's UID
      allow create: if isSignedIn() && isSelfCreate(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secure sales data associated with a specific user (sales representative).
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) - User with ID 'user123' creates a sale under their profile.
     *   request.auth.uid == 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads a sale under their profile.
     *   request.auth.uid == 'user123'
     * @deny (create) - User 'user456' tries to create a sale under profile of 'user123'.
     *   request.auth.uid == 'user456'
     * @deny (get, update, delete) - User 'user456' tries to read a sale under profile of 'user123'.
     *   request.auth.uid == 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null && isOwner(userId);
      allow delete: if isSignedIn() && resource != null && isOwner(userId);
    }

    /**
     * @description Secure client information.
     * @path /clients/{clientId}
     * @allow (create) - Any authenticated user can create a client.
     *   request.auth != null
     * @allow (get, list) - Anyone can read client information.
     * @allow (update, delete) - Any authenticated user can modify client information.
     *   request.auth != null
     * @principle Allows public read access, but requires authentication for writes.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure product information (Consórcio and Crédito).
     * @path /products/{productId}
     * @allow (create) - Any authenticated user can create a product.
     *   request.auth != null
     * @allow (get, list) - Anyone can read product information.
     * @allow (update, delete) - Any authenticated user can modify product information.
     *   request.auth != null
     * @principle Allows public read access, but requires authentication for writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure bank information.
     * @path /banks/{bankId}
     * @allow (create) - Any authenticated user can create a bank.
     *   request.auth != null
     * @allow (get, list) - Anyone can read bank information.
     * @allow (update, delete) - Any authenticated user can modify bank information.
     *   request.auth != null
     * @principle Allows public read access, but requires authentication for writes.
     */
    match /banks/{bankId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure quiz configurations.
     * @path /quizzes/{quizId}
     * @allow (create) - Any authenticated user can create a quiz.
     *   request.auth != null
     * @allow (get, list) - Anyone can read quiz configurations.
     * @allow (update, delete) - Any authenticated user can modify quiz configurations.
     *   request.auth != null
     * @principle Allows public read access, but requires authentication for writes.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (create, update, delete) - Denied for all.
     * @allow (get, list) - Denied for all.
     * @principle Only Admins can configure webhooks.
     */
    match /webhooks/{webhookId} {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure documents indicating admin status.  Existence implies admin role.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure bank and digital account information.
     * @path /accounts/{accountId}
     * @allow (create) - Any authenticated user can create a account.
     *   request.auth != null
     * @allow (get, list) - Anyone can read account information.
     * @allow (update, delete) - Any authenticated user can modify account information.
     *   request.auth != null
     * @principle Allows public read access, but requires authentication for writes.
     */
    match /accounts/{accountId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure all financial transactions.
     * @path /transactions/{transactionId}
     * @allow (create) - Any authenticated user can create a transaction.
     *   request.auth != null
     * @allow (get, list) - Anyone can read transaction information.
     * @allow (update, delete) - Any authenticated user can modify transaction information.
     *   request.auth != null
     * @principle Allows public read access, but requires authentication for writes.
     */
    match /transactions/{transactionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure accounts payable and receivable items.
     * @path /payablesReceivables/{prId}
     * @allow (create) - Any authenticated user can create a payable/receivable.
     *   request.auth != null
     * @allow (get, list) - Anyone can read payable/receivable information.
     * @allow (update, delete) - Any authenticated user can modify payable/receivable information.
     *   request.auth != null
     * @principle Allows public read access, but requires authentication for writes.
     */
    match /payablesReceivables/{prId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the user is signed in.
   * @returns {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the document, based on the userId.
   * @param {string} userId - The user ID to compare against the authenticated user's UID.
   * @returns {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
   * @description Checks if the user is creating their own user document.
   * @param {string} userId - The user ID from the document path.
   * @returns {boolean} True if the user is creating their own document, false otherwise.
   */
  function isSelfCreate(userId) {
    return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
  }

  /**
   * @description Combines ownership and existence check for update/delete operations.
   * @param {string} userId - The user ID from the document path.
   * @returns {boolean} True if the user is the owner and the document exists.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}