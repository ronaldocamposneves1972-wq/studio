/**
 * @fileoverview Firestore Security Rules for ConsorciaTech Application
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of prototyping by focusing on authentication-based access.
 * Authenticated users have full read/write access to all collections.
 * Unauthenticated users have limited access: create access for 'clients' and read access for 'quizzes'.
 *
 * Data Structure:
 * The database comprises several top-level collections, including 'users', 'clients', 'financial_institutions',
 * 'consortiums', 'credit_products', 'product_combos', 'sales_proposals', 'commissions', 'quizzes',
 * 'questions', 'suppliers', 'cost_centers', and 'expense_categories'. The 'clients' collection also has a
 * subcollection 'documents'.  No user subcollections are employed.
 *
 * Key Security Decisions:
 * - Authenticated users can read and write all data.
 * - Unauthenticated users can only create clients and read quizzes.
 * - Full schema validation is not implemented in this prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Allows access if the user is signed in.
     */
    function allowAllIfSignedIn() {
      return isSignedIn();
    }

    /**
     * @description Allows unauthenticated users to create clients.
     */
    function allowUnauthenticatedClientCreation() {
      return request.auth == null;
    }

    /**
     * @description Allows unauthenticated users to read quizzes.
     */
    function allowUnauthenticatedQuizRead() {
      return request.auth == null;
    }

    /**
     * @description Rules for the 'users' collection.
     * @path /users/{userId}
     * @allow (read, write) Authenticated user accessing any user document.
     * @deny (read, write) Unauthenticated user attempting to read or write user data.
     * @principle Authenticated users can read and write all user data.
     */
    match /users/{userId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'roles_admin' collection.
     * @path /roles_admin/{userId}
     * @allow (read, write) Authenticated user accessing any roles_admin document.
     * @deny (read, write) Unauthenticated user attempting to read or write roles_admin data.
     * @principle Authenticated users can read and write all roles_admin data.
     */
    match /roles_admin/{userId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'clients' collection.
     * @path /clients/{clientId}
     * @allow (create) Unauthenticated user creating a client.
     * @allow (read, write) Authenticated user accessing any client document.
     * @deny (update, delete) Unauthenticated user attempting to update or delete client data.
     * @principle Authenticated users can read and write all client data. Unauthenticated can only create.
     */
    match /clients/{clientId} {
      allow get, list, update, delete: if allowAllIfSignedIn();
      allow create: if allowAllIfSignedIn() || allowUnauthenticatedClientCreation();
    }

    /**
     * @description Rules for the 'clients/{clientId}/documents' subcollection.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (read, write) Authenticated user accessing any client document.
     * @deny (read, write) Unauthenticated user attempting to read or write client document data.
     * @principle Authenticated users can read and write all client document data.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'financial_institutions' collection.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (read, write) Authenticated user accessing any financial institution document.
     * @deny (read, write) Unauthenticated user attempting to read or write financial institution data.
     * @principle Authenticated users can read and write all financial institution data.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'consortiums' collection.
     * @path /consortiums/{consortiumId}
     * @allow (read, write) Authenticated user accessing any consortium document.
     * @deny (read, write) Unauthenticated user attempting to read or write consortium data.
     * @principle Authenticated users can read and write all consortium data.
     */
    match /consortiums/{consortiumId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'credit_products' collection.
     * @path /credit_products/{creditProductId}
     * @allow (read, write) Authenticated user accessing any credit product document.
     * @deny (read, write) Unauthenticated user attempting to read or write credit product data.
     * @principle Authenticated users can read and write all credit product data.
     */
    match /credit_products/{creditProductId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'product_combos' collection.
     * @path /product_combos/{productComboId}
     * @allow (read, write) Authenticated user accessing any product combo document.
     * @deny (read, write) Unauthenticated user attempting to read or write product combo data.
     * @principle Authenticated users can read and write all product combo data.
     */
    match /product_combos/{productComboId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'sales_proposals' collection.
     * @path /sales_proposals/{salesProposalId}
     * @allow (read, write) Authenticated user accessing any sales proposal document.
     * @deny (read, write) Unauthenticated user attempting to read or write sales proposal data.
     * @principle Authenticated users can read and write all sales proposal data.
     */
    match /sales_proposals/{salesProposalId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'sales_orders' collection.
     * @path /sales_orders/{salesOrderId}
     * @allow (read, write) Authenticated user accessing any sales order document.
     * @deny (read, write) Unauthenticated user attempting to read or write sales order data.
     * @principle Authenticated users can read and write all sales order data.
     */
    match /sales_orders/{salesOrderId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'commissions' collection.
     * @path /commissions/{commissionId}
     * @allow (read, write) Authenticated user accessing any commission document.
     * @deny (read, write) Unauthenticated user attempting to read or write commission data.
     * @principle Authenticated users can read and write all commission data.
     */
    match /commissions/{commissionId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'quizzes' collection.
     * @path /quizzes/{quizId}
     * @allow (read) Unauthenticated user reading a quiz.
     * @allow (write) Authenticated user accessing any quiz document.
     * @deny (write) Unauthenticated user attempting to write quiz data.
     * @principle Authenticated users can read and write all quiz data. Unauthenticated can only read.
     */
    match /quizzes/{quizId} {
      allow get, list: if allowAllIfSignedIn() || allowUnauthenticatedQuizRead();
      allow create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'questions' collection.
     * @path /questions/{questionId}
     * @allow (read, write) Authenticated user accessing any question document.
     * @deny (read, write) Unauthenticated user attempting to read or write question data.
     * @principle Authenticated users can read and write all question data.
     */
    match /questions/{questionId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'suppliers' collection.
     * @path /suppliers/{supplierId}
     * @allow (read, write) Authenticated user accessing any supplier document.
     * @deny (read, write) Unauthenticated user attempting to read or write supplier data.
     * @principle Authenticated users can read and write all supplier data.
     */
    match /suppliers/{supplierId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'cost_centers' collection.
     * @path /cost_centers/{costCenterId}
     * @allow (read, write) Authenticated user accessing any cost center document.
     * @deny (read, write) Unauthenticated user attempting to read or write cost center data.
     * @principle Authenticated users can read and write all cost center data.
     */
    match /cost_centers/{costCenterId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }

    /**
     * @description Rules for the 'expense_categories' collection.
     * @path /expense_categories/{categoryId}
     * @allow (read, write) Authenticated user accessing any expense category document.
     * @deny (read, write) Unauthenticated user attempting to read or write expense category data.
     * @principle Authenticated users can read and write all expense category data.
     */
    match /expense_categories/{categoryId} {
      allow get, list, create, update, delete: if allowAllIfSignedIn();
    }
  }
}