/**
 * @file Firestore Security Rules for Consórcio and Crédito System
 * @core_philosophy This ruleset enforces a role-based access control system, with ownership-based restrictions on user-related data, and public read access for Products and Banks. The ruleset uses path-based ownership for documents nested under clients.
 * @data_structure
 *   - /clients/{clientId}: Stores client data.
 *   - /quizzes/{quizId}: Stores quiz data.
 *   - /products/{productId}: Stores product information.
 *   - /banks/{bankId}: Stores bank information.
 *   - /sales/{saleId}: Stores sale information.
 *   - /commissions/{commissionId}: Stores commission information.
 *   - /users/{userId}: Stores user information, including roles.
 *   - /clients/{clientId}/documents/{documentId}: Stores client documents.
 *   - /salesPeople/{salesPersonId}: Stores salesperson information.
 * @key_security_decisions
 *   - User listing is not allowed to prevent information disclosure.
 *   - Products and Banks are publicly readable but not writable by users.
 *   - All writes require authentication and proper authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to client documents.
     * @path /clients/{clientId}
     * @allow (create) - A user with the 'admin' role can create a client.
     * @deny (create) - A user without the 'admin' role cannot create a client.
     * @allow (get, list) - Any authenticated user can read client documents.
     * @deny (update, delete) - Only users with the 'admin' role can update or delete client documents.
     * @principle Enforces role-based access control for client data.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Grants access to quiz documents.
     * @path /quizzes/{quizId}
     * @allow (create) - A user with the 'admin' role can create a quiz.
     * @deny (create) - A user without the 'admin' role cannot create a quiz.
     * @allow (get, list) - Any authenticated user can read quiz documents.
     * @deny (update, delete) - Only users with the 'admin' role can update or delete quiz documents.
     * @principle Enforces role-based access control for quiz data.
     */
    match /quizzes/{quizId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Grants public read access to product documents, restricts writes.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product documents.
     * @deny (create, update, delete) - No user can create, update, or delete product documents.
     * @principle Allows public read access for product information.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to bank documents, restricts writes.
     * @path /banks/{bankId}
     * @allow (get, list) - Any user can read bank documents.
     * @deny (create, update, delete) - No user can create, update, or delete bank documents.
     * @principle Allows public read access for bank information.
     */
    match /banks/{bankId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to sale documents.
     * @path /sales/{saleId}
     * @allow (create) - A user with the 'admin' role can create a sale.
     * @deny (create) - A user without the 'admin' role cannot create a sale.
     * @allow (get, list) - Any authenticated user can read sale documents.
     * @deny (update, delete) - Only users with the 'admin' role can update or delete sale documents.
     * @principle Enforces role-based access control for sales data.
     */
    match /sales/{saleId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Grants access to commission documents.
     * @path /commissions/{commissionId}
     * @allow (create) - A user with the 'admin' role can create a commission.
     * @deny (create) - A user without the 'admin' role cannot create a commission.
     * @allow (get, list) - Any authenticated user can read commission documents.
     * @deny (update, delete) - Only users with the 'admin' role can update or delete commission documents.
     * @principle Enforces role-based access control for commission data.
     */
    match /commissions/{commissionId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Grants access to user documents.
     * @path /users/{userId}
     * @allow (create) - Only the user themselves can create their user document.
     * @deny (create) - Another user cannot create a user document for someone else.
     * @allow (get) - Only the user themselves can get their user document.
     * @deny (get) - Another user cannot get a user document for someone else.
     * @deny (list) - Listing all users is not allowed.
     * @deny (update, delete) - Only the user themselves or an admin can update or delete their user document.
     * @principle Enforces user-ownership for user documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Grants access to client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Only the client themselves can create a document.
     * @deny (create) - Another client cannot create a document for someone else.
     * @allow (get, list) - Only the client themselves can get/list their documents.
     * @deny (get, list) - Another client cannot get/list a document for someone else.
     * @deny (update, delete) - Only the client themselves or an admin can update or delete their documents.
     * @principle Enforces client-ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get, list: if isOwner(clientId);
      allow create: if isOwner(clientId);
      allow update, delete: if isOwner(clientId);
    }

    /**
     * @description Grants access to salesperson documents.
     * @path /salesPeople/{salesPersonId}
     * @allow (create) - A user with the 'admin' role can create a salesperson.
     * @deny (create) - A user without the 'admin' role cannot create a salesperson.
     * @allow (get, list) - Any authenticated user can read salesperson documents.
     * @deny (update, delete) - Only users with the 'admin' role can update or delete salesperson documents.
     * @principle Enforces role-based access control for salesperson data.
     */
    match /salesPeople/{salesPersonId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
  }
}