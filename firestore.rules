/**
 * @file Overview
 * This ruleset enforces a hybrid security model, balancing open data access for some collections with strict owner-based access for user-specific data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the user themselves.
 * - /roles_admin/{userId}: Document existence confers admin role.
 * - /clients/{clientId}: Stores client data, no ownership
 * - /clients/{clientId}/documents/{documentId}: Stores client-uploaded documents. Access controlled by client ID.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, public read, admin write
 * - /consortiums/{consortiumId}: Stores consortium product data, public read, admin write
 * - /credit_products/{creditProductId}: Stores credit product data, public read, admin write
 * - /product_combos/{productComboId}: Stores product combo data, public read, admin write
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data. Access is restricted to the associated client, and is readable by all.
 * - /sales_orders/{salesOrderId}: Stores sales orders, public read and admin write.
 * - /commissions/{commissionId}: Stores commission data, public read and admin write.
 * - /quizzes/{quizId}: Stores quiz data, public read and admin write.
 * - /questions/{questionId}: Stores question data, public read and admin write.
 * - /suppliers/{supplierId}: Stores supplier data, public read and admin write.
 * - /cost_centers/{costCenterId}: Stores cost center data, public read and admin write.
 * - /expense_categories/{categoryId}: Stores expense category data, public read and admin write.
 *
 * Key Security Decisions:
 * - Public read access is granted to product and reference data collections (e.g., financial_institutions, consortiums, credit_products) to enable easy browsing.
 * - Strict owner-only access is enforced for user profiles and client-specific documents.
 * - Admin roles are managed through the presence of documents in the `/roles_admin/{userId}` collection.
 * - Listing of documents is allowed for the owner of a user path or where public readability is intended.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow for direct authorization based on client ownership without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership by comparing the authenticated user ID to the resource's user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource's user ID and the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership and resource existence for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the user has admin role
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Only admin can create/update/delete data.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for user-specific data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their own profile.
     * @allow (get, update, delete) - User with ID 'user123' accesses their own profile.
     * @deny (create, get, update, delete) - User with ID 'user456' tries to access user 'user123' data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for admin role. Document existence determines admin role.
     * @path /roles_admin/{userId}
     * @allow (create) - Admin role for user 'admin123' is created.
     * @allow (get, update, delete) - Admin role for user 'admin123' is accessed/modified.
     * @deny (create, get, update, delete) - User 'user123' tries to create/access admin role for 'admin123'.
     * @principle Existence over content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for client data.
     * @path /clients/{clientId}
     * @allow (get, list) - Any user can read client data.
     * @deny (create, update, delete) - Only admins can create/update/delete client data.
     * @principle Public read, admin-only write.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (get, list) - Client can access their own documents.
     * @deny (create, update, delete) - Only the client can create/update/delete their documents.
     * @principle Path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin(); //TODO: Restrict create, update, delete by client.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for financial institution data.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get, list) - Any user can read financial institution data.
     * @deny (create, update, delete) - Only admins can create/update/delete financial institution data.
     * @principle Public read, admin-only write.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for consortium product data.
     * @path /consortiums/{consortiumId}
     * @allow (get, list) - Any user can read consortium product data.
     * @deny (create, update, delete) - Only admins can create/update/delete consortium product data.
     * @principle Public read, admin-only write.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for credit product data.
     * @path /credit_products/{creditProductId}
     * @allow (get, list) - Any user can read credit product data.
     * @deny (create, update, delete) - Only admins can create/update/delete credit product data.
     * @principle Public read, admin-only write.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for product combo data.
     * @path /product_combos/{productComboId}
     * @allow (get, list) - Any user can read product combo data.
     * @deny (create, update, delete) - Only admins can create/update/delete product combo data.
     * @principle Public read, admin-only write.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for sales proposal data.
     * @path /sales_proposals/{salesProposalId}
     * @allow (get, list) - Any user can read sales proposal data.
     * @deny (create, update, delete) - Only admins can create/update/delete sales proposal data.
     * @principle Authorization independence with public read.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin(); // TODO: Restrict create, update, delete.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) - Any user can read sales order data.
     * @deny (create, update, delete) - Only admins can create/update/delete sales order data.
     * @principle Public read, admin-only write.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for commission data.
     * @path /commissions/{commissionId}
     * @allow (get, list) - Any user can read commission data.
     * @deny (create, update, delete) - Only admins can create/update/delete commission data.
     * @principle Public read, admin-only write.
     */
    match /commissions/{commissionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Any user can read quiz data.
     * @deny (create, update, delete) - Only admins can create/update/delete quiz data.
     * @principle Public read, admin-only write.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for question data.
     * @path /questions/{questionId}
     * @allow (get, list) - Any user can read question data.
     * @deny (create, update, delete) - Only admins can create/update/delete question data.
     * @principle Public read, admin-only write.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get, list) - Any user can read supplier data.
     * @deny (create, update, delete) - Only admins can create/update/delete supplier data.
     * @principle Public read, admin-only write.
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) - Any user can read cost center data.
     * @deny (create, update, delete) - Only admins can create/update/delete cost center data.
     * @principle Public read, admin-only write.
     */
    match /cost_centers/{costCenterId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) - Any user can read expense category data.
     * @deny (create, update, delete) - Only admins can create/update/delete expense category data.
     * @principle Public read, admin-only write.
     */
    match /expense_categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for accounts data.
     * @path /accounts
     * @allow (get, list) - Any user can read accounts data.
     * @deny (create, update, delete) - No one can create/update/delete accounts data.
     * @principle Public read, deny writes.
     */
    match /accounts {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}