/**
 * @fileOverview Firestore Security Rules for Consórcio and Crédito Management System
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, primarily based on ownership and role-based access control.
 * User-specific data is secured via ownership, while broader access is granted based on pre-defined roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Stores sales data specific to a user, accessible only by the user and admins.
 * - /clients/{clientId}: Stores client data, accessible by users with specific roles (Admin, Gestor, Atendente).
 * - /products/{productId}: Stores product data, accessible by users with specific roles (Admin, Gestor).
 * - /banks/{bankId}: Stores bank data, accessible by users with specific roles (Admin, Gestor, Financeiro).
 * - /quizzes/{quizId}: Stores quiz data, accessible by users with specific roles (Admin, Gestor).
 * - /webhooks/{webhookId}: Stores webhook data, accessible only by admins.
 * - /roles_admin/{userId}: Indicates admin status. Document existence grants admin role.
 * - /accounts/{accountId}: Stores financial account information; access needs further clarification based on user roles.
 * - /transactions/{transactionId}: Stores financial transaction data; access needs further clarification based on user roles.
 * - /payablesReceivables/{prId}: Stores payable/receivable data; access needs further clarification based on user roles.
 *
 * Key Security Decisions:
 * - User data is strictly controlled, with access limited to the user and admins.
 * - Role-based access is used for broader data categories like clients, products, and banks.
 * - Webhooks are restricted to admin users only.
 * - List operations are secured based on ownership or role-based access.
 * - Transactions and PayablesReceivables collections needs more explicit rule definitions based on user roles and ownership.
 *
 * Denormalization for Authorization:
 * To create simpler, more performant rules, we denormalize (copy) data required for an authorization decision directly onto the documents being secured.
 * For example, roles can be denormalized into a `roles` map directly on the `/clients/{clientId}` document (e.g., `{ roles: { 'user_abc': 'gestor' } }`).
 *
 * Structural Segregation:
 * Data is segregated into different collections based on its security requirements. User-specific data is stored under `/users/{userId}`,
 * while more broadly accessible data is stored in top-level collections like `/clients` and `/products`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the authenticated user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     * @returns {boolean} True if the user has the admin role, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user has one of the specified roles.
     * @param {array} allowedRoles - An array of roles that are allowed.
     * @returns {boolean} True if the user has one of the allowed roles or is an admin, false otherwise.
     */
    function hasAnyRole(allowedRoles) {
      return isAdmin() || (isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in allowedRoles);
    }

    /**
     * @description Defines rules for user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can access and modify their own profile. Admins can also access and modify.
     * @deny (create) - Non-authenticated user attempts to create a profile.
     * @deny (update, delete) - Another authenticated user attempts to modify a different user's profile without admin rights.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Defines rules for sales data associated with a specific user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) - Authenticated user creates sales data under their own user ID.
     * @allow (get, update, delete) - Authenticated user can access and modify sales data under their own user ID. Admins can also access and modify.
     * @deny (create) - Non-authenticated user attempts to create sales data.
     * @deny (update, delete) - Another authenticated user attempts to modify sales data under a different user ID without admin rights.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Defines rules for client data.
     * @path /clients/{clientId}
     * @allow (get, list) - Users with Admin, Gestor, or Atendente roles can access client data.
     * @allow (create, update, delete) - Users with Admin or Gestor roles can modify client data.
     * @deny (create, update, delete) - Users without the required roles attempt to modify client data.
     * @principle Role-based access control.
     */
    match /clients/{clientId} {
      allow get, list: if hasAnyRole(['Admin', 'Gestor', 'Atendente']);
      allow create, update, delete: if hasAnyRole(['Admin', 'Gestor']);
    }

    /**
     * @description Defines rules for product data.
     * @path /products/{productId}
     * @allow (get, list) - Users with Admin or Gestor roles can access product data.
     * @allow (create, update, delete) - Users with Admin or Gestor roles can modify product data.
     * @deny (create, update, delete) - Users without the required roles attempt to modify product data.
     * @principle Role-based access control.
     */
    match /products/{productId} {
      allow get, list: if hasAnyRole(['Admin', 'Gestor']);
      allow create, update, delete: if hasAnyRole(['Admin', 'Gestor']);
    }

    /**
     * @description Defines rules for bank data.
     * @path /banks/{bankId}
     * @allow (get, list) - Users with Admin, Gestor, or Financeiro roles can access bank data.
     * @allow (create, update, delete) - Users with Admin or Gestor roles can modify bank data.
     * @deny (create, update, delete) - Users without the required roles attempt to modify bank data.
     * @principle Role-based access control.
     */
    match /banks/{bankId} {
      allow get, list: if hasAnyRole(['Admin', 'Gestor', 'Financeiro']);
      allow create, update, delete: if hasAnyRole(['Admin', 'Gestor']);
    }

    /**
     * @description Defines rules for quiz data.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Users with Admin or Gestor roles can access quiz data.
     * @allow (create, update, delete) - Users with Admin or Gestor roles can modify quiz data.
     * @deny (create, update, delete) - Users without the required roles attempt to modify quiz data.
     * @principle Role-based access control.
     */
    match /quizzes/{quizId} {
      allow get, list: if hasAnyRole(['Admin', 'Gestor']);
      allow create, update, delete: if hasAnyRole(['Admin', 'Gestor']);
    }

    /**
     * @description Defines rules for webhook data.
     * @path /webhooks/{webhookId}
     * @allow (get, list, create, update, delete) - Only Admin users can access and modify webhook data.
     * @deny (get, list, create, update, delete) - Non-Admin users attempt to access or modify webhook data.
     * @principle Role-based access control.
     */
    match /webhooks/{webhookId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Defines rules for admin role assignment.
     * @path /roles_admin/{userId}
     * @allow get: if isAdmin();
     * @allow list: if false;
     * @allow create: if isAdmin();
     * @allow update: if false;
     * @allow delete: if isAdmin();
     * @principle Only admins can grant admin role.
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }

    /**
     * @description Defines rules for account data. Access needs further clarification based on user roles.
     * @path /accounts/{accountId}
     * @allow get, list, create, update, delete: if false; // TODO: Define access based on roles and/or ownership.
     * @principle Placeholder - Access needs to be defined.
     */
    match /accounts/{accountId} {
        allow get, list, create, update, delete: if false; // TODO: Define access based on roles and/or ownership.
    }

    /**
     * @description Defines rules for transaction data. Access needs further clarification based on user roles.
     * @path /transactions/{transactionId}
     * @allow get, create, update, delete: if false; // TODO: Define access based on roles and/or ownership.
     *
     * The user was seeing a 'Missing or insufficient permissions' error on a list operation on /transactions.
     * This rule now allows listing transactions. Be careful and review after testing.
     */
    match /transactions/{transactionId} {
        allow get: if false; // TODO: Define access based on roles and/or ownership.
        allow list: if hasAnyRole(['Admin', 'Gestor', 'Financeiro']); // This line addresses the user's reported error.
        allow create: if false; // TODO: Define access based on roles and/or ownership.
        allow update: if false; // TODO: Define access based on roles and/or ownership.
        allow delete: if false; // TODO: Define access based on roles and/or ownership.
    }

    /**
     * @description Defines rules for payable/receivable data. Access needs further clarification based on user roles.
     * @path /payablesReceivables/{prId}
     * @allow get, list, create, update, delete: if false; // TODO: Define access based on roles and/or ownership.
     * @principle Placeholder - Access needs to be defined.
     */
    match /payablesReceivables/{prId} {
        allow get, list, create, update, delete: if false; // TODO: Define access based on roles and/or ownership.
    }
  }
}