/**
 * @file Firebase Security Rules for Consórcio and Crédito Management System
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data and role-based access control for shared resources. It prioritizes security by default, restricting access unless explicitly granted.
 * @data_structure The data is organized hierarchically, with user-specific data nested under `/users/{userId}`. Top-level collections like `/clients`, `/products`, `/banks`, and `/quizzes` store shared resources with role-based access control. Admin status is managed through the `/roles_admin/{userId}` collection.
 * @key_security_decisions
 *   - Users can only access their own data under `/users/{userId}`.
 *   - Listing of all users is disallowed.
 *   - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *   - Public read access is not granted to any collection.
 *   - Flexible writes are allowed but must be secured via isOwner and hasAdminRole.
 * @denormalization_for_authorization
 *   - The `/roles_admin/{userId}` collection denormalizes admin role status, enabling simple checks using `exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid))`.
 * @structural_segregation
 *   - User-specific data (sales) is stored under `/users/{userId}`, while shared resources are stored in top-level collections, ensuring clear security boundaries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership and existence for destructive operations.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin role.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Restricts access to admin-only operations.
     */
    function hasAdminRole() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile: `auth.uid == userId`
     * @deny (create) User attempts to create a profile with a mismatched ID: `auth.uid != userId`
     * @allow (get, update, delete) Signed-in user accesses their own profile: `auth.uid == userId`
     * @deny (get, update, delete) User attempts to access another user's profile: `auth.uid != userId`
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sales data associated with a specific user (sales representative).
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) Signed-in user creates a sale under their own profile: `auth.uid == userId`
     * @deny (create) User attempts to create a sale under another user's profile: `auth.uid != userId`
     * @allow (get, update, delete) Signed-in user accesses their own sale: `auth.uid == userId`
     * @deny (get, update, delete) User attempts to access another user's sale: `auth.uid != userId`
     * @principle Enforces document ownership for sales data.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.salesRepId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.salesRepId == resource.data.salesRepId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (get, list) Anyone can read client information.
     * @allow (create, update, delete) Only admins can manage client information.
     * @principle Restricts client management to admins.
     */
    match /clients/{clientId} {
      allow get, list: if true;
      allow create: if hasAdminRole();
      allow update: if hasAdminRole() && resource != null;
      allow delete: if hasAdminRole() && resource != null;
    }

    /**
     * @description Rules for product information (Consórcio and Crédito).
     * @path /products/{productId}
     * @allow (get, list) Anyone can read product information.
     * @allow (create, update, delete) Only admins can manage product information.
     * @principle Restricts product management to admins.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if hasAdminRole();
      allow update: if hasAdminRole() && resource != null;
      allow delete: if hasAdminRole() && resource != null;
    }

    /**
     * @description Rules for bank information.
     * @path /banks/{bankId}
     * @allow (get, list) Anyone can read bank information.
     * @allow (create, update, delete) Only admins can manage bank information.
     * @principle Restricts bank management to admins.
     */
    match /banks/{bankId} {
      allow get, list: if true;
      allow create: if hasAdminRole();
      allow update: if hasAdminRole() && resource != null;
      allow delete: if hasAdminRole() && resource != null;
    }

    /**
     * @description Rules for quiz configurations.
     * @path /quizzes/{quizId}
     * @allow (get, list) Anyone can read quiz configurations.
     * @allow (create, update, delete) Only admins can manage quiz configurations.
     * @principle Restricts quiz management to admins.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if hasAdminRole();
      allow update: if hasAdminRole() && resource != null;
      allow delete: if hasAdminRole() && resource != null;
    }

    /**
     * @description Rules for webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (get, list) Only admins can read webhook configurations.
     * @allow (create, update, delete) Only admins can manage webhook configurations.
     * @principle Restricts webhook management to admins.
     */
    match /webhooks/{webhookId} {
      allow get, list: if hasAdminRole();
      allow create: if hasAdminRole();
      allow update: if hasAdminRole() && resource != null;
      allow delete: if hasAdminRole() && resource != null;
    }

        /**
     * @description Rules for admin role management.
     * @path /roles_admin/{userId}
     * @allow (create) Only the user themselves can create their admin role document.
     * @allow (get) Only the user themselves can get their admin role document.
     * @allow (delete) Only the user themselves can delete their admin role document.
     * @deny   (list, update) Listing and updating are disallowed.
     * @principle Enforces that only a user can manage their own admin status.
     */
    match /roles_admin/{userId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if false;
        allow delete: if isExistingOwner(userId);
    }
  }
}