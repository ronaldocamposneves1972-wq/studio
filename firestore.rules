/**
 * @file Firebase Security Rules for Consórcio e Crédito Management System
 *
 * @core_philosophy This ruleset prioritizes secure data access based on user roles and ownership.
 *  - Users can only manage their own data under their user ID.
 *  - Clients can be created by anonymous users.
 *  - Data is segregated structurally to maintain clear security boundaries.
 *
 * @data_structure
 *  - `/users/{userId}`: Stores individual user profiles.
 *  - `/users/{userId}/sales/{saleId}`: Stores sales data for each user.
 *  - `/clients/{clientId}`: Stores client information, accessible by all roles (create) or by specific roles (read/write - TODO).
 *  - `/products/{productId}`, `/banks/{bankId}`, `/quizzes/{quizId}`, `/webhooks/{webhookId}`: Stores configuration data accessible by specific roles.
 *  - `/roles_admin/{userId}`: Presence of a document indicates admin status.
 *
 * @key_security_decisions
 *  - User listing is disabled for privacy.
 *  - Anonymous user are granted to create clients
 *  - The `roles_admin` collection determines admin status.
 *  - The system defaults to strict ownership where relationships are ambiguous.
 *
 * @denormalization_for_authorization To avoid complex `get()` calls in rules, consider denormalizing role information onto documents,
 * especially for authorizing access to shared resources. For example, store a `members` map on `/projects/{projectId}` to easily
 * check user roles without additional reads.
 *
 * @structural_segregation Data is segregated into user-owned subcollections (e.g., `/users/{userId}/sales/{saleId}`) and
 * top-level collections with potentially broader access (e.g., `/clients/{clientId}`). This allows for simpler and more efficient
 * security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the requesting user is an admin based on the `roles_admin` collection.
     * @return {bool} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profile access.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner of the profile.
     * @deny (get) if not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sales data under a specific user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create, get, update, delete) if the user is the owner.
     * @deny (create, get, update, delete) if not the owner.
     * @principle Enforces user-specific data access.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for client information.  Allows anonymous create.  Further rules should be added to restrict read/write access based on user role.
     * @path /clients/{clientId}
     * @allow (create) if the user is signed in or not.
     * @deny (create, get, update, delete) if not the owner.
     * @principle Allows anonymous create, but requires authentication for any read/write operation (TODO: refine based on roles).
     */
    match /clients/{clientId} {
        allow get: if true;
        allow list: if false;
      allow create: if true;
      allow update: if false; // TODO:  Add role-based access control (Admin, Gestor, Atendente)
      allow delete: if false; // TODO:  Add role-based access control (Admin, Gestor, Atendente)
    }

    /**
     * @description Rules for product information. Accessible by users with appropriate roles (e.g., Admin, Gestor).
     * @path /products/{productId}
     * @allow (read) to all. (write) only to admins
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for bank information. Accessible by users with appropriate roles (e.g., Admin, Gestor, Financeiro).
     * @path /banks/{bankId}
     * @allow (read) to all. (write) only to admins
     */
    match /banks/{bankId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for quiz configurations. Accessible by users with appropriate roles (e.g., Admin, Gestor).
     * @path /quizzes/{quizId}
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for webhook configurations. Accessible by users with Admin role.
     * @path /webhooks/{webhookId}
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
       * @description Rules for roles_admin. Only admins can create documents in this collection
       * @path /roles_admin/{userId}
       */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
          /**
     * @description Rules for account information.
     * @path /accounts/{accountId}
     */
    match /accounts/{accountId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
     * @description Rules for transaction information.
     * @path /transactions/{transactionId}
     */
    match /transactions/{transactionId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
     * @description Rules for payablesReceivables information.
     * @path /payablesReceivables/{prId}
     */
    match /payablesReceivables/{prId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}