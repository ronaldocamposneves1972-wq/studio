/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and allows public read access for certain collections.
 * It also leverages denormalization to make authorization decisions without additional reads. Admin privileges are checked by the existence of a document under `/roles_admin/{userId}`.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /roles_admin/{userId}: Document existence grants admin privileges to the user.
 * - /clients/{clientId}: Stores client data, accessible by authenticated users.
 * - /clients/{clientId}/documents/{documentId}: Stores client documents, accessible only to the associated client.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, accessible based on the denormalized clientId.
 * - /sales_orders/{salesOrderId}: Stores sales order data, accessible by authenticated users.
 * - /commissions/{commissionId}: Stores commission data, accessible by authenticated users.
 * - /quizzes/{quizId}: Stores quiz data, publicly readable.
 * - /questions/{questionId}: Stores question data, publicly readable.
 * - /suppliers/{supplierId}: Stores supplier data, accessible by authenticated users.
 * - /cost_centers/{costCenterId}: Stores cost center data, accessible by authenticated users.
 * - /expense_categories/{categoryId}: Stores expense category data, accessible by authenticated users.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for the `/users` collection.
 * - Public read access is granted to product catalogs (`consortiums`, `credit_products`, `product_combos`, `quizzes`, `questions`, `financial_institutions`).
 * - Authorization Independence: Data is denormalized (e.g., `clientId` in `sales_proposals`) to avoid costly `get()` calls in rules.
 * - Admin role based on document existence in `roles_admin/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by verifying if a document exists under /roles_admin/{userId}.
     * @returns {boolean} True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
    
    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own document.
     *   Request: { auth: { uid: 'user123' }, resource: { data: { id: 'user123' } } }
     * @allow (get) User with ID 'user123' can read their own document.
     *   Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a document for user 'user123'.
     *   Request: { auth: { uid: 'user456' }, resource: { data: { id: 'user123' } } }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for admin role documents.  The existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID 'admin123' can be granted admin role.
     *   Request: { auth: { uid: 'admin123' } }
     * @allow (get) Any authenticated user can check for an admin role.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Non-authenticated user cannot create admin role.
     *   Request: { auth: null }
     * @principle Existence over Content. Authorization using /roles_admin/{uid}.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }

    /**
     * @description Rules for client documents.
     * @path /clients/{clientId}
     * @allow (create) Authenticated user can create a client.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Any authenticated user can read client data.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated user cannot create a client.
     *   Request: { auth: null }
     * @principle Requires authentication for all operations.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for client documents under a specific client.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) Authenticated user can create a document for a client.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Authenticated user can read a document for a client.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated user cannot create a client document.
     *   Request: { auth: null }
     * @principle Path-based ownership under client.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.clientId == clientId;
      allow update: if isSignedIn() && resource.data.clientId == clientId;
      allow delete: if isSignedIn() && resource.data.clientId == clientId;
    }

    /**
     * @description Rules for financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (get) Anyone can read financial institution data.
     *   Request: {}
     * @deny (create) Only authenticated users can create financial institution data.
     *   Request: { auth: null }
     * @principle Requires authentication for writes, public read.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for consortium documents.
     * @path /consortiums/{consortiumId}
     * @allow (get) Anyone can read consortium data.
     *   Request: {}
     * @deny (create) Only authenticated users can create consortium data.
     *   Request: { auth: null }
     * @principle Requires authentication for writes, public read.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (get) Anyone can read credit product data.
     *   Request: {}
     * @deny (create) Only authenticated users can create credit product data.
     *   Request: { auth: null }
     * @principle Requires authentication for writes, public read.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (get) Anyone can read product combo data.
     *   Request: {}
     * @deny (create) Only authenticated users can create product combo data.
     *   Request: { auth: null }
     * @principle Requires authentication for writes, public read.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for sales proposal documents.  Includes denormalized 'clientId' for authorization independence.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) Authenticated users can create sales proposals.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Authenticated user can read.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated users cannot create sales proposals.
     *   Request: { auth: null }
     * @principle Requires authentication for all operations.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for sales order documents.
     * @path /sales_orders/{salesOrderId}
     * @allow (create) Authenticated users can create sales orders.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Authenticated user can read sales order data.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated users cannot create sales orders.
     *   Request: { auth: null }
     * @principle Requires authentication for all operations.
     */
    match /sales_orders/{salesOrderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for commission documents.
     * @path /commissions/{commissionId}
     * @allow (create) Authenticated users can create commissions.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Authenticated user can read commission data.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated users cannot create commissions.
     *   Request: { auth: null }
     * @principle Requires authentication for all operations.
     */
    match /commissions/{commissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for quiz documents.
     * @path /quizzes/{quizId}
     * @allow (get) Anyone can read quiz data.
     *   Request: {}
     * @deny (create) Only authenticated users can create quiz data.
     *   Request: { auth: null }
     * @principle Requires authentication for writes, public read.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for question documents.
     * @path /questions/{questionId}
     * @allow (get) Anyone can read question data.
     *   Request: {}
     * @deny (create) Only authenticated users can create question data.
     *   Request: { auth: null }
     * @principle Requires authentication for writes, public read.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for supplier documents.
     * @path /suppliers/{supplierId}
     *  @allow (create) Authenticated user can create a supplier.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Any authenticated user can read supplier data.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated user cannot create a supplier.
     *   Request: { auth: null }
     * @principle Requires authentication for all operations.
     */
    match /suppliers/{supplierId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for cost center documents.
     * @path /cost_centers/{costCenterId}
     * @allow (create) Authenticated user can create a cost center.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Any authenticated user can read cost center data.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated user cannot create a cost center.
     *   Request: { auth: null }
     * @principle Requires authentication for all operations.
     */
    match /cost_centers/{costCenterId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for expense category documents.
     * @path /expense_categories/{categoryId}
     * @allow (create) Authenticated user can create an expense category.
     *   Request: { auth: { uid: 'user123' } }
     * @allow (get) Any authenticated user can read expense category data.
     *   Request: { auth: { uid: 'user456' } }
     * @deny (create) Unauthenticated user cannot create an expense category.
     *   Request: { auth: null }
     * @principle Requires authentication for all operations.
     */
    match /expense_categories/{categoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}