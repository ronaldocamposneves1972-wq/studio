/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model with strict owner-only access for user-specific data and public read access with owner-only writes for certain product catalogs. Administrative privileges are granted based on document existence in the `roles_admin` collection.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles, secured with path-based ownership.
 * - `/roles_admin/{userId}`: Document existence grants admin privileges to the user.
 * - `/clients/{clientId}`: Stores client information.
 * - `/clients/{clientId}/documents/{documentId}`: Stores client-uploaded documents, secured with path-based ownership under the client.
 * - `/financial_institutions/{financialInstitutionId}`: Stores financial institution data.
 * - `/consortiums/{consortiumId}`: Stores consortium product data (public read, owner writes).
 * - `/credit_products/{creditProductId}`: Stores credit product data (public read, owner writes).
 * - `/product_combos/{productComboId}`: Stores combined product offerings (public read, owner writes).
 * - `/sales_proposals/{salesProposalId}`: Stores sales proposal data. Contains denormalized `clientId` for independent authorization.
 * - `/sales_orders/{salesOrderId}`: Stores sales order data.
 * - `/commissions/{commissionId}`: Stores commission data.
 * - `/quizzes/{quizId}`: Stores quiz data.
 * - `/questions/{questionId}`: Stores question data.
 * - `/suppliers/{supplierId}`: Stores supplier data.
 * - `/cost_centers/{costCenterId}`: Stores cost center data.
 * - `/expense_categories/{categoryId}`: Stores expense category data.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent information harvesting.
 * - Public read access is granted to product catalogs (`consortiums`, `credit_products`, `product_combos`) to facilitate discovery.
 * - Owner-only write access is enforced for sensitive data to maintain data integrity.
 * - Authorization Independence is a critical goal, achieved through data denormalization (e.g., `clientId` in `sales_proposals`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the document exists.
     * @param {string} userId - The user ID of the owner.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants the user access to their own user document.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId in request.auth.uid.
     * @deny (create) Authenticated user with non-matching userId in request.auth.uid.
     * @allow (get, update, delete, list) Authenticated user with matching userId.
     * @deny (get, update, delete, list) Authenticated user with non-matching userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants admin privileges based on document existence in /roles_admin/{userId}.
     * @path /roles_admin/{userId}
     * @allow (create) Authenticated user with matching userId in request.auth.uid.
     * @deny (create) Authenticated user with non-matching userId in request.auth.uid.
     * @allow (get, update, delete, list) Authenticated user with matching userId.
     * @deny (get, update, delete, list) Authenticated user with non-matching userId.
     * @principle Enforces document existence for admin privileges.
     */
    match /roles_admin/{userId} {
      allow create: if isOwner(userId);
      allow get, list, update, delete: if false; // No one can see the list of admin IDs or update them through the API.
    }

    /**
     * @description Grants access to client documents.
     * @path /clients/{clientId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /clients/{clientId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to client documents.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) Authenticated user with matching clientId in request.resource.data.clientId.
     * @deny (create) Authenticated user with non-matching clientId in request.resource.data.clientId.
     * @allow (get, list, update, delete) Authenticated user with matching clientId.
     * @deny (get, list, update, delete) Authenticated user with non-matching clientId.
     * @principle Enforces document ownership for all operations.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow create: if isSignedIn() && request.resource.data.clientId == clientId;
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to financial institution documents.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to consortium product documents.
     * @path /consortiums/{consortiumId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Public access.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /consortiums/{consortiumId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to credit product documents.
     * @path /credit_products/{creditProductId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Public access.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /credit_products/{creditProductId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to product combo documents.
     * @path /product_combos/{productComboId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Public access.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /product_combos/{productComboId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to sales proposal documents.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /sales_proposals/{salesProposalId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to sales order documents.
     * @path /sales_orders/{salesOrderId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /sales_orders/{salesOrderId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to commission documents.
     * @path /commissions/{commissionId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /commissions/{commissionId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to quiz documents.
     * @path /quizzes/{quizId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /quizzes/{quizId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to question documents.
     * @path /questions/{questionId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /questions/{questionId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to supplier documents.
     * @path /suppliers/{supplierId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
     match /suppliers/{supplierId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to cost center documents.
     * @path /cost_centers/{costCenterId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /cost_centers/{costCenterId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants access to expense category documents.
     * @path /expense_categories/{categoryId}
     * @allow (create) Authenticated user.
     * @deny (create) Not authenticated user.
     * @allow (get, list) Authenticated user.
     * @deny (get, list) Not authenticated user.
     * @allow (update, delete) Authenticated user.
     * @deny (update, delete) Not authenticated user.
     */
    match /expense_categories/{categoryId} {
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Denies listing of the accounts collection.
     * @path /accounts
     * @deny (list) All users.
     * @principle Prevents unauthorized listing of account data.
     */
    match /accounts {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}