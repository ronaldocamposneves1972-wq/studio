/**
 * @file Firebase Security Rules for Consórcio and Crédito Management System
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data,
 *  role-based access for shared resources, and structural segregation to maintain security.
 *  It prioritizes authorization independence and prevents security rules from acting as filters.
 *
 * @data_structure
 * - /users/{userId}: User profile information, accessible only by the user and admins.
 * - /users/{userId}/sales/{saleId}: Sales data associated with a specific user (sales representative).
 *   Accessible only by the user and admins.
 * - /clients/{clientId}: Client information, accessible by users with appropriate roles (e.g., Admin, Gestor, Atendente).
 * - /products/{productId}: Product information (Consórcio and Crédito). Accessible by users with appropriate roles (e.g., Admin, Gestor).
 * - /banks/{bankId}: Bank information. Accessible by users with appropriate roles (e.g., Admin, Gestor, Financeiro).
 * - /quizzes/{quizId}: Quiz configurations. Accessible by users with appropriate roles (e.g., Admin, Gestor).
 * - /webhooks/{webhookId}: Webhook configurations. Accessible by users with Admin role.
 * - /roles_admin/{userId}: Indicates admin status. Existence implies admin role.
 *
 * @key_security_decisions
 * - User listing is disallowed.
 * - Role-based access requires denormalization of role information onto documents.
 * - Ambiguous relationships default to strict owner-only access.
 * - Public read access is not granted for any collection in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the owner of an existing resource.
      * @param {string} userId - The user ID to compare against the request's authentication UID.
      * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role by verifying the existence of a document in the roles_admin collection.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access their profile if they are the owner or an admin.
     * @deny (create) - User cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for sales data associated with a specific user.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) - Authenticated user can create sales data under their own user ID.
     * @allow (get, update, delete) - Authenticated user can access sales data under their user ID if they are the owner or an admin.
     * @deny (create) - User cannot create sales data under another user's ID.
     * @deny (list) - Only the owner and admins can list sales.
     * @principle Enforces document ownership for sales data.
     */
    match /users/{userId}/sales/{saleId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for client information.
     * @path /clients/{clientId}
     * @allow (create) - Only authenticated admins can create client records.
     * @allow (get, list, update, delete) - Only authenticated admins can get, list, update, or delete client records.
     * @deny (create) - Non-admin users cannot create client records.
     * @principle Restricts client data access to admins.
     */
    match /clients/{clientId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for product information.
     * @path /products/{productId}
     * @allow (create) - Only authenticated admins can create product records.
     * @allow (get, list, update, delete) - Only authenticated admins can get, list, update, or delete product records.
     * @deny (create) - Non-admin users cannot create product records.
     * @principle Restricts product data access to admins.
     */
    match /products/{productId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for bank information.
     * @path /banks/{bankId}
     * @allow (create) - Only authenticated admins can create bank records.
     * @allow (get, list, update, delete) - Only authenticated admins can get, list, update, or delete bank records.
     * @deny (create) - Non-admin users cannot create bank records.
     * @principle Restricts bank data access to admins.
     */
    match /banks/{bankId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for quiz configurations.
     * @path /quizzes/{quizId}
     * @allow (create) - Only authenticated admins can create quiz records.
     * @allow (get, list, update, delete) - Only authenticated admins can get, list, update, or delete quiz records.
     * @deny (create) - Non-admin users cannot create quiz records.
     * @principle Restricts quiz data access to admins.
     */
    match /quizzes/{quizId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for webhook configurations.
     * @path /webhooks/{webhookId}
     * @allow (create) - Only authenticated admins can create webhook records.
     * @allow (get, list, update, delete) - Only authenticated admins can get, list, update, or delete webhook records.
     * @deny (create) - Non-admin users cannot create webhook records.
     * @principle Restricts webhook data access to admins.
     */
    match /webhooks/{webhookId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for roles_admin documents.  Existence of a document implies admin role.
     * @path /roles_admin/{userId}
     * @allow (get) - Any authenticated user can check if they are an admin.
     * @allow (create, update, delete) - Only admins can grant or revoke admin roles.
     * @allow (list) - Listing admin roles is disallowed.
     * @principle Grants admin role management only to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}