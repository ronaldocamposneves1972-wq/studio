/**
  * @fileoverview Firestore Security Rules for ConsorciaTech application.
  *
  * Core Philosophy:
  * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
  * It leverages path-based authorization and denormalization to optimize rule performance and avoid costly `get()` calls.
  *
  * Data Structure:
  * - /users/{userId}: User profiles, accessible only to the user themselves.
  * - /roles_admin/{userId}: Document existence grants admin privileges to the user.
  * - /clients/{clientId}: Client profiles.
  * - /clients/{clientId}/documents/{documentId}: Documents uploaded by clients, accessible only to the specific client.
  * - /financial_institutions/{financialInstitutionId}: Financial institution data.
  * - /consortiums/{consortiumId}: Consortium product data.
  * - /credit_products/{creditProductId}: Credit product data.
  * - /product_combos/{productComboId}: Product combo data.
  * - /sales_proposals/{salesProposalId}: Sales proposal data, with denormalized clientId for authorization.
  * - /sales_orders/{salesOrderId}: Sales order data.
  * - /commissions/{commissionId}: Commission data.
  * - /quizzes/{quizId}: Quiz data.
  * - /questions/{questionId}: Question data.
  *
  * Key Security Decisions:
  * - Strict user ownership for /users/{userId} and /clients/{clientId}/documents/{documentId}.
  * - Admin role based on document existence in /roles_admin/{userId}.
  * - Public read access to product catalogs (financial_institutions, consortiums, credit_products, product_combos, quizzes, questions), but with owner-only writes (not yet implemented due to missing ownership fields).
  * - Denormalization of clientId in sales_proposals for efficient authorization.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   function isSignedIn() {
    return request.auth != null;
   }
 

   function isOwner(userId) {
    return request.auth.uid == userId;
   }
 

   function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
   }
 

   function isAdmin() {
    return exists(/databases/(default)/documents/roles_admin/$(request.auth.uid));
   }
 

   /**
    * @description Manages user profile data.
    * @path /users/{userId}
    * @allow (create) User creates their own profile if the userId matches their auth.uid.
    * @allow (get, update, delete) User can only access their own profile.
    * @deny (create) User cannot create a profile with a mismatched userId.
    * @principle Enforces document ownership for user profiles.
    */
   match /users/{userId} {
    allow get: if isOwner(userId);
    allow list: if false;
    allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
    allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of id
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Manages admin roles based on document existence.
    * @path /roles_admin/{userId}
    * @allow (create) Only an existing admin can grant admin role.
    * @allow (get) Any signed-in user can check for admin role.
    * @allow (delete) Only an existing admin can revoke admin role.
    * @deny (create, delete) Non-admins cannot manage admin roles.
    * @principle Role-based access control using document existence.
    */
   match /roles_admin/{userId} {
     allow get: if isSignedIn();
     allow list: if false;
     allow create: if isAdmin();
     allow update: if false;
     allow delete: if isAdmin();
   }
 

   /**
    * @description Manages client data.
    * @path /clients/{clientId}
    * @allow (create) Any authenticated user can create a client.
    * @allow (get, list) Any user can read client data.
    * @allow (update, delete) Only admins can update or delete client data.
    * @principle Allows public read access but restricts writes to admins.
    */
   match /clients/{clientId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin() || isSignedIn(); // Permite updates por usu√°rios autenticados
    allow delete: if isAdmin();
   }
 

   /**
    * @description Manages documents uploaded by clients.
    * @path /clients/{clientId}/documents/{documentId}
    * @allow (create) Client can upload their own document.
    * @allow (get, list) Client can only access their own documents.
    * @allow (update, delete) Client can only modify their own documents.
    * @deny (create) Client cannot upload a document for another client.
    * @principle Enforces document ownership under a client's profile.
    */
   match /clients/{clientId}/documents/{documentId} {
    allow get: if isOwner(clientId);
    allow list: if isOwner(clientId);
    allow create: if isOwner(clientId);
    allow update: if isExistingOwner(clientId);
    allow delete: if isExistingOwner(clientId);
   }
 

   /**
    * @description Manages financial institution data.
    * @path /financial_institutions/{financialInstitutionId}
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins can update or delete.
    * @principle Public read, admin-only writes.
    */
   match /financial_institutions/{financialInstitutionId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin();
    allow delete: if isAdmin();
   }
 

   /**
    * @description Manages consortium product data.
    * @path /consortiums/{consortiumId}
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins can update or delete.
    * @principle Public read, admin-only writes.
    */
   match /consortiums/{consortiumId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin();
    allow delete: if isAdmin();
   }
 

   /**
    * @description Manages credit product data.
    * @path /credit_products/{creditProductId}
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins can update or delete.
    * @principle Public read, admin-only writes.
    */
   match /credit_products/{creditProductId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin();
    allow delete: if isAdmin();
   }
 

   /**
    * @description Manages product combo data.
    * @path /product_combos/{productComboId}
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins can update or delete.
    * @principle Public read, admin-only writes.
    */
   match /product_combos/{productComboId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin();
    allow delete: if isAdmin();
   }
 

   /**
    * @description Manages sales proposal data.
    * @path /sales_proposals/{salesProposalId}
    *   Includes denormalized 'clientId' for authorization independence.
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins or the client themselves can update or delete.
    * @principle Public read, restricted writes based on role or ownership.
    */
   match /sales_proposals/{salesProposalId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin() || (isSignedIn() && resource.data.clientId == request.auth.uid);
    allow delete: if isAdmin() || (isSignedIn() && resource.data.clientId == request.auth.uid);
   }
 

    /**
     * @description Manages sales order data.
     * @path /sales_orders/{salesOrderId}
     * @allow (get, list) Public read access.
     * @allow (create) Only authenticated users can create.
     * @allow (update, delete) Only admins can update or delete.
     * @principle Public read, admin-only writes.
     */
    match /sales_orders/{salesOrderId} {
     allow get: if true;
     allow list: if true;
     allow create: if isSignedIn();
     allow update: if isAdmin();
     allow delete: if isAdmin();
    }
 

   /**
    * @description Manages commission data.
    * @path /commissions/{commissionId}
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins can update or delete.
    * @principle Public read, admin-only writes.
    */
   match /commissions/{commissionId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin();
    allow delete: if isAdmin();
   }
 

   /**
    * @description Manages quiz data.
    * @path /quizzes/{quizId}
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins can update or delete.
    * @principle Public read, admin-only writes.
    */
   match /quizzes/{quizId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin();
    allow delete: if isAdmin();
   }
 

   /**
    * @description Manages question data.
    * @path /questions/{questionId}
    * @allow (get, list) Public read access.
    * @allow (create) Only authenticated users can create.
    * @allow (update, delete) Only admins can update or delete.
    * @principle Public read, admin-only writes.
    */
   match /questions/{questionId} {
    allow get: if true;
    allow list: if true;
    allow create: if isSignedIn();
    allow update: if isAdmin();
    allow delete: if isAdmin();
   }
 

    /**
     * @description Manages supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Public read access.
     * @allow (create) Only authenticated users can create.
     * @allow (update, delete) Only admins can update or delete.
     * @principle Public read, admin-only writes.
     */
    match /suppliers/{supplierId} {
     allow get: if true;
     allow list: if true;
     allow create: if isSignedIn();
     allow update: if isAdmin();
     allow delete: if isAdmin();
    }
 

    /**
     * @description Manages cost center data.
     * @path /cost_centers/{costCenterId}
     * @allow (get, list) Public read access.
     * @allow (create) Only authenticated users can create.
     * @allow (update, delete) Only admins can update or delete.
     * @principle Public read, admin-only writes.
     */
    match /cost_centers/{costCenterId} {
     allow get: if true;
     allow list: if true;
     allow create: if isSignedIn();
     allow update: if isAdmin();
     allow delete: if isAdmin();
    }
 

    /**
     * @description Manages expense category data.
     * @path /expense_categories/{categoryId}
     * @allow (get, list) Public read access.
     * @allow (create) Only authenticated users can create.
     * @allow (update, delete) Only admins can update or delete.
     * @principle Public read, admin-only writes.
     */
    match /expense_categories/{categoryId} {
     allow get: if true;
     allow list: if true;
     allow create: if isSignedIn();
     allow update: if isAdmin();
     allow delete: if isAdmin();
    }
 

    /**
     * @description Manages WhatsApp message templates.
     * @path /whatsapp_templates/{templateId}
     * @allow (get, list) Public read access.
     * @allow (create) Only authenticated users can create.
     * @allow (update, delete) Only admins can update or delete.
     * @principle Public read, admin-only writes.
     */
    match /whatsapp_templates/{templateId} {
     allow get: if true;
     allow list: if true;
     allow create: if isSignedIn();
     allow update: if isAdmin();
     allow delete: if isAdmin();
    }
  }
 }