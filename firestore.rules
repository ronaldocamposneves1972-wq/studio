/**
 * @fileoverview Firestore Security Rules for ConsorciaTech application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and employs public read access with owner-only writes for product catalogs and financial institutions. The goal is to balance data accessibility with robust authorization, preventing unauthorized data modification and ensuring data integrity.  Authorization Independence is achieved by denormalizing key authorization fields directly onto documents (e.g., `clientId` on `sales_proposals`).
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only to the authenticated user.
 * - /roles_admin/{userId}: Document existence determines admin role, providing elevated privileges.
 * - /clients/{clientId}: Stores client information.
 * - /clients/{clientId}/documents/{documentId}: Stores documents uploaded by clients, with client-based ownership.
 * - /financial_institutions/{financialInstitutionId}: Stores financial institution data, publicly readable.
 * - /consortiums/{consortiumId}: Stores consortium product data, publicly readable.
 * - /credit_products/{creditProductId}: Stores credit product data, publicly readable.
 * - /product_combos/{productComboId}: Stores product combo data, publicly readable.
 * - /sales_proposals/{salesProposalId}: Stores sales proposal data, with client-based access control using a denormalized `clientId` field.
 * - /commissions/{commissionId}: Stores commission data.
 * - /quizzes/{quizId}: Stores quiz data.
 * - /questions/{questionId}: Stores question data.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information harvesting.
 * - Public read access is granted to product catalogs (`consortiums`, `credit_products`, `product_combos`) and financial institutions to facilitate easy data retrieval for all users.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The `sales_proposals` collection denormalizes the `clientId` to allow rules to authorize access based on client ownership without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @details Combines ownership check with existence check for safer destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges based on document existence.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their own user document.
     * @deny (create) - Authenticated user with a non-matching userId cannot create a user document.
     * @allow (get) - Authenticated user can get their own user document.
     * @deny (get) - Authenticated user cannot get another user's document.
     * @allow (update) - Authenticated user can update their own user document.
     * @deny (update) - Authenticated user cannot update another user's document.
     * @allow (delete) - Authenticated user can delete their own user document.
     * @deny (delete) - Authenticated user cannot delete another user's document.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     * @allow (create) - Only an admin can create an admin role document.
     * @deny (create) - Non-admins cannot create admin role documents.
     * @allow (get) - Only an admin can read an admin role document.
     * @deny (get) - Non-admins cannot read admin role documents.
     * @allow (update) - Only an admin can update an admin role document.
     * @deny (update) - Non-admins cannot update admin role documents.
     * @allow (delete) - Only an admin can delete an admin role document.
     * @deny (delete) - Non-admins cannot delete admin role documents.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /clients/{clientId} collection.
     * @path /clients/{clientId}
     * @allow (create) - Any authenticated user can create a client document.
     * @deny (create) - Unauthenticated users cannot create client documents.
     * @allow (get) - Any authenticated user can get a client document.
     * @deny (get) - Unauthenticated users cannot get client documents.
     * @allow (update) - Only an admin can update a client document.
     * @deny (update) - Non-admins cannot update client documents.
     * @allow (delete) - Only an admin can delete a client document.
     * @deny (delete) - Non-admins cannot delete client documents.
     * @principle Public read access with admin-only writes for client management.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /clients/{clientId}/documents/{documentId} collection.
     * @path /clients/{clientId}/documents/{documentId}
     * @allow (create) - Authenticated user can create a document for their client.
     * @deny (create) - Authenticated user cannot create a document for another client.
     * @allow (get) - Authenticated user can get a document for their client.
     * @deny (get) - Authenticated user cannot get a document for another client.
     * @allow (update) - Authenticated user can update a document for their client.
     * @deny (update) - Authenticated user cannot update a document for another client.
     * @allow (delete) - Authenticated user can delete a document for their client.
     * @deny (delete) - Authenticated user cannot delete a document for another client.
     * @principle Path-based ownership for client documents.
     */
    match /clients/{clientId}/documents/{documentId} {
      allow get: if isSignedIn() && isOwner(clientId);
      allow list: if isSignedIn() && isOwner(clientId);
      allow create: if isSignedIn() && request.resource.data.clientId == clientId;
      allow update: if isSignedIn() && isOwner(clientId) && resource != null;
      allow delete: if isSignedIn() && isOwner(clientId) && resource != null;
    }

    /**
     * @description Rule for /financial_institutions/{financialInstitutionId} collection.
     * @path /financial_institutions/{financialInstitutionId}
     * @allow (create) - Only an admin can create a financial institution.
     * @deny (create) - Non-admins cannot create financial institutions.
     * @allow (get) - Any user can read a financial institution.
     * @deny (get) - N/A
     * @allow (update) - Only an admin can update a financial institution.
     * @deny (update) - Non-admins cannot update financial institutions.
     * @allow (delete) - Only an admin can delete a financial institution.
     * @deny (delete) - Non-admins cannot delete financial institutions.
     * @principle Public read access with admin-only writes for financial institution management.
     */
    match /financial_institutions/{financialInstitutionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /consortiums/{consortiumId} collection.
     * @path /consortiums/{consortiumId}
     * @allow (create) - Only an admin can create a consortium.
     * @deny (create) - Non-admins cannot create consortiums.
     * @allow (get) - Any user can read a consortium.
     * @deny (get) - N/A
     * @allow (update) - Only an admin can update a consortium.
     * @deny (update) - Non-admins cannot update consortiums.
     * @allow (delete) - Only an admin can delete a consortium.
     * @deny (delete) - Non-admins cannot delete consortiums.
     * @principle Public read access with admin-only writes for consortium management.
     */
    match /consortiums/{consortiumId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /credit_products/{creditProductId} collection.
     * @path /credit_products/{creditProductId}
     * @allow (create) - Only an admin can create a credit product.
     * @deny (create) - Non-admins cannot create credit products.
     * @allow (get) - Any user can read a credit product.
     * @deny (get) - N/A
     * @allow (update) - Only an admin can update a credit product.
     * @deny (update) - Non-admins cannot update credit products.
     * @allow (delete) - Only an admin can delete a credit product.
     * @deny (delete) - Non-admins cannot delete credit products.
     * @principle Public read access with admin-only writes for credit product management.
     */
    match /credit_products/{creditProductId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /product_combos/{productComboId} collection.
     * @path /product_combos/{productComboId}
     * @allow (create) - Only an admin can create a product combo.
     * @deny (create) - Non-admins cannot create product combos.
     * @allow (get) - Any user can read a product combo.
     * @deny (get) - N/A
     * @allow (update) - Only an admin can update a product combo.
     * @deny (update) - Non-admins cannot update product combos.
     * @allow (delete) - Only an admin can delete a product combo.
     * @deny (delete) - Non-admins cannot delete product combos.
     * @principle Public read access with admin-only writes for product combo management.
     */
    match /product_combos/{productComboId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /sales_proposals/{salesProposalId} collection.
     * @path /sales_proposals/{salesProposalId}
     * @allow (create) - Any authenticated user can create a sales proposal.
     * @deny (create) - Unauthenticated users cannot create sales proposals.
     * @allow (get) - Any authenticated user can read any sales proposals.
     * @deny (get) - Unauthenticated users cannot get sales proposals.
     * @allow (update) - Only an admin can update sales proposals.
     * @deny (update) - Non-admins cannot update sales proposals.
     * @allow (delete) - Only an admin can delete sales proposals.
     * @deny (delete) - Non-admins cannot delete sales proposals.
     * @principle Public read access with admin-only writes for sales proposal management.
     */
    match /sales_proposals/{salesProposalId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /commissions/{commissionId} collection.
     * @path /commissions/{commissionId}
     * @allow (create) - Only an admin can create a commission.
     * @deny (create) - Non-admins cannot create commissions.
     * @allow (get) - Only an admin can read a commission.
     * @deny (get) - Non-admins cannot read commissions.
     * @allow (update) - Only an admin can update a commission.
     * @deny (update) - Non-admins cannot update commissions.
     * @allow (delete) - Only an admin can delete a commission.
     * @deny (delete) - Non-admins cannot delete commissions.
     * @principle Restricts commission management to admins.
     */
    match /commissions/{commissionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /quizzes/{quizId} collection.
     * @path /quizzes/{quizId}
     * @allow (create) - Any authenticated user can create a quiz.
     * @deny (create) - Unauthenticated users cannot create quizzes.
     * @allow (get) - Any authenticated user can read any quizzes.
     * @deny (get) - Unauthenticated users cannot get quizzes.
     * @allow (update) - Only an admin can update quizzes.
     * @deny (update) - Non-admins cannot update quizzes.
     * @allow (delete) - Only an admin can delete quizzes.
     * @deny (delete) - Non-admins cannot delete quizzes.
     * @principle Public read access with admin-only writes for quiz management.
     */
    match /quizzes/{quizId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for /questions/{questionId} collection.
     * @path /questions/{questionId}
     * @allow (create) - Only an admin can create a question.
     * @deny (create) - Non-admins cannot create questions.
     * @allow (get) - Any user can read a question.
     * @deny (get) - N/A
     * @allow (update) - Only an admin can update a question.
     * @deny (update) - Non-admins cannot update questions.
     * @allow (delete) - Only an admin can delete a question.
     * @deny (delete) - Non-admins cannot delete questions.
     * @principle Public read access with admin-only writes for question management.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}